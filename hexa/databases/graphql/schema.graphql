type Database {
  tables(page:Int, perPage:Int): DatabaseTablePage!
  table(name: String!): DatabaseTable
  credentials: DatabaseCredentials
}

type DatabaseCredentials {
  dbName: String!
  username: String!
  password: String!
  host: String!
  port: Int!
  url: String!
}

extend type Workspace {
  database: Database!
}

type TableColumn {
  name: String!
  type: String!
}

enum OrderByDirection {
  ASC
  DESC
}

type DatabaseTable {
  name: String!
  count: Int
  columns: [TableColumn!]!
  sample: JSON!
  rows(orderBy: String!, direction: OrderByDirection!, page: Int!, perPage: Int = 15): TableRowsPage!
}

type TableRowsPage {
  pageNumber: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  items: [JSON!]!
}

type DatabaseTablePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [DatabaseTable!]!
}

enum GenerateNewDatabasePasswordError {
  PERMISSION_DENIED
  NOT_FOUND
}

input GenerateNewDatabasePasswordInput {
  workspaceSlug: String!
}

type GenerateNewDatabasePasswordResult {
  success: Boolean!
  errors:[GenerateNewDatabasePasswordError!]!
  workspace: Workspace
}

extend type Mutation {
  generateNewDatabasePassword(input: GenerateNewDatabasePasswordInput!): GenerateNewDatabasePasswordResult! @loginRequired
}