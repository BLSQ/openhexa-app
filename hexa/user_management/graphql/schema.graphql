# Users
type User {
    id: String!
    email: String!
    firstName: String
    lastName: String
    displayName: String!
    avatar: Avatar!
    dateJoined: DateTime!
    lastLogin: DateTime
}
type Avatar {
    initials: String!
    color: String!
}

type Me {
    user: User
    features: [FeatureFlag!]!
    authorizedActions: [MeAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
    permissions: MePermissions!
}

# This is our legacy approach : a simple enum that other modules can extend
# it works fine, but implementing it in the API is complex - see resolve_me to get
# a glimpse of the added complexity. We are now moving to an alternative approach -
# see the "MePermissions" type below
#FIXME To remove once authorizedActions are completely deprecated
enum MeAuthorizedActions {
    CREATE_TEAM
    ADMIN_PANEL
    SUPER_USER
}

# This is the preferred way of determining the global (not specific to a business object) actions that users can take
# This type can be extended in other modules. It is the responsibility of each module to extend this type and provide a
# resolver for the added fields.
type MePermissions {
    createTeam: Boolean!
    adminPanel: Boolean!
    superUser: Boolean!
}

input LoginInput {
    email: String!
    password: String!
    token: String
}

enum LoginError {
    OTP_REQUIRED
    INVALID_CREDENTIALS
    INVALID_OTP
}

type LoginResult {
    success: Boolean!
    errors: [LoginError!]
}
type LogoutResult {
    success: Boolean!
}
input ResetPasswordInput {
    email: String!
}
type ResetPasswordResult {
    success: Boolean!
}
input SetPasswordInput {
    uidb64: String!
    token: String!
    password1: String!
    password2: String!
}
enum SetPasswordError {
    USER_NOT_FOUND
    PASSWORD_MISMATCH
    INVALID_TOKEN
    INVALID_PASSWORD
}
type SetPasswordResult {
    success: Boolean!
    error: SetPasswordError
}
extend type Query {
    me: Me!
}

extend type Mutation {
    login(input: LoginInput!): LoginResult!
    logout: LogoutResult!
    resetPassword(input: ResetPasswordInput!): ResetPasswordResult!
    setPassword(input: SetPasswordInput!): SetPasswordResult!

    verifyDevice(input: VerifyDeviceInput!): VerifyDeviceResult! 
    generateChallenge: GenerateChallengeResult! @loginRequired(withoutTwoFactor: true)
    enableTwoFactor(input: EnableTwoFactorInput): EnableTwoFactorResult! @loginRequired
    disableTwoFactor(input: DisableTwoFactorInput): DisableTwoFactorResult! @loginRequired
}

# Teams
enum TeamAuthorizedActions {
    UPDATE
    DELETE
    CREATE_MEMBERSHIP
}
type Team {
    id: String!
    name: String!
    memberships(page: Int, perPage: Int): MembershipPage!
    authorizedActions: [TeamAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
    permissions: TeamPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type TeamPermissions {
    update: Boolean!
    createMembership: Boolean!
    delete: Boolean!
}

type TeamPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [Team!]!
}
input CreateTeamInput {
    name: String!
}
type CreateTeamResult {
    team: Team
    success: Boolean!
    errors: [CreateTeamError!]!
}
enum CreateTeamError {
    PERMISSION_DENIED
    NAME_DUPLICATE
}

input UpdateTeamInput {
    id: String!
    name: String
}
type UpdateTeamResult {
    team: Team
    success: Boolean!
    errors: [UpdateTeamError!]!
}
enum UpdateTeamError {
    NOT_FOUND
    PERMISSION_DENIED
    NAME_DUPLICATE
}

input DeleteTeamInput {
    id: String!
}
type DeleteTeamResult {
    success: Boolean!
    errors: [DeleteTeamError!]!
}
enum DeleteTeamError {
    NOT_FOUND
    PERMISSION_DENIED
}
extend type Query {
    team(id: String!): Team
    teams(term: String, page: Int, perPage: Int): TeamPage!
}
extend type Mutation {
    createTeam(input: CreateTeamInput!): CreateTeamResult! @loginRequired
    updateTeam(input: UpdateTeamInput!): UpdateTeamResult! @loginRequired
    deleteTeam(input: DeleteTeamInput!): DeleteTeamResult! @loginRequired
}

# Memberships
enum MembershipRole {
    ADMIN
    REGULAR
}
type MembershipPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [Membership!]!
}
type Membership {
    id: String!
    user: User!
    team: Team!
    authorizedActions: [MembershipAuthorizedActions!]!  @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
    permissions: MembershipPermissions!
    role: MembershipRole!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type MembershipPermissions {
    update: Boolean!
    delete: Boolean!
}

#FIXME To remove once authorizedActions are completely deprecated
enum MembershipAuthorizedActions {
    UPDATE
    DELETE
}
enum PermissionMode {
    OWNER
    EDITOR
    VIEWER
}
input CreateMembershipInput {
    userEmail: String!
    teamId: String!
    role: MembershipRole!
}
type CreateMembershipResult {
    success: Boolean!
    membership: Membership
    errors: [CreateMembershipError!]!
}
enum CreateMembershipError {
    ALREADY_EXISTS
    PERMISSION_DENIED
    NOT_FOUND
}
input UpdateMembershipInput {
    id: String!
    role: MembershipRole!
}
type UpdateMembershipResult {
    success: Boolean!
    membership: Membership
    errors: [UpdateMembershipError!]!
}
enum UpdateMembershipError {
    PERMISSION_DENIED
    NOT_FOUND
    INVALID_ROLE
}
input DeleteMembershipInput {
    id: String!
}
type DeleteMembershipResult {
    success: Boolean!
    errors: [DeleteMembershipError!]!
}
enum DeleteMembershipError {
    PERMISSION_DENIED
    NOT_FOUND
}
extend type Mutation {
    createMembership(input: CreateMembershipInput!): CreateMembershipResult!
    updateMembership(input: UpdateMembershipInput!): UpdateMembershipResult!
    deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult!
}

# Organizations
type Organization {
    id: String!
    name: String!
    type: String!
    url: String!
    contactInfo: String!
}
input OrganizationInput {
    id: String!
    name: String
    type: String
    url: String
    contactInfo: String
}

type FeatureFlag {
    code: String!
    config: JSON!
}
extend type Query {
    organizations: [Organization!]!
}

# Two Factor

directive @loginRequired(withoutTwoFactor: Boolean) on FIELD_DEFINITION

extend type Me {
    hasTwoFactorEnabled: Boolean!
}

input VerifyDeviceInput {
    token: String
}

enum VerifyDeviceError {
    NO_DEVICE
    INVALID_OTP
}

type VerifyDeviceResult {
    success: Boolean!
    errors: [VerifyDeviceError!]
}

enum GenerateChallengeError {
    DEVICE_NOT_FOUND
    CHALLENGE_ERROR
}

type GenerateChallengeResult {
    success: Boolean!
    errors: [GenerateChallengeError!]
}

enum DisableTwoFactorError {
    INVALID_OTP
    NOT_ENABLED
}

input DisableTwoFactorInput {
    token: String!
}

type DisableTwoFactorResult {
    success: Boolean!
    errors: [DisableTwoFactorError!]
}

input EnableTwoFactorInput {
    email: String
}

enum EnableTwoFactorError {
    ALREADY_ENABLED
    EMAIL_MISMATCH
}

type EnableTwoFactorResult {
    success: Boolean!
    verified: Boolean
    errors: [EnableTwoFactorError!]
}
