extend type Query {
    me: User
    countries: [Country!]
    organizations: [Organization!]
}
type User {
    id: String!
    email: String!
    firstName: String
    lastName: String
    avatar: Avatar!
}
type Avatar {
    initials: String!
    color: String!
}
type Organization {
    id: String!
    name: String!
    type: String!
    url: String!
    contactInfo: String!
}
input OrganizationInput {
    id: String!
    name: String
    type: String
    url: String
    contactInfo: String
}
type Country {
    code: String!
    alpha3: String!
    name: String!
    flag: String!
}
input CountryInput {
    code: String!
    alpha3: String
    name: String
    flag: String
}
type LoginResult {
    success: Boolean!
    me: User
}
type LogoutResult {
    success: Boolean!
}
input LoginInput {
    email: String!
    password: String!
}
input ResetPasswordInput {
    email: String!
}
type ResetPasswordResult {
    success: Boolean!
}

input SetPasswordInput {
    uidb64: String!
    token: String!
    password1: String!
    password2: String!
}
enum SetPasswordError {
    USER_NOT_FOUND
    PASSWORD_MISMATCH
    INVALID_TOKEN
    INVALID_PASSWORD
}
type SetPasswordResult {
    success: Boolean!
    error: SetPasswordError
}

extend type Mutation {
    login(input: LoginInput!): LoginResult!
    logout: LogoutResult!
    resetPassword(input: ResetPasswordInput!): ResetPasswordResult!
    setPassword(input: SetPasswordInput!): SetPasswordResult!
}
