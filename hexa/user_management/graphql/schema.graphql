type User {
    id: String!
    email: String!
    firstName: String
    lastName: String
    avatar: Avatar!
}
type Avatar {
    initials: String!
    color: String!
}
type Team {
    id: String!
    name: String!
    memberships(page: Int, perPage: Int): MembershipPage!
}
type TeamPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [Team!]!
}
enum MembershipRole {
    ADMIN
    REGULAR
}
type MembershipPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [Membership!]!
}
type Membership {
    id: String!
    user: User!
    team: Team!
    role: MembershipRole!
}
type Organization {
    id: String!
    name: String!
    type: String!
    url: String!
    contactInfo: String!
}
input OrganizationInput {
    id: String!
    name: String
    type: String
    url: String
    contactInfo: String
}
type Country {
    code: String!
    alpha3: String!
    name: String!
    flag: String!
}
input CountryInput {
    code: String!
    alpha3: String
    name: String
    flag: String
}
type LoginResult {
    success: Boolean!
    me: User
}
type LogoutResult {
    success: Boolean!
}
input LoginInput {
    email: String!
    password: String!
}
extend type Query {
    me: User
    countries: [Country!]!
    organizations: [Organization!]!
    teams(page: Int, perPage: Int): TeamPage!
}
extend type Mutation {
    login(input: LoginInput!): LoginResult!
    logout: LogoutResult!
}
