type Workspace {
  id: String!
  name: String!
  description: String
  members(page: Int, perPage: Int): WorkspaceMembershipPage!
  permissions: WorkspacePermissions!
  countries: [Country!]!
  createdAt: DateTime!
  updatedAt: DateTime
  createdBy: User!
}

type WorkspacePermissions {
  update: Boolean!
  delete: Boolean!
  manageMembers: Boolean!
}

type WorkspacePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Workspace!]!
}

enum WorkspaceMembershipRole {
  ADMIN
  EDITOR
  VIEWER
}

type WorkspaceMembership {
  id: String!
  user: User!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkspaceMembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceMembership!]!
}

extend type Query {
  workspace(id: String!): Workspace @login_required
  workspaces(page: Int, perPage: Int): WorkspacePage! @login_required
}

enum CreateWorkspaceError {
  PERMISSION_DENIED
}

enum UpdateWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
  INVALID
}

enum DeleteWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

enum InviteWorkspaceMembershipError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  USER_NOT_FOUND
  WORKSPACE_NOT_FOUND
}

type CreateWorkspaceResult {
  success: Boolean!
  errors: [CreateWorkspaceError!]!
  workspace: Workspace
}

type UpdateWorkspaceResult {
  success: Boolean!
  errors: [UpdateWorkspaceError!]!
  workspace: Workspace
}

type DeleteWorkspaceResult {
  success: Boolean!
  errors: [DeleteWorkspaceError!]!
}

type InviteWorkspaceMemberResult{
  success: Boolean!
  errors: [InviteWorkspaceMembershipError!]!
  workspaceMembership: WorkspaceMembership
}

input CreateWorkspaceInput {
  name: String!
  description: String
  countries: [CountryInput!]
}

input UpdateWorkspaceInput {
  id: String!
  name: String
  description: String
  countries: [CountryInput!]
}

input DeleteWorkspaceInput {
  id: String!
}

input InviteWorkspaceMemberInput {
  workspaceId: String!
  userEmail: String!
  role: WorkspaceMembershipRole!
}

extend type Mutation {
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspaceResult! @login_required
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspaceResult! @login_required
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspaceResult! @login_required
  inviteWorkspaceMember(input: InviteWorkspaceMemberInput!): InviteWorkspaceMemberResult! @login_required
}


extend type MePermissions {
    createWorkspace: Boolean!
}