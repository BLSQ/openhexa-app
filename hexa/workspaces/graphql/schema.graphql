type Workspace {
  slug: String!
  name: String!
  description: String
  members(page: Int, perPage: Int): WorkspaceMembershipPage!
  permissions: WorkspacePermissions!
  countries: [Country!]!
  createdAt: DateTime!
  updatedAt: DateTime
  createdBy: User!
  connections: [Connection!]!
  invitations(status: WorkspaceInvitationStatus,page: Int, perPage: Int): WorkspaceInvitationPage!
}

type WorkspaceInvitationPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceInvitation!]!
}

type WorkspaceInvitation {
  id: UUID!
  email: String!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  status: WorkspaceInvitationStatus!
  invited_by: User
  createdAt: DateTime!
  updatedAt: DateTime
}

enum WorkspaceInvitationStatus {
  PENDING
  ACCEPTED
}

type WorkspacePermissions {
  update: Boolean!
  delete: Boolean!
  manageMembers: Boolean!
  createConnection: Boolean!
  launchNotebookServer: Boolean!
}

type WorkspacePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Workspace!]!
}

enum WorkspaceMembershipRole {
  ADMIN
  EDITOR
  VIEWER
}

type WorkspaceMembership {
  id: UUID!
  user: User!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkspaceMembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceMembership!]!
}


extend type Query {
  workspace(slug: String!): Workspace @loginRequired
  workspaces(page: Int, perPage: Int): WorkspacePage! @loginRequired
  databaseTable(id:String!): DatabaseTable @loginRequired
}

enum CreateWorkspaceError {
  PERMISSION_DENIED
  INVALID_SLUG
}

enum UpdateWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

enum DeleteWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

enum ArchiveWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

enum InviteWorkspaceMembershipError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  USER_NOT_FOUND
  WORKSPACE_NOT_FOUND
}

enum DeleteWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

enum UpdateWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

type CreateWorkspaceResult {
  success: Boolean!
  errors: [CreateWorkspaceError!]!
  workspace: Workspace
}

type UpdateWorkspaceResult {
  success: Boolean!
  errors: [UpdateWorkspaceError!]!
  workspace: Workspace
}

type DeleteWorkspaceResult {
  success: Boolean!
  errors: [DeleteWorkspaceError!]!
}

type ArchiveWorkspaceResult {
  success: Boolean!
  errors: [ArchiveWorkspaceError!]!
}

type InviteWorkspaceMemberResult{
  success: Boolean!
  errors: [InviteWorkspaceMembershipError!]!
  workspaceMembership: WorkspaceMembership
}

type DeleteWorkspaceMemberResult {
  success: Boolean!
  errors: [DeleteWorkspaceMemberError!]!
}

type UpdateWorkspaceMemberResult {
  success: Boolean!
  errors:[UpdateWorkspaceMemberError!]!
  workspaceMembership: WorkspaceMembership
}

input CreateWorkspaceInput {
  name: String!
  slug: String
  description: String
  countries: [CountryInput!]
  loadSampleData: Boolean
}

input UpdateWorkspaceInput {
  slug: String!
  name: String
  description: String
  countries: [CountryInput!]
}

input DeleteWorkspaceInput {
  slug: String!
}

input InviteWorkspaceMemberInput {
  workspaceSlug: String!
  userEmail: String!
  role: WorkspaceMembershipRole!
}

input ResendWorkspaceInvitationInput {
  invitationId: UUID!
}

input DeleteWorkspaceMemberInput {
  membershipId: UUID!
}

input DeleteWorkspaceInvitationInput {
  invitationId: UUID!
}

input UpdateWorkspaceMemberInput {
  membershipId: UUID!
  role: WorkspaceMembershipRole!
}

input ArchiveWorkspaceInput {
  slug: String!
}

input GenerateWorkspaceTokenInput {
  slug: String!
}

type GenerateWorkspaceTokenResult {
  success: Boolean!
  token: String
  errors: [GenerateWorkspaceTokenError!]!
}

enum GenerateWorkspaceTokenError {
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
}

input JoinWorkspaceInput {
  token: String!
  firstName: String!
  lastName: String!
  password: String!
  confirmPassword: String!
}

type JoinWorkspaceResult {
  success: Boolean!
  workspace: Workspace
  errors: [JoinWorkspaceError!]!
}

type DeleteWorkspaceInvitationResult {
  success: Boolean!
  errors: [DeleteWorkspaceInvitationError!]!
}

type ResendWorkspaceInvitationResult {
  success: Boolean!
  errors: [ResendWorkspaceInvitationError!]!
}

enum ResendWorkspaceInvitationError {
  INVITATION_NOT_FOUND
  PERMISSION_DENIED
  ALREADY_EXISTS
}

enum DeleteWorkspaceInvitationError {
  INVITATION_NOT_FOUND
  PERMISSION_DENIED
}

enum JoinWorkspaceError {
  EXPIRED_TOKEN
  INVALID_TOKEN
  ALREADY_EXISTS
  INVALID_CREDENTIALS
  INVITATION_NOT_FOUND
}

extend type Mutation {
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspaceResult! @loginRequired
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspaceResult! @loginRequired
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspaceResult! @loginRequired
  archiveWorkspace(input: ArchiveWorkspaceInput!): ArchiveWorkspaceResult! @loginRequired
  inviteWorkspaceMember(input: InviteWorkspaceMemberInput!): InviteWorkspaceMemberResult! @loginRequired
  updateWorkspaceMember(input: UpdateWorkspaceMemberInput!): UpdateWorkspaceMemberResult! @loginRequired
  deleteWorkspaceMember(input: DeleteWorkspaceMemberInput!): DeleteWorkspaceMemberResult! @loginRequired
  generateWorkspaceToken(input: GenerateWorkspaceTokenInput!): GenerateWorkspaceTokenResult! @loginRequired
  joinWorkspace(input: JoinWorkspaceInput!): JoinWorkspaceResult!
  resendWorkspaceInvitation(input: ResendWorkspaceInvitationInput!): ResendWorkspaceInvitationResult! @loginRequired
  deleteWorkspaceInvitation(input: DeleteWorkspaceInvitationInput!): DeleteWorkspaceInvitationResult! @loginRequired
}

### Connections

enum ConnectionType {
  S3
  GCS
  POSTGRESQL
  DHIS2
  CUSTOM
  IASO
}

type ConnectionField {
  code: String!
  value: String
  secret: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

type ConnectionPermissions {
  update: Boolean!
  delete: Boolean!
}

type Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

input ConnectionFieldInput {
  code: String!
  value: String
  secret: Boolean!
}

input CreateConnectionInput {
  workspaceSlug: String!
  name: String!
  slug: String
  description: String
  type: ConnectionType!
  fields: [ConnectionFieldInput!]
}

type CreateConnectionResult {
  success: Boolean!
  connection: Connection
  errors: [CreateConnectionError!]!
}

enum CreateConnectionError {
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
  INVALID_SLUG
}

input UpdateConnectionInput {
  id: String!
  name: String
  slug: String
  description: String
  fields: [ConnectionFieldInput!]
}

type UpdateConnectionResult {
  success: Boolean!
  connection: Connection
  errors: [UpdateConnectionError!]!
}

enum UpdateConnectionError {
  NOT_FOUND
  PERMISSION_DENIED
  INVALID_SLUG
}


input DeleteConnectionInput {
  id: String!
}

type DeleteConnectionResult {
  success: Boolean!
  errors: [DeleteConnectionError!]!
}

enum DeleteConnectionError {
  NOT_FOUND
  PERMISSION_DENIED
}

extend type Query {
  connection(id: UUID!): Connection @loginRequired
}


extend type Mutation {
  createConnection(input: CreateConnectionInput!): CreateConnectionResult! @loginRequired
  updateConnection(input: UpdateConnectionInput!): UpdateConnectionResult! @loginRequired
  deleteConnection(input: DeleteConnectionInput!): DeleteConnectionResult! @loginRequired
}


extend type MePermissions {
  createWorkspace: Boolean!
}