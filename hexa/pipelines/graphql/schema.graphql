enum MessagePriority {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

type PipelineRunMessage {
  message: String!
  priority: MessagePriority!
  timestamp: DateTime
}

enum PipelineRunTrigger {
  scheduled
  manual
  webhook
}

type GenericOutput {
  name: String
  type: String!
  uri: String!
}


union PipelineRunOutput = BucketObject | GenericOutput | DatabaseTable

enum PipelineRunStatus {
  success
  running
  failed
  queued
}

type PipelineParameter {
  code: String!
  name: String!
  type: String!
  multiple: Boolean!
  required: Boolean!
  default: Generic
  help: String
  choices: [Generic!]
}

input ParameterInput {
  code: String!
  type: String!
  name: String
  multiple: Boolean
  required: Boolean
  default: Generic
  help: String
  choices: [Generic!]
}

type PipelineVersion {
  id: UUID!
  user: User
  pipeline: Pipeline!
  number: Int!
  createdAt: DateTime!
  parameters: [PipelineParameter!]!
  zipfile: String!
  timeout: Int
}

type PipelineRun {
  id: UUID!
  run_id: UUID!
  user: User
  pipeline: Pipeline!
  version: PipelineVersion!
  config: JSON!
  status: PipelineRunStatus!
  executionDate: DateTime
  duration: Int
  progress: Int!
  triggerMode: PipelineRunTrigger
  messages: [PipelineRunMessage!]!
  logs: String
  outputs: [PipelineRunOutput!]!
  code: String!
  sendMailNotifications: Boolean!
  timeout: Int
  datasetVersion: [DatasetVersion!]!
}

enum PipelineRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

type PipelineRunPage {
  items: [PipelineRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type PipelinePermissions {
  update: Boolean!
  delete: Boolean!
  run: Boolean!
  deleteVersion: Boolean!
  schedule: Boolean!
}

extend type WorkspacePermissions {
  createPipeline: Boolean!
}

type PipelineVersionPage {
  items: [PipelineVersion!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type PipelineRecipient {
  user: User!
  pipeline: Pipeline!
}

type Pipeline {
  id: UUID!
  name: String
  code: String!
  permissions: PipelinePermissions!
  workspace: Workspace
  config: JSON!
  schedule: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  currentVersion: PipelineVersion
  runs(page: Int, perPage: Int, orderBy: PipelineRunOrderBy): PipelineRunPage!
  versions(page: Int, perPage: Int): PipelineVersionPage!
  recipients: [PipelineRecipient!]!
  webhookEnabled: Boolean!
  webhookUrl: String
}

type PipelinesPage {
  items: [Pipeline!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

enum PipelineError {
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  PIPELINE_DOES_NOT_SUPPORT_PARAMETERS
  WORKSPACE_NOT_FOUND
  PIPELINE_ALREADY_EXISTS
  INVALID_CONFIG
  PIPELINE_ALREADY_COMPLETED
  INVALID_TIMEOUT_VALUE
  PERMISSION_DENIED
}

extend type Query {
  pipelines(workspaceSlug: String, page: Int, perPage: Int): PipelinesPage! @loginRequired
  pipeline(id: UUID!): Pipeline @loginRequired
  pipelineByCode(workspaceSlug: String!, code: String!): Pipeline @loginRequired
  pipelineRun(id: UUID!): PipelineRun @loginRequired
}

input CreatePipelineInput {
  code: String!
  name: String
  workspaceSlug: String!
}

type CreatePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  pipeline: Pipeline
}

input DeletePipelineInput {
  id: UUID!
}

type DeletePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
}

input RunPipelineInput {
  id: UUID!
  version: Int
  config: JSON!
  sendMailNotifications: Boolean
}

type RunPipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  run: PipelineRun
}

input PipelineTokenInput {
  workspaceSlug: String!
  pipelineCode: String!
}

type PipelineTokenResult {
  success: Boolean!
  errors: [PipelineError!]!
  token: String
}

input UploadPipelineInput {
  workspaceSlug: String!
  code: String!
  parameters: [ParameterInput!]!
  zipfile: String!
  timeout: Int
}

type UploadPipelineResult {
  success: Boolean!
  version: Int
  errors: [PipelineError!]!
}

input LogPipelineMessageInput {
  priority: MessagePriority!
  message: String!
}

type LogPipelineMessageResult {
  success: Boolean!
  errors: [PipelineError!]!
}

input UpdatePipelineProgressInput {
  percent: Int!
}

type UpdatePipelineProgressResult {
  success: Boolean!
  errors: [PipelineError!]!
}

input AddPipelineOutputInput {
  uri: String!
  type: String!
  name: String
}

type AddPipelineOutputResult {
  success: Boolean!
  errors: [PipelineError!]!
}

input UpdatePipelineInput {
  id: UUID!
  name: String
  config: JSON
  schedule: String
  description: String
  recipientIds: [UUID!]
  webhookEnabled: Boolean
}
enum UpdatePipelineError {
  NOT_FOUND
  PERMISSION_DENIED
  INVALID_CONFIG
}

type UpdatePipelineResult {
  success: Boolean!
  errors: [UpdatePipelineError!]!
  pipeline: Pipeline
}

input DeletePipelineVersionInput {
  pipelineId: UUID!
  versionId: UUID!
}

enum DeletePipelineVersionError {
  PIPELINE_VERSION_NOT_FOUND
  PERMISSION_DENIED
  PIPELINE_NOT_FOUND
}

type DeletePipelineVersionResult {
  success: Boolean!
  errors: [DeletePipelineVersionError!]!
}

extend type Mutation {
  createPipeline(input: CreatePipelineInput!): CreatePipelineResult! @loginRequired
  updatePipeline(input: UpdatePipelineInput!): UpdatePipelineResult! @loginRequired
  deletePipeline(input: DeletePipelineInput): DeletePipelineResult! @loginRequired
  runPipeline(input: RunPipelineInput): RunPipelineResult! @loginRequired
  pipelineToken(input: PipelineTokenInput): PipelineTokenResult!
  uploadPipeline(input: UploadPipelineInput): UploadPipelineResult!
  logPipelineMessage(input: LogPipelineMessageInput): LogPipelineMessageResult!
  updatePipelineProgress(input: UpdatePipelineProgressInput): UpdatePipelineProgressResult!
  addPipelineOutput(input: AddPipelineOutputInput): AddPipelineOutputResult!
  deletePipelineVersion(input: DeletePipelineVersionInput!): DeletePipelineVersionResult!
}
 