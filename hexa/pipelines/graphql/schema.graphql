"""
An enumeration representing the priority levels of a message.
"""
enum MessagePriority {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

"""
Represents a message associated with a pipeline run.
"""
type PipelineRunMessage {
  message: String!  # The message content.
  priority: MessagePriority!  # The priority level of the message.
  timestamp: DateTime  # The timestamp when the message was created.
}

enum PipelineRunTrigger {
  scheduled
  manual
  webhook
}

"""
Represents a generic output of a pipeline run.
"""
type GenericOutput {
  name: String  # The name of the output.
  type: String!  # The type of the output.
  uri: String!  # The URI of the output.
}

"""
Represents an output of a pipeline run, which can be either a BucketObject, GenericOutput, or DatabaseTable.
"""
union PipelineRunOutput = BucketObject | GenericOutput | DatabaseTable

"""
Enum representing the status of a pipeline run.
"""
enum PipelineRunStatus {
  success
  running
  failed
  queued
  stopped
  terminating
}

"""
Enum representing the type of a parameter.
"""
enum ParameterType {
  bool
  int
  str
  float
  dataset
  dhis2
  postgresql
  iaso
  s3
  gcs
  custom
}

"""
Enum representing the type of a parameter widget.
"""
enum ParameterWidget {
  DHIS2_ORG_UNITS
  DHIS2_ORG_UNIT_GROUPS
  DHIS2_ORG_UNIT_LEVELS
  DHIS2_DATASETS
  DHIS2_DATA_ELEMENTS
  DHIS2_DATA_ELEMENT_GROUPS
  DHIS2_INDICATORS
  DHIS2_INDICATOR_GROUPS
}

"""
Represents a parameter of a pipeline.
"""
type PipelineParameter {
  code: String!  # The code of the parameter.
  name: String!  # The name of the parameter.
  type: ParameterType!  # The type of the parameter.
  multiple: Boolean!  # Indicates if the parameter allows multiple values.
  required: Boolean!  # Indicates if the parameter is required.
  default: Generic  # The default value of the parameter.
  help: String  # The help text for the parameter.
  widget: ParameterWidget  # The widget to use for the parameter.
  connection: String  # The connection associated with the parameter.
  choices: [Generic!]  # The list of choices for the parameter.
}

"""
Represents an input parameter of a pipeline.
"""
input ParameterInput {
  code: String!  # The code of the parameter.
  type: String!  # The type of the parameter.
  name: String  # The name of the parameter.
  multiple: Boolean  # Indicates if the parameter allows multiple values.
  required: Boolean  # Indicates if the parameter is required.
  default: Generic  # The default value of the parameter.
  widget: ParameterWidget  # The widget to use for the parameter.
  connection: String # The connection associated with the parameter.
  help: String  # The help text for the parameter.
  choices: [Generic!]  # The list of choices for the parameter.
}

"""
Represents the permissions for a pipeline version.
"""
type PipelineVersionPermissions {
  update: Boolean!  # Indicates if the pipeline version can be updated.
  delete: Boolean!  # Indicates if the pipeline version can be deleted.
}

"""
Represents a version of a pipeline.
"""
type PipelineVersion {
  id: UUID!  # The ID of the pipeline version.
  user: User  # The user who created the pipeline version.
  pipeline: Pipeline!  # The pipeline associated with the version.
  name: String  # The optional name of the pipeline version.
  number: Int @deprecated(reason: "Use 'versionNumber' instead")  # The version number of the pipeline version.
  versionNumber: Int!  # The version number of the pipeline version.
  versionName: String!  # The version name of the pipeline version including the versionNumber and the optional name.
  description: String  # The description of the pipeline version.
  externalLink: URL  # The external link associated with the pipeline version.
  createdAt: DateTime!  # The timestamp when the pipeline version was created.
  parameters: [PipelineParameter!]!  # The parameters of the pipeline version.
  isLatestVersion: Boolean!  # Indicates if the pipeline version is the latest version.
  zipfile: String!  # The ZIP file base64 encoded.
  timeout: Int  # The timeout value for the pipeline version (in seconds).
  permissions: PipelineVersionPermissions!  # The permissions for the pipeline version.
  config: JSON  # The default configuration to set on newly created pipeline runs
  templateVersion: PipelineTemplateVersion  # The template version associated with the pipeline version.
}

"""
Represents a pipeline run.
"""
type PipelineRun {
  id: UUID!  # The ID of the pipeline run.
  run_id: UUID!  # The run ID of the pipeline run.
  user: User  # The user who initiated the pipeline run.
  pipeline: Pipeline!  # The pipeline associated with the run.
  version: PipelineVersion  # The version of the pipeline used for the run.
  config: JSON!  # The configuration for the pipeline run.
  status: PipelineRunStatus!  # The status of the pipeline run.
  executionDate: DateTime  # The execution date of the pipeline run.
  duration: Int  # The duration of the pipeline run in seconds.
  progress: Int!  # The progress of the pipeline run as a percentage.
  triggerMode: PipelineRunTrigger  # The trigger mode of the pipeline run.
  messages: [PipelineRunMessage!]!  # The messages associated with the pipeline run.
  logs: String  # The logs generated during the pipeline run.
  outputs: [PipelineRunOutput!]!  # The outputs generated by the pipeline run.
  code: String!  # The code of the pipeline run.
  sendMailNotifications: Boolean!  # Indicates if email notifications should be sent for the pipeline run.
  enableDebugLogs: Boolean!  # Indicates if debug logs should be stored for the pipeline run.
  timeout: Int  # The timeout value for the pipeline run.
  datasetVersions: [DatasetVersion!]!  # The dataset versions associated with the pipeline run.
  stoppedBy: User  # The user who stopped the pipeline run.
}

"""
Enum representing the possible orderings for pipeline runs.
"""
enum PipelineRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

"""
Represents a page of pipeline runs.
"""
type PipelineRunPage {
  items: [PipelineRun!]!  # The list of pipeline runs on the current page.
  pageNumber: Int!  # The current page number.
  totalPages: Int!  # The total number of pages.
  totalItems: Int!  # The total number of pipeline runs.
}

"""
Represents the permissions for a pipeline.
"""
type PipelinePermissions {
  update: Boolean!  # Indicates if the pipeline can be updated.
  delete: Boolean!  # Indicates if the pipeline can be deleted.
  run: Boolean!  # Indicates if the pipeline can be run.
  schedule: Boolean!  # Indicates if the pipeline can be scheduled.
  createVersion: Boolean!  # Indicates if a new version of the pipeline can be created.
  stopPipeline: Boolean!  # Indicates if the pipeline can be stopped.
  createTemplateVersion: CreateTemplateVersionPermission!  # Indicates if a new template version can be created.
}

"""
Represents the permission details for creating a template version.
"""
type CreateTemplateVersionPermission {
  isAllowed: Boolean!
  reasons: [CreateTemplateVersionPermissionReason!]!
}

"""
Enum representing the possible reasons preventing the creation of a template version.
"""
enum CreateTemplateVersionPermissionReason {
  PERMISSION_DENIED
  PIPELINE_IS_ALREADY_FROM_TEMPLATE
  NO_NEW_TEMPLATE_VERSION_AVAILABLE
  PIPELINE_IS_NOTEBOOK
}

extend type WorkspacePermissions {
  createPipeline: Boolean!  # Indicates if a pipeline can be created in the workspace.
}

"""
Represents a page of pipeline versions.
"""
type PipelineVersionPage {
  items: [PipelineVersion!]!  # The list of pipeline versions on the current page.
  pageNumber: Int!  # The current page number.
  totalPages: Int!  # The total number of pages.
  totalItems: Int!  # The total number of pipeline versions.
}

"""
Represents the notification level for a pipeline recipient.
"""
enum PipelineNotificationLevel {
  ALL
  ERROR
}


"""
Represents a recipient of a pipeline.
"""
type PipelineRecipient {
  id: UUID!  # The ID of the recipient.
  user: User!  # The user who is a recipient of the pipeline.
  pipeline: Pipeline!  # The pipeline associated with the recipient.
  notificationLevel: PipelineNotificationLevel!  # The event that triggers the notification.
}

"""
Represents the type of a pipeline.
"""
enum PipelineType {
  zipFile # The pipeline is a ZIP file
  notebook # The pipeline is a Jupyter notebook
}

"""
Represents a pipeline.
"""
type Pipeline {
  id: UUID!  # The ID of the pipeline.
  name: String  # The name of the pipeline.
  code: String!  # The code of the pipeline.
  permissions: PipelinePermissions!  # The permissions for the pipeline.
  workspace: Workspace!  # The workspace associated with the pipeline.
  config: JSON!  # The configuration for the pipeline.
  schedule: String  # The schedule for running the pipeline.
  description: String  # The description of the pipeline.
  createdAt: DateTime!  # The timestamp when the pipeline was created.
  updatedAt: DateTime  # The timestamp when the pipeline was last updated.
  currentVersion: PipelineVersion  # The current version of the pipeline.
  runs(page: Int, perPage: Int, orderBy: PipelineRunOrderBy): PipelineRunPage!  # Retrieves the pipeline runs associated with the pipeline.
  versions(page: Int, perPage: Int): PipelineVersionPage!  # Retrieves the pipeline versions associated with the pipeline.
  recipients: [PipelineRecipient!]!  # The recipients of the pipeline.
  webhookEnabled: Boolean!  # Indicates if the webhook is enabled for the pipeline.
  webhookUrl: String  # The URL of the webhook for the pipeline.
  type: PipelineType!  # The type of the pipeline.
  notebookPath: String  # The path to the notebook file for the pipeline (only filled if the pipeline is a notebook).
  template: PipelineTemplate  # The template associated with the pipeline.
  sourceTemplate: PipelineTemplate  # The source template associated with the pipeline.
  hasNewTemplateVersions: Boolean!  # Indicates if there are new template versions available for the pipeline.
  newTemplateVersions: [PipelineTemplateVersion!]!  # The new template versions available for the pipeline.
}

"""
Represents a page of pipelines.
"""
type PipelinesPage {
  items: [Pipeline!]!  # The list of pipelines on the current page.
  pageNumber: Int!  # The current page number.
  totalPages: Int!  # The total number of pages.
  totalItems: Int!  # The total number of pipelines.
}

enum PipelineError {
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  PIPELINE_DOES_NOT_SUPPORT_PARAMETERS
  WORKSPACE_NOT_FOUND
  INVALID_CONFIG
  PIPELINE_ALREADY_COMPLETED
  PIPELINE_ALREADY_STOPPED
  INVALID_TIMEOUT_VALUE
  PERMISSION_DENIED
  FILE_NOT_FOUND
  TABLE_NOT_FOUND
  CANNOT_UPDATE_NOTEBOOK_PIPELINE
  DUPLICATE_PIPELINE_VERSION_NAME
}

"""
Represents the input for creating a pipeline.
"""
input CreatePipelineInput {
  code: String @deprecated(reason: "The code will be autogenerated")  # The code of the pipeline
  name: String!  # The name of the pipeline.
  workspaceSlug: String!  # The slug of the workspace where the pipeline will be created.
  notebookPath: String  # The path to the notebook file for the pipeline.
}

"""
Represents the result of creating a pipeline.
"""
type CreatePipelineResult {
  success: Boolean!  # Indicates if the pipeline was created successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the creation of the pipeline.
  pipeline: Pipeline  # The created pipeline.
}



enum PipelineRecipientError {
  PIPELINE_NOT_FOUND
  USER_NOT_FOUND
  RECIPIENT_NOT_FOUND
  PERMISSION_DENIED
  ALREADY_EXISTS
}

"""
Represents the input for adding a recipient to a pipeline.
"""
input CreatePipelineRecipientInput {
  pipelineId: UUID!
  userId: UUID!
  notificationLevel: PipelineNotificationLevel!
}

"""
Represents the input for updating a recipient.
"""
input UpdatePipelineRecipientInput {
  recipientId: UUID!
  notificationLevel: PipelineNotificationLevel!
}
"""
Represents the input for deleting a pipeline recipient.
"""
input DeletePipelineRecipientInput {
  recipientId: UUID!
}

"""
Represents the input for upgrading a pipeline version from the latest template version.
"""
input UpgradePipelineVersionFromTemplateInput {
  pipelineId: UUID!
}

"""
Represents the result of upgrading a pipeline version from the latest template version.
"""
type UpgradePipelineVersionFromTemplateResult {
  success: Boolean!  # Indicates if the pipeline version was upgraded successfully.
  errors: [UpgradePipelineVersionFromTemplateError!]!  # The list of errors that occurred during the upgrade of the pipeline version.
  pipelineVersion: PipelineVersion  # The upgraded pipeline version.
}

"""
Enum representing the possible errors that can occur when upgrading a pipeline version from the latest template version.
"""
enum UpgradePipelineVersionFromTemplateError {
  PIPELINE_NOT_FOUND
  PIPELINE_NOT_FROM_TEMPLATE
  NO_NEW_TEMPLATE_VERSION_AVAILABLE
}

"""
Represents the input for updating a pipeline.
"""
input UpdatePipelineInput {
  id: UUID!  # The ID of the pipeline to update.
  name: String  # The new name of the pipeline.
  config: JSON  # The new configuration for the pipeline.
  schedule: String  # The new schedule for running the pipeline.
  description: String  # The new description of the pipeline.
  webhookEnabled: Boolean  # Indicates if the webhook should be enabled for the pipeline.
}

"""
Enum representing the possible errors that can occur when updating a pipeline.
"""
enum UpdatePipelineError {
  NOT_FOUND
  PERMISSION_DENIED
  INVALID_CONFIG
  MISSING_VERSION_CONFIG
}

"""
Represents the result of updating a pipeline.
"""
type UpdatePipelineResult {
  success: Boolean!  # Indicates if the pipeline was updated successfully.
  errors: [UpdatePipelineError!]!  # The list of errors that occurred during the update of the pipeline.
  pipeline: Pipeline  # The updated pipeline.
}

"""
Represents the input for deleting a pipeline.
"""
input DeletePipelineInput {
  id: UUID!  # The ID of the pipeline to delete.
}

"""
Represents the result of deleting a pipeline.
"""
type DeletePipelineResult {
  success: Boolean!  # Indicates if the pipeline was deleted successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the deletion of the pipeline.
}

"""
Represents the input for running a pipeline.
"""
input RunPipelineInput {
  id: UUID!  # The ID of the pipeline to run.
  versionId: UUID  # The ID of the pipeline version to use for the run.
  config: JSON!  # The configuration for the pipeline run.
  sendMailNotifications: Boolean  # Indicates if email notifications should be sent for the pipeline run.
  enableDebugLogs: Boolean  # Indicates if debug logs should be stored for the pipeline run.
}

"""
Represents the result of running a pipeline.
"""
type RunPipelineResult {
  success: Boolean!  # Indicates if the pipeline was run successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the run of the pipeline.
  run: PipelineRun  # The created pipeline run.
}

"""
Represents the input for stopping a pipeline.
"""
input StopPipelineInput {
  runId: UUID!  # The ID of the pipeline run to stop.
}

"""
Represents the result of stopping a pipeline.
"""
type StopPipelineResult {
  success: Boolean!  # Indicates if the pipeline was stopped successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the stopping of the pipeline.
}

"""
Represents the input for retrieving a pipeline token.
"""
input PipelineTokenInput {
  workspaceSlug: String!  # The slug of the workspace where the pipeline is located.
  pipelineCode: String!  # The code of the pipeline.
}

"""
Represents the result of retrieving a pipeline token.
"""
type PipelineTokenResult {
  success: Boolean!  # Indicates if the pipeline token was retrieved successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the retrieval of the pipeline token.
  token: String  # The pipeline token.
}

"""
Represents the input for uploading a pipeline.
"""
input UploadPipelineInput {
  workspaceSlug: String!  # The slug of the workspace where the pipeline will be uploaded.
  code: String @deprecated(reason: "Use 'pipelineCode' field instead")  # The code of the pipeline (deprecated).
  pipelineCode: String  # The code of the pipeline.
  name: String  # The name of the pipeline version.
  description: String  # The description of the pipeline.
  externalLink: URL  # The external link associated with the pipeline.
  parameters: [ParameterInput!]!  # The parameters of the pipeline.
  zipfile: String!  # The path to the ZIP file containing the pipeline.
  config: JSON # The default configuration to set on newly created pipeline runs
  timeout: Int  # The timeout value for the pipeline.
}

type AddPipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
  recipient: PipelineRecipient
}

type UpdatePipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
  recipient: PipelineRecipient
}

type DeletePipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
}

"""
Represents the result of uploading a pipeline.
"""
type UploadPipelineResult {
  success: Boolean!  # Indicates if the pipeline was uploaded successfully.
  pipelineVersion: PipelineVersion  # The uploaded pipeline version.
  errors: [PipelineError!]!  # The list of errors that occurred during the upload of the pipeline.
}

"""
Represents the input for logging a pipeline message.
"""
input LogPipelineMessageInput {
  priority: MessagePriority!  # The priority level of the message.
  message: String!  # The message content.
}

"""
Represents the result of logging a pipeline message.
"""
type LogPipelineMessageResult {
  success: Boolean!  # Indicates if the pipeline message was logged successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the logging of the pipeline message.
}

"""
Represents the input for updating the progress of a pipeline.
"""
input UpdatePipelineProgressInput {
  percent: Int!  # The progress of the pipeline as a percentage.
}

"""
Represents the result of updating the progress of a pipeline.
"""
type UpdatePipelineProgressResult {
  success: Boolean!  # Indicates if the pipeline progress was updated successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the update of the pipeline progress.
}

"""
Represents the input for adding an output to a pipeline.
"""
input AddPipelineOutputInput {
  uri: String!  # The URI of the output.
  type: String!  # The type of the output.
  name: String  # The name of the output.
}

"""
Represents the result of adding an output to a pipeline.
"""
type AddPipelineOutputResult {
  success: Boolean!  # Indicates if the output was added to the pipeline successfully.
  errors: [PipelineError!]!  # The list of errors that occurred during the addition of the output to the pipeline.
}

"""
Represents the input for deleting a pipeline version.
"""
input DeletePipelineVersionInput {
  id: UUID!  # The ID of the pipeline version to delete.
}

enum GeneratePipelineWebhookUrlError {
  PIPELINE_NOT_FOUND
  WEBHOOK_NOT_ENABLED
  PERMISSION_DENIED
}

input GeneratePipelineWebhookUrlInput {
  id: UUID!
}

type GeneratePipelineWebhookUrlResult {
  success: Boolean!
  errors: [GeneratePipelineWebhookUrlError!]!
  pipeline: Pipeline
}

enum DeletePipelineVersionError {
  PIPELINE_VERSION_NOT_FOUND
  PERMISSION_DENIED
  PIPELINE_NOT_FOUND
}

"""
Represents the result of deleting a pipeline version.
"""
type DeletePipelineVersionResult {
  success: Boolean!  # Indicates if the pipeline version was deleted successfully.
  errors: [DeletePipelineVersionError!]!  # The list of errors that occurred during the deletion of the pipeline version.
}

"""
Represents the input for updating a pipeline version.
"""
input UpdatePipelineVersionInput {
  id: UUID!  # The ID of the pipeline version to update.
  name: String  # The new name of the pipeline version.
  description: String  # The new description of the pipeline version.
  externalLink: URL  # The new external link associated with the pipeline version.
  config: JSON  # The default configuration to set on newly created pipeline runs
}

"""
Enum representing the possible errors that can occur when updating a pipeline version.
"""
enum UpdatePipelineVersionError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""
Represents the result of updating a pipeline version.
"""
type UpdatePipelineVersionResult {
  success: Boolean!  # Indicates if the pipeline version was updated successfully.
  errors: [UpdatePipelineVersionError!]!  # The list of errors that occurred during the update of the pipeline version.
  pipelineVersion: PipelineVersion  # The updated pipeline version.
}

extend type Query {
  """
  Retrieves a page of pipelines ordered by relevant name.
  """
  pipelines(workspaceSlug: String, name: String, page: Int, perPage: Int): PipelinesPage! @loginRequired

  """
  Retrieves a pipeline by ID.
  """
  pipeline(id: UUID!): Pipeline @loginRequired

  """
  Retrieves a pipeline version by ID.
  """
  pipelineVersion(id: UUID!): PipelineVersion @loginRequired

  """
  Retrieves a pipeline by workspace slug and code.
  """
  pipelineByCode(workspaceSlug: String!, code: String!): Pipeline @loginRequired

  """
  Retrieves a pipeline run by ID.
  """
  pipelineRun(id: UUID!): PipelineRun @loginRequired
}

extend type Mutation {
  """
  Creates a new pipeline.
  """
  createPipeline(input: CreatePipelineInput!): CreatePipelineResult! @loginRequired

  """
  Updates an existing pipeline.
  """
  updatePipeline(input: UpdatePipelineInput!): UpdatePipelineResult! @loginRequired

  """
  Deletes a pipeline.
  """
  deletePipeline(input: DeletePipelineInput): DeletePipelineResult! @loginRequired

  """
  Runs a pipeline.
  """
  runPipeline(input: RunPipelineInput): RunPipelineResult! @loginRequired

  """
  Stops a pipeline.
  """
  stopPipeline(input: StopPipelineInput!): StopPipelineResult! @loginRequired

  """
  Retrieves a token for a pipeline.
  """
  pipelineToken(input: PipelineTokenInput!): PipelineTokenResult!

  """
  Uploads a pipeline.
  """
  uploadPipeline(input: UploadPipelineInput!): UploadPipelineResult!

  """
  Updates a pipeline version.
  """
  updatePipelineVersion(input: UpdatePipelineVersionInput!): UpdatePipelineVersionResult!

  """
  Logs a message for a pipeline.
  """
  logPipelineMessage(input: LogPipelineMessageInput!): LogPipelineMessageResult!

  """
  Updates the progress of a pipeline.
  """
  updatePipelineProgress(input: UpdatePipelineProgressInput!): UpdatePipelineProgressResult!

  """
  Adds an output to a pipeline.
  """
  addPipelineOutput(input: AddPipelineOutputInput!): AddPipelineOutputResult!

  """
  Deletes a pipeline version.
  """
  deletePipelineVersion(input: DeletePipelineVersionInput!): DeletePipelineVersionResult!

  """
  Generates a webhook URL for a pipeline.
  """
  generatePipelineWebhookUrl(input: GeneratePipelineWebhookUrlInput!): GeneratePipelineWebhookUrlResult!

  """
  Adds a recipient to a pipeline.
  """
  addPipelineRecipient(input: CreatePipelineRecipientInput!): AddPipelineRecipientResult! 
  """
  Updates a pipeline recipient.
  """
  updatePipelineRecipient(input: UpdatePipelineRecipientInput!): UpdatePipelineRecipientResult!
  
  """
  Deletes a pipeline recipient.
  """
  deletePipelineRecipient(input: DeletePipelineRecipientInput!): DeletePipelineRecipientResult!

  """
    Upgrades a pipeline version using the latest template version.
  """
  upgradePipelineVersionFromTemplate(input: UpgradePipelineVersionFromTemplateInput!): UpgradePipelineVersionFromTemplateResult!
}
