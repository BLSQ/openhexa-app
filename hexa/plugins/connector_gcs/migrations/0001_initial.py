# Generated by Django 4.0.4 on 2022-05-17 09:13

import uuid

import django.db.models.deletion
import django.db.models.expressions
from django.conf import settings
from django.db import migrations, models

import hexa.catalog.models
import hexa.core.models.cryptography


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("user_management", "0011_unique_fine_tuning"),
    ]

    operations = [
        migrations.CreateModel(
            name="Credentials",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("service_account", models.CharField(max_length=30)),
                ("project_id", models.CharField(max_length=30)),
                ("client_id", models.CharField(max_length=30)),
                ("client_email", models.CharField(max_length=100)),
                ("client_x509_cert_url", models.CharField(max_length=150)),
                (
                    "auth_uri",
                    models.CharField(
                        default="https://accounts.google.com/o/oauth2/auth",
                        max_length=100,
                    ),
                ),
                (
                    "token_uri",
                    models.CharField(
                        default="https://oauth2.googleapis.com/token", max_length=100
                    ),
                ),
                (
                    "auth_provider_x509_cert_url",
                    models.CharField(
                        default="https://www.googleapis.com/oauth2/v1/certs",
                        max_length=100,
                    ),
                ),
                (
                    "private_key_id",
                    hexa.core.models.cryptography.EncryptedTextField(max_length=50),
                ),
                ("private_key", hexa.core.models.cryptography.EncryptedTextField()),
            ],
            options={
                "verbose_name": "GCS Credentials",
                "verbose_name_plural": "GCS Credentials",
                "ordering": ("service_account",),
            },
        ),
        migrations.CreateModel(
            name="Bucket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("auto_sync", models.BooleanField(default=True)),
                ("last_synced_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("public", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "GCS Bucket",
                "ordering": ("name",),
            },
            bases=(hexa.catalog.models.IndexableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="GCSBucketPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("OWNER", "Owner"),
                            ("EDITOR", "Editor"),
                            ("VIEWER", "Viewer"),
                        ],
                        default="EDITOR",
                        max_length=200,
                    ),
                ),
                (
                    "bucket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="connector_gcs.bucket",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_management.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="gcsbucketpermission",
            constraint=models.UniqueConstraint(
                django.db.models.expressions.F("team"),
                django.db.models.expressions.F("bucket"),
                condition=models.Q(("team__isnull", False)),
                name="gcs_bucket_unique_team",
            ),
        ),
        migrations.AddConstraint(
            model_name="gcsbucketpermission",
            constraint=models.UniqueConstraint(
                django.db.models.expressions.F("user"),
                django.db.models.expressions.F("bucket"),
                condition=models.Q(("user__isnull", False)),
                name="gcs_bucket_unique_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="gcsbucketpermission",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("team__isnull", False), ("user__isnull", False), _connector="OR"
                ),
                name="gcs_bucket_permission_user_or_team_not_null",
            ),
        ),
        migrations.AlterModelOptions(
            name="gcsbucketpermission",
            options={"verbose_name": "Bucket Permission"},
        ),
    ]
