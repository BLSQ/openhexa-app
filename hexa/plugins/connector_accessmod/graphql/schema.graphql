# Projects
type AccessmodProject {
    id: String!
    name: String!
    spatialResolution: Int!
    country: Country!
    owner: User!
    createdAt: DateTime!
    updatedAt: DateTime!
}
type AccessmodProjectPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodProject!]!
}
input CreateAccessmodProjectInput {
    name: String!
    spatialResolution: Int!
    country: CountryInput!
}
type CreateAccessmodProjectResult {
    success: Boolean!
    project: AccessmodProject
}
input UpdateAccessmodProjectInput {
    id: String!
    name: String
    spatialResolution: Int
    country: CountryInput
}
type UpdateAccessmodProjectResult {
    success: Boolean!
    project: AccessmodProject
}
input DeleteAccessmodProjectInput {
    id: String!
}
type DeleteAccessmodProjectResult {
    success: Boolean!
}
extend type Query {
    accessmodProject(id: String): AccessmodProject
    accessmodProjects(page: Int, perPage: Int): AccessmodProjectPage!
}
extend type Mutation {
    createAccessmodProject(input: CreateAccessmodProjectInput): CreateAccessmodProjectResult
    updateAccessmodProject(input: UpdateAccessmodProjectInput): UpdateAccessmodProjectResult
    deleteAccessmodProject(input: DeleteAccessmodProjectInput): DeleteAccessmodProjectResult
}

# Filesets
type AccessmodFileset {
    id: String!
    name: String!
    role: AccessmodFilesetRole
    owner: User!
    files: [AccessmodFile]!
    createdAt: DateTime!
    updatedAt: DateTime!
}
type AccessmodFilesetPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodFileset!]!
}
type AccessmodFilesetRole {
    id: String!
    code: AccessmodFilesetRoleCode!
    name: String!
    format: AccessmodFilesetFormat!
    createdAt: DateTime!
    updatedAt: DateTime!
}
enum AccessmodFilesetRoleCode {
    LAND_COVER
    DEM
    TRANSPORT_NETWORK
    SLOPE
    WATER
    BARRIER
    MOVING_SPEEDS
    HEALTH_FACILITIES
}
enum AccessmodFilesetFormat {
    VECTOR
    RASTER
    TABULAR
}
type AccessmodFile {
    id: String!
    uri: String!
    fileset: AccessmodFileset
    mimeType: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}
input CreateAccessmodFilesetInput {
    name: String!
    projectId: String!
    roleId: String!
}
type CreateAccessmodFilesetResult {
    success: Boolean!
    fileset: AccessmodFileset
}
input PrepareAccessmodFileUploadInput {
    filesetId: String!
    mimeType: String!
}
type PrepareAccessmodFileUploadResult {
    success: Boolean!
    uploadUrl: String
    fileUri: String
}
input CreateAccessmodFileInput {
    filesetId: String!
    uri: String!
    mimeType: String!
}
type CreateAccessmodFileResult {
    success: Boolean!
    file: AccessmodFile
}
input DeleteAccessmodFilesetInput {
    id: String!
}
type DeleteAccessmodFilesetResult {
    success: Boolean!
}
input DeleteAccessmodFileInput {
    id: String!
}
type DeleteAccessmodFileResult {
    success: Boolean!
}
extend type Query {
    accessmodFileset(id: String): AccessmodFileset
    accessmodFilesets(projectId: String!, roleId: String, term: String, page: Int, perPage: Int): AccessmodFilesetPage!
    accessmodFilesetRole(id: String!): AccessmodFilesetRole
    accessmodFilesetRoles: [AccessmodFilesetRole!]!
}
extend type Mutation {
    createAccessmodFileset(input: CreateAccessmodFilesetInput): CreateAccessmodFilesetResult
    deleteAccessmodFileset(input: DeleteAccessmodFilesetInput): DeleteAccessmodFilesetResult
    prepareAccessmodFileUpload(input: PrepareAccessmodFileUploadInput): PrepareAccessmodFileUploadResult
    createAccessmodFile(input: CreateAccessmodFileInput): CreateAccessmodFileResult
    deleteAccessmodFile(input: DeleteAccessmodFileInput): DeleteAccessmodFileResult
}

# Analysis
enum AccessmodAnalysisStatus {
    PENDING
    READY
    QUEUED
    RUNNING
    SUCCESS
    FAILED
}
interface AccessmodAnalysis {
    id: String!
    status: AccessmodAnalysisStatus!
    name: String!
}
type AccessmodAccessibilityAnalysis implements AccessmodAnalysis {
    id: String!
    status: AccessmodAnalysisStatus!
    name: String!
    extent: String!
    landCover: String!
    dem: String!
    transportNetwork: String!
    slope: String!
    water: String!
    barrier: String!
    movingSpeeds: String!
    healthFacilities: String!
    anisotropic: Boolean!
    maxTravelTime: Int!
}
type AccessmodAnalysisPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodAnalysis!]!
}
input CreateAccessmodAccessibilityAnalysisInput {
    name: String!
}
type CreateAccessmodAccessibilityAnalysisResult {
    success: Boolean!
    analysis: AccessmodAccessibilityAnalysis!
}
input UpdateAccessmodAccessibilityAnalysisInput {
    name: String
    extent: String
    landCover: String
    dem: String
    transportNetwork: String
    slope: String
    water: String
    barrier: String
    movingSpeeds: String
    healthFacilities: String
    anisotropic: Boolean
    maxTravelTime: Int
}
type UpdateAccessmodAccessibilityAnalysisResult {
    success: Boolean!
    analysis: AccessmodAccessibilityAnalysis!
}
extend type Query {
    accessmodAnalysis(id: String): AccessmodAnalysis
    accessmodAnalyses(projectId: String!, roleId: String, term: String, page: Int, perPage: Int): AccessmodAnalysisPage!
}
extend type Mutation {
    createAccessmodAccessibilityAnalysis(input: CreateAccessmodAccessibilityAnalysisInput): CreateAccessmodAccessibilityAnalysisResult
    updateAccessmodAccessibilityAnalysis(input: UpdateAccessmodAccessibilityAnalysisInput): UpdateAccessmodAccessibilityAnalysisResult
}