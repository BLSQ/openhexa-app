
type DAGRunMessage {
  message: String!
  priority: String!
  timestamp: DateTime
}

enum DAGRunTrigger {
  SCHEDULED
  MANUAL
}

type DAGRunOutput {
  title: String!
  uri: String!
}

type DAGRun {
  id: String!
  label: String
  externalId: String
  externalUrl: URL
  user: User
  config: JSON
  status: DAGRunStatus!
  executionDate: DateTime
  lastRefreshedAt: DateTime
  duration: Int
  progress: Int!
  triggerMode: DAGRunTrigger
  messages: [DAGRunMessage!]!
  logs: String
  outputs: [DAGRunOutput!]!
  isFavorite: Boolean!
}

enum DAGRunStatus {
  success
  running
  failed
  queued
}

enum DAGRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

type DAGRunPage {
  items: [DAGRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type DAGTemplate {
  code: String!
  description: String
  sampleConfig: JSON
}

type DAG {
  id: String!
  label: String!
  tags: [Tag!]!
  formCode: String
  countries: [Country!]!
  externalId: String!
  description: String
  user: User
  template: DAGTemplate!
  schedule: String
  externalUrl: URL
  runs(page: Int, perPage: Int, orderBy: DAGRunOrderBy): DAGRunPage!
}

type DAGPage {
  items: [DAG!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

extend type Query {
  dags(page: Int, perPage: Int): DAGPage!
  dag(id: UUID!): DAG
  dagRun(id: UUID!): DAGRun
}

enum RunDAGError {
  DAG_NOT_FOUND
  INVALID_CONFIG
}

type RunDAGResult {
  success: Boolean!
  errors: [RunDAGError!]!
  dagRun: DAGRun
  dag: DAG
}

input RunDAGInput {
  dagId: String!
  config: JSON!
}

input UpdateDAGInput {
  id: String!
  label: String
  description: String
  schedule: String
  countries: [CountryInput!]
}

enum UpdateDAGError {
  NOT_FOUND
  INVALID
}

type UpdateDAGResult {
  success: Boolean!
  errors: [UpdateDAGError!]!
  dag: DAG
}

input PrepareDownloadURLInput {
  uri: URL!
}

type PrepareDownloadURLResult {
  success: Boolean!
  url: URL
}

enum SetDAGRunFavoriteError {
  NOT_FOUND
  INVALID
  MISSING_LABEL
}

input SetDAGRunFavoriteInput {
  id: String!
  label: String
  isFavorite: Boolean!
}

type SetDAGRunFavoriteResult {
  success: Boolean!
  errors: [SetDAGRunFavoriteError!]!
  dagRun: DAGRun
}

extend type Mutation {
  runDAG(input: RunDAGInput!): RunDAGResult!
  updateDAG(input: UpdateDAGInput!): UpdateDAGResult!
  prepareDownloadURL(input: PrepareDownloadURLInput!): PrepareDownloadURLResult
  setDAGRunFavorite(input: SetDAGRunFavoriteInput!): SetDAGRunFavoriteResult
}