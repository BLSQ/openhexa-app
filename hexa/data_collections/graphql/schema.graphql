# Collections
type Collection {
    id: UUID!
    name: String!
    author: User
    countries: [Country!]!
    tags: [Tag!]!
    description: String
    summary: String
    elements (page: Int, perPage: Int): CollectionElementPage!
    authorizedActions: CollectionAuthorizedActions! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
    permissions: CollectionPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
}
type CollectionPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [Collection!]!
}

# FIXME: To remove once authorizedActions are completely deprecated
type CollectionAuthorizedActions {
    canUpdate: Boolean!
    canDelete: Boolean!
}

type CollectionPermissions {
    update: Boolean!
    delete: Boolean!
}

input CreateCollectionInput {
    name: String!
    authorId: String
    countries: [CountryInput!]
    tagIds: [String!]
    summary: String
    description: String
}
type CreateCollectionResult {
    success: Boolean!
    errors: [CreateCollectionError!]!
    collection: Collection
}
enum CreateCollectionError {
    INVALID
}
input UpdateCollectionInput {
    id: UUID!
    name: String
    summary: String
    authorId: String
    countries: [CountryInput!]
    tagIds: [String!]
    description: String
}
type UpdateCollectionResult {
    success: Boolean!
    errors: [CreateCollectionError!]!
    collection: Collection
}
enum UpdateCollectionError {
    NOT_FOUND
    INVALID
}
input DeleteCollectionInput {
    id: UUID!
}
type DeleteCollectionResult {
    success: Boolean!
    errors: [DeleteCollectionError!]!
}
enum DeleteCollectionError {
    INVALID
}
extend type Query {
    collection(id: UUID!): Collection @loginRequired
    collections(page: Int, perPage: Int): CollectionPage! @loginRequired
}

extend union SearchResultObject = Collection

extend type Mutation {
    createCollection(input: CreateCollectionInput!): CreateCollectionResult! @loginRequired
    updateCollection(input: UpdateCollectionInput!): UpdateCollectionResult! @loginRequired
    deleteCollection(input: DeleteCollectionInput!): DeleteCollectionResult! @loginRequired
    createCollectionElement(input: CreateCollectionElementInput!): CreateCollectionElementResult! @loginRequired
    deleteCollectionElement(input: DeleteCollectionElementInput!): DeleteCollectionElementResult! @loginRequired
}

input CreateCollectionElementInput {
    collectionId: UUID!
    app: String!
    model: String!
    objectId: String!
}
type CreateCollectionElementResult {
    success: Boolean!
    errors: [CreateCollectionElementError!]!
    element: CollectionElement
}
enum CreateCollectionElementError {
    COLLECTION_NOT_FOUND
    OBJECT_NOT_FOUND
    INVALID
}

input DeleteCollectionElementInput {
    id: UUID!
}
type DeleteCollectionElementResult {
    success: Boolean!
    errors: [DeleteCollectionElementError!]!
    collection: Collection
}
enum DeleteCollectionElementError {
    NOT_FOUND
    INVALID
}


# Collection items
type CollectionElement {
    id: UUID!
    app: String!
    model: String!
    type: String!
    name: String!
    objectId: String!
    url: URL
    createdAt: DateTime!
    updatedAt: DateTime!
}

type CollectionElementPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [CollectionElement!]!
}

# App-specific permissions
extend type MePermissions {
    createCollection: Boolean!
}
