directive @loginRequired(withoutTwoFactor: Boolean) on FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AccessmodAccessibilityAnalysis implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  landCover: AccessmodFileset
  dem: AccessmodFileset
  transportNetwork: AccessmodFileset
  water: AccessmodFileset
  barrier: AccessmodFileset
  stack: AccessmodFileset
  stackPriorities: StackPriorities
  movingSpeeds: MovingSpeeds
  healthFacilities: AccessmodFileset
  invertDirection: Boolean
  maxTravelTime: Int
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
  travelTimes: AccessmodFileset
  frictionSurface: AccessmodFileset
}

enum AccessmodAccessibilityAnalysisAlgorithm {
  ANISOTROPIC
  ISOTROPIC
}

type AccessmodAccessRequest {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  acceptedTos: Boolean!
  status: AccessmodAccessRequestStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodAccessRequestPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodAccessRequest!]!
}

enum AccessmodAccessRequestStatus {
  PENDING
  APPROVED
  DENIED
}

interface AccessmodAnalysis {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodAnalysisAuthorizedActions {
  UPDATE
  DELETE
  RUN
}

type AccessmodAnalysisPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodAnalysis!]!
}

type AccessmodAnalysisPermissions {
  update: Boolean!
  delete: Boolean!
  run: Boolean!
}

enum AccessmodAnalysisStatus {
  DRAFT
  READY
  QUEUED
  RUNNING
  SUCCESS
  FAILED
}

enum AccessmodAnalysisType {
  ACCESSIBILITY
  GEOGRAPHIC_COVERAGE
  ZONAL_STATISTICS
}

type AccessmodFile {
  id: String!
  uri: String!
  name: String!
  fileset: AccessmodFileset
  mimeType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodFileset implements AccessmodOwnership {
  id: String!
  name: String!
  mode: AccessmodFilesetMode!
  status: AccessmodFilesetStatus!
  role: AccessmodFilesetRole!
  author: User!
  owner: AccessmodOwner
  files: [AccessmodFile!]!
  metadata: AccessmodFilesetMetadata!
  authorizedActions: [AccessmodFilesetAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodFilesetPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetAuthorizedActions {
  UPDATE
  DELETE
  CREATE_FILE
}

enum AccessmodFilesetFormat {
  VECTOR
  RASTER
  TABULAR
}

scalar AccessmodFilesetMetadata

enum AccessmodFilesetMode {
  USER_INPUT
  AUTOMATIC_ACQUISITION
}

type AccessmodFilesetPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodFileset!]!
}

type AccessmodFilesetPermissions {
  update: Boolean!
  delete: Boolean!
  createFile: Boolean!
}

type AccessmodFilesetRole {
  id: String!
  code: AccessmodFilesetRoleCode!
  name: String!
  format: AccessmodFilesetFormat!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetRoleCode {
  BARRIER
  COVERAGE
  DEM
  FRICTION_SURFACE
  GEOMETRY
  HEALTH_FACILITIES
  LAND_COVER
  POPULATION
  TRANSPORT_NETWORK
  TRAVEL_TIMES
  WATER
  STACK
  BOUNDARIES
  ZONAL_STATISTICS
  ZONAL_STATISTICS_TABLE
}

enum AccessmodFilesetStatus {
  PENDING
  VALIDATING
  VALID
  INVALID
  TO_ACQUIRE
}

type AccessmodGeographicCoverageAnalysis implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  population: AccessmodFileset
  frictionSurface: AccessmodFileset
  dem: AccessmodFileset
  healthFacilities: AccessmodFileset
  anisotropic: Boolean
  maxTravelTime: Int
  hfProcessingOrder: String
  geographicCoverage: AccessmodFileset
  catchmentAreas: AccessmodFileset
}

union AccessmodOwner = User | Team

interface AccessmodOwnership {
  owner: AccessmodOwner
}

type AccessmodProject implements AccessmodOwnership {
  id: String!
  name: String!
  spatialResolution: Int!
  description: String!
  crs: Int!
  country: Country!
  author: User!
  owner: AccessmodOwner
  extent: [[Float!]!]
  dem: AccessmodFileset
  authorizedActions: [AccessmodProjectAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodProjectPermissions!
  members: [AccessmodProjectMember!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodProjectAuthorizedActions {
  UPDATE
  DELETE
  CREATE_FILESET
  CREATE_ANALYSIS
  CREATE_PERMISSION
}

type AccessmodProjectMember {
  id: String!
  user: User
  team: Team
  project: AccessmodProject!
  mode: PermissionMode!
  authorizedActions: [AccessmodProjectPermissionAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodProjectMemberPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodProjectMemberPermissions {
  update: Boolean!
  delete: Boolean!
}

enum AccessmodProjectOrder {
  UPDATED_AT_DESC
  UPDATED_AT_ASC
  NAME_DESC
  NAME_ASC
}

type AccessmodProjectPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodProject!]!
}

enum AccessmodProjectPermissionAuthorizedActions {
  UPDATE
  DELETE
}

type AccessmodProjectPermissions {
  update: Boolean!
  delete: Boolean!
  createFileset: Boolean!
  createAnalysis: Boolean!
  createMember: Boolean!
  createPermission: Boolean!
}

type AccessmodZonalStatistics implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  population: AccessmodFileset
  travelTimes: AccessmodFileset
  boundaries: AccessmodFileset
  timeThresholds: TimeThresholds
  zonalStatisticsTable: AccessmodFileset
  zonalStatisticsGeo: AccessmodFileset
}

type Activity {
  description: String!
  occurredAt: DateTime!
  url: URL!
  status: ActivityStatus!
}

enum ActivityStatus {
  SUCCESS
  PENDING
  RUNNING
  ERROR
  UNKNOWN
}

input AddPipelineOutputInput {
  output_type: String!
  output_uri: String!
}

type AddPipelineOutputResult {
  success: Boolean!
  errors: [PipelineError!]!
}

enum ApproveAccessmodAccessRequestError {
  INVALID
}

input ApproveAccessmodAccessRequestInput {
  id: String!
}

type ApproveAccessmodAccessRequestResult {
  success: Boolean!
  errors: [ApproveAccessmodAccessRequestError!]!
}

type Avatar {
  initials: String!
  color: String!
}

type CatalogEntry {
  id: String!
  name: String!
  description: String
  countries: [Country!]!
  lastSyncedAt: DateTime
  symbol: URL
  externalId: String
  externalType: String
  externalSubtype: String
  externalName: String
  externalDescription: String
  type: CatalogEntryType!
  objectId: String!
  objectUrl: URL!
  datasource: Datasource
}

type CatalogEntryType {
  id: String!
  app: String!
  model: String!
  name: String!
}

type CatalogPage {
  items: [CatalogEntry!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type Collection {
  id: String!
  name: String!
  author: User
  countries: [Country!]!
  tags: [Tag!]!
  description: String
  summary: String
  elements(page: Int, perPage: Int): CollectionElementPage!
  authorizedActions: CollectionAuthorizedActions! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: CollectionPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CollectionAuthorizedActions {
  canUpdate: Boolean!
  canDelete: Boolean!
}

type CollectionElement {
  id: String!
  app: String!
  model: String!
  type: String!
  name: String!
  objectId: String!
  url: URL
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CollectionElementPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [CollectionElement!]!
}

type CollectionPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Collection!]!
}

type CollectionPermissions {
  update: Boolean!
  delete: Boolean!
}

type Country {
  code: String!
  alpha3: String!
  name: String!
  flag: String!
  whoInfo: WHOInfo!
}

input CountryInput {
  code: String!
  alpha3: String
  name: String
  flag: String
}

enum CreateAccessmodAccessibilityAnalysisError {
  NAME_DUPLICATE
}

input CreateAccessmodAccessibilityAnalysisInput {
  projectId: String!
  name: String!
}

type CreateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [CreateAccessmodAccessibilityAnalysisError!]!
}

enum CreateAccessmodFileError {
  URI_DUPLICATE
}

input CreateAccessmodFileInput {
  filesetId: String!
  uri: String!
  mimeType: String!
}

type CreateAccessmodFileResult {
  success: Boolean!
  file: AccessmodFile
  errors: [CreateAccessmodFileError!]!
}

enum CreateAccessmodFilesetError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodFilesetInput {
  name: String!
  projectId: String!
  roleId: String!
  automatic: Boolean
  metadata: AccessmodFilesetMetadata
}

type CreateAccessmodFilesetResult {
  success: Boolean!
  fileset: AccessmodFileset
  errors: [CreateAccessmodFilesetError!]!
}

enum CreateAccessmodProjectError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodProjectInput {
  name: String!
  description: String
  spatialResolution: Int!
  crs: Int!
  country: CountryInput!
  extent: [[Float!]!]
}

enum CreateAccessmodProjectMemberError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input CreateAccessmodProjectMemberInput {
  userId: String
  teamId: String
  projectId: String!
  mode: PermissionMode!
}

type CreateAccessmodProjectMemberResult {
  success: Boolean!
  member: AccessmodProjectMember
  errors: [CreateAccessmodProjectMemberError!]!
}

type CreateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [CreateAccessmodProjectError!]!
}

enum CreateAccessmodZonalStatisticsError {
  NAME_DUPLICATE
}

input CreateAccessmodZonalStatisticsInput {
  projectId: String!
  name: String!
}

type CreateAccessmodZonalStatisticsResult {
  success: Boolean!
  analysis: AccessmodZonalStatistics
  errors: [CreateAccessmodZonalStatisticsError!]!
}

enum CreateCollectionElementError {
  COLLECTION_NOT_FOUND
  OBJECT_NOT_FOUND
  INVALID
}

input CreateCollectionElementInput {
  collectionId: String!
  app: String!
  model: String!
  objectId: String!
}

type CreateCollectionElementResult {
  success: Boolean!
  errors: [CreateCollectionElementError!]!
  element: CollectionElement
}

enum CreateCollectionError {
  INVALID
}

input CreateCollectionInput {
  name: String!
  authorId: String
  countries: [CountryInput!]
  tagIds: [String!]
  summary: String
  description: String
}

type CreateCollectionResult {
  success: Boolean!
  errors: [CreateCollectionError!]!
  collection: Collection
}

enum CreateMembershipError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  NOT_FOUND
}

input CreateMembershipInput {
  userEmail: String!
  teamId: String!
  role: MembershipRole!
}

type CreateMembershipResult {
  success: Boolean!
  membership: Membership
  errors: [CreateMembershipError!]!
}

input CreatePipelineInput {
  name: String!
  entrypoint: String!
  parameters: JSON!
}

type CreatePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  pipeline: Pipeline
}

enum CreateTeamError {
  PERMISSION_DENIED
  NAME_DUPLICATE
}

input CreateTeamInput {
  name: String!
}

type CreateTeamResult {
  team: Team
  success: Boolean!
  errors: [CreateTeamError!]!
}

enum CreateWorkspaceError {
  PERMISSION_DENIED
}

input CreateWorkspaceInput {
  name: String!
  description: String
  countries: [CountryInput!]
}

type CreateWorkspaceResult {
  success: Boolean!
  errors: [CreateWorkspaceError!]!
  workspace: Workspace
}

type DAG {
  id: String!
  label: String!
  tags: [Tag!]!
  formCode: String
  countries: [Country!]!
  externalId: String!
  description: String
  user: User
  template: DAGTemplate!
  schedule: String
  externalUrl: URL
  runs(page: Int, perPage: Int, orderBy: DAGRunOrderBy): DAGRunPage!
}

type DAGPage {
  items: [DAG!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type DAGRun {
  id: String!
  label: String
  externalId: String
  externalUrl: URL
  user: User
  config: JSON
  status: DAGRunStatus!
  executionDate: DateTime
  lastRefreshedAt: DateTime
  duration: Int
  progress: Int!
  triggerMode: DAGRunTrigger
  messages: [DAGRunMessage!]!
  logs: String
  outputs: [DAGRunOutput!]!
  isFavorite: Boolean!
}

type DAGRunMessage {
  message: String!
  priority: String!
  timestamp: DateTime
}

enum DAGRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

type DAGRunOutput {
  title: String!
  uri: String!
}

type DAGRunPage {
  items: [DAGRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

enum DAGRunStatus {
  success
  running
  failed
  queued
}

enum DAGRunTrigger {
  SCHEDULED
  MANUAL
}

type DAGTemplate {
  code: String!
  description: String
  sampleConfig: JSON
}

type Datasource {
  id: String!
  name: String!
}

scalar Date

scalar DateTime

enum DeleteAccessmodAnalysisError {
  NOT_FOUND
  DELETE_FAILED
}

input DeleteAccessmodAnalysisInput {
  id: String!
}

type DeleteAccessmodAnalysisResult {
  success: Boolean!
  errors: [DeleteAccessmodAnalysisError!]!
}

enum DeleteAccessmodFilesetError {
  NOT_FOUND
  FILESET_IN_USE
}

input DeleteAccessmodFilesetInput {
  id: String!
}

type DeleteAccessmodFilesetResult {
  success: Boolean!
  errors: [DeleteAccessmodFilesetError!]!
}

enum DeleteAccessmodProjectError {
  NOT_FOUND
  PERMISSION_DENIED
}

input DeleteAccessmodProjectInput {
  id: String!
}

enum DeleteAccessmodProjectMemberError {
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input DeleteAccessmodProjectMemberInput {
  id: String!
}

type DeleteAccessmodProjectMemberResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectMemberError!]!
}

type DeleteAccessmodProjectResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectError!]!
}

enum DeleteCollectionElementError {
  NOT_FOUND
  INVALID
}

input DeleteCollectionElementInput {
  id: String!
}

type DeleteCollectionElementResult {
  success: Boolean!
  errors: [DeleteCollectionElementError!]!
  collection: Collection
}

enum DeleteCollectionError {
  INVALID
}

input DeleteCollectionInput {
  id: String!
}

type DeleteCollectionResult {
  success: Boolean!
  errors: [DeleteCollectionError!]!
}

enum DeleteMembershipError {
  PERMISSION_DENIED
  NOT_FOUND
}

input DeleteMembershipInput {
  id: String!
}

type DeleteMembershipResult {
  success: Boolean!
  errors: [DeleteMembershipError!]!
}

input DeletePipelineInput {
  id: String!
}

type DeletePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
}

enum DeleteTeamError {
  NOT_FOUND
  PERMISSION_DENIED
}

input DeleteTeamInput {
  id: String!
}

type DeleteTeamResult {
  success: Boolean!
  errors: [DeleteTeamError!]!
}

enum DeleteWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

input DeleteWorkspaceInput {
  id: String!
}

enum DeleteWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

input DeleteWorkspaceMemberInput {
  membershipId: String!
}

type DeleteWorkspaceMemberResult {
  success: Boolean!
  errors: [DeleteWorkspaceMemberError!]!
}

type DeleteWorkspaceResult {
  success: Boolean!
  errors: [DeleteWorkspaceError!]!
}

enum DenyAccessmodAccessRequestError {
  INVALID
}

input DenyAccessmodAccessRequestInput {
  id: String!
}

type DenyAccessmodAccessRequestResult {
  success: Boolean!
  errors: [DenyAccessmodAccessRequestError!]!
}

type DHIS2DataElement {
  id: String!
  name: String!
  code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  instance: DHIS2Instance!
}

type DHIS2DataElementPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [DHIS2DataElement!]!
}

type DHIS2Instance {
  id: String!
  name: String!
  url: String
}

enum DisableTwoFactorError {
  INVALID_OTP
  NOT_ENABLED
}

input DisableTwoFactorInput {
  token: String!
}

type DisableTwoFactorResult {
  success: Boolean!
  errors: [DisableTwoFactorError!]
}

enum EnableTwoFactorError {
  ALREADY_ENABLED
  EMAIL_MISMATCH
}

input EnableTwoFactorInput {
  email: String
}

type EnableTwoFactorResult {
  success: Boolean!
  errors: [EnableTwoFactorError!]
}

type ExternalDashboard {
  id: String!
  name: String!
  url: URL!
  pictureUrl: URL!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  countries: [Country!]!
  tags: [Tag!]!
}

type ExternalDashboardPage {
  items: [ExternalDashboard!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type FeatureFlag {
  code: String!
  config: JSON!
}

enum GenerateChallengeError {
  DEVICE_NOT_FOUND
  CHALLENGE_ERROR
}

type GenerateChallengeResult {
  success: Boolean!
  errors: [GenerateChallengeError!]
}

input InviteWorkspaceMemberInput {
  workspaceId: String!
  userEmail: String!
  role: WorkspaceMembershipRole!
}

type InviteWorkspaceMemberResult {
  success: Boolean!
  errors: [InviteWorkspaceMembershipError!]!
  workspaceMembership: WorkspaceMembership
}

enum InviteWorkspaceMembershipError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  USER_NOT_FOUND
  WORKSPACE_NOT_FOUND
}

scalar JSON

enum LaunchAccessmodAnalysisError {
  LAUNCH_FAILED
}

input LaunchAccessmodAnalysisInput {
  id: String!
}

type LaunchAccessmodAnalysisResult {
  success: Boolean!
  analysis: AccessmodAnalysis
  errors: [LaunchAccessmodAnalysisError!]!
}

enum LoginError {
  OTP_REQUIRED
  INVALID_CREDENTIALS
  INVALID_OTP
}

input LoginInput {
  email: String!
  password: String!
  token: String
}

type LoginResult {
  success: Boolean!
  errors: [LoginError!]
}

type LogoutResult {
  success: Boolean!
}

input LogPipelineMessageInput {
  priority: MessagePriority!
  message: String!
}

type LogPipelineMessageResult {
  success: Boolean!
  errors: [PipelineError!]!
}

type Me {
  user: User
  features: [FeatureFlag!]!
  authorizedActions: [MeAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: MePermissions!
  hasTwoFactorEnabled: Boolean!
}

enum MeAuthorizedActions {
  CREATE_TEAM
  ADMIN_PANEL
  SUPER_USER
  CREATE_ACCESSMOD_PROJECT
  MANAGE_ACCESSMOD_ACCESS_REQUESTS
}

type Membership {
  id: String!
  user: User!
  team: Team!
  authorizedActions: [MembershipAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: MembershipPermissions!
  role: MembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum MembershipAuthorizedActions {
  UPDATE
  DELETE
}

type MembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Membership!]!
}

type MembershipPermissions {
  update: Boolean!
  delete: Boolean!
}

enum MembershipRole {
  ADMIN
  REGULAR
}

type MePermissions {
  createTeam: Boolean!
  adminPanel: Boolean!
  superUser: Boolean!
  createCollection: Boolean!
  createAccessmodProject: Boolean!
  manageAccessmodAccessRequests: Boolean!
  createWorkspace: Boolean!
}

enum MessagePriority {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

scalar MovingSpeeds

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult!
  setPassword(input: SetPasswordInput!): SetPasswordResult!
  verifyToken(input: VerifyTokenInput!): VerifyTokenResult!
  generateChallenge: GenerateChallengeResult!
  enableTwoFactor(input: EnableTwoFactorInput): EnableTwoFactorResult!
  disableTwoFactor(input: DisableTwoFactorInput): DisableTwoFactorResult!
  createTeam(input: CreateTeamInput!): CreateTeamResult!
  updateTeam(input: UpdateTeamInput!): UpdateTeamResult!
  deleteTeam(input: DeleteTeamInput!): DeleteTeamResult!
  createMembership(input: CreateMembershipInput!): CreateMembershipResult!
  updateMembership(input: UpdateMembershipInput!): UpdateMembershipResult!
  deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult!
  createCollection(input: CreateCollectionInput!): CreateCollectionResult!
  updateCollection(input: UpdateCollectionInput!): UpdateCollectionResult!
  deleteCollection(input: DeleteCollectionInput!): DeleteCollectionResult!
  createCollectionElement(input: CreateCollectionElementInput!): CreateCollectionElementResult!
  deleteCollectionElement(input: DeleteCollectionElementInput!): DeleteCollectionElementResult!
  runDAG(input: RunDAGInput!): RunDAGResult!
  updateDAG(input: UpdateDAGInput!): UpdateDAGResult!
  prepareDownloadURL(input: PrepareDownloadURLInput!): PrepareDownloadURLResult
  setDAGRunFavorite(input: SetDAGRunFavoriteInput!): SetDAGRunFavoriteResult
  createAccessmodProject(input: CreateAccessmodProjectInput!): CreateAccessmodProjectResult!
  updateAccessmodProject(input: UpdateAccessmodProjectInput!): UpdateAccessmodProjectResult!
  deleteAccessmodProject(input: DeleteAccessmodProjectInput!): DeleteAccessmodProjectResult!
  createAccessmodProjectMember(input: CreateAccessmodProjectMemberInput!): CreateAccessmodProjectMemberResult!
  updateAccessmodProjectMember(input: UpdateAccessmodProjectMemberInput!): UpdateAccessmodProjectMemberResult!
  deleteAccessmodProjectMember(input: DeleteAccessmodProjectMemberInput!): DeleteAccessmodProjectMemberResult!
  createAccessmodFileset(input: CreateAccessmodFilesetInput!): CreateAccessmodFilesetResult!
  updateAccessmodFileset(input: UpdateAccessmodFilesetInput!): UpdateAccessmodFilesetResult!
  deleteAccessmodFileset(input: DeleteAccessmodFilesetInput!): DeleteAccessmodFilesetResult!
  prepareAccessmodFileUpload(input: PrepareAccessmodFileUploadInput!): PrepareAccessmodFileUploadResult!
  prepareAccessmodFileDownload(input: PrepareAccessmodFileDownloadInput!): PrepareAccessmodFileDownloadResult!
  prepareAccessmodFilesetVisualizationDownload(input: PrepareAccessmodFilesetVisualizationDownloadInput!): PrepareAccessmodFilesetVisualizationDownloadResult!
  createAccessmodFile(input: CreateAccessmodFileInput!): CreateAccessmodFileResult!
  createAccessmodAccessibilityAnalysis(input: CreateAccessmodAccessibilityAnalysisInput): CreateAccessmodAccessibilityAnalysisResult!
  createAccessmodZonalStatistics(input: CreateAccessmodZonalStatisticsInput): CreateAccessmodZonalStatisticsResult!
  updateAccessmodAccessibilityAnalysis(input: UpdateAccessmodAccessibilityAnalysisInput): UpdateAccessmodAccessibilityAnalysisResult!
  updateAccessmodZonalStatistics(input: UpdateAccessmodZonalStatisticsInput): UpdateAccessmodZonalStatisticsResult!
  launchAccessmodAnalysis(input: LaunchAccessmodAnalysisInput): LaunchAccessmodAnalysisResult!
  deleteAccessmodAnalysis(input: DeleteAccessmodAnalysisInput): DeleteAccessmodAnalysisResult!
  requestAccessmodAccess(input: RequestAccessmodAccessInput!): RequestAccessmodAccessInputResult!
  approveAccessmodAccessRequest(input: ApproveAccessmodAccessRequestInput!): ApproveAccessmodAccessRequestResult!
  denyAccessmodAccessRequest(input: DenyAccessmodAccessRequestInput!): DenyAccessmodAccessRequestResult!
  updateExternalDashboard(input: UpdateExternalDashboardInput!): UpdateExternalDashboardResult!
  createPipeline(input: CreatePipelineInput): CreatePipelineResult!
  deletePipeline(input: DeletePipelineInput): DeletePipelineResult!
  runPipeline(input: RunPipelineInput): RunPipelineResult!
  pipelineToken(input: PipelineTokenInput): PipelineTokenResult!
  uploadPipeline(input: UploadPipelineInput): UploadPipelineResult!
  logPipelineMessage(input: LogPipelineMessageInput): LogPipelineMessageResult!
  updatePipelineProgress(input: UpdatePipelineProgressInput): UpdatePipelineProgressResult!
  addPipelineOutput(input: AddPipelineOutputInput): AddPipelineOutputResult!
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspaceResult!
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspaceResult!
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspaceResult!
  inviteWorkspaceMember(input: InviteWorkspaceMemberInput!): InviteWorkspaceMemberResult!
  updateWorkspaceMember(input: UpdateWorkspaceMemberInput!): UpdateWorkspaceMemberResult!
  deleteWorkspaceMember(input: DeleteWorkspaceMemberInput!): DeleteWorkspaceMemberResult!
}

type Organization {
  id: String!
  name: String!
  type: String!
  url: String!
  contactInfo: String!
}

input OrganizationInput {
  id: String!
  name: String
  type: String
  url: String
  contactInfo: String
}

enum PermissionMode {
  OWNER
  EDITOR
  VIEWER
}

type Pipeline {
  id: String!
  name: String!
  entrypoint: String!
  parameters: JSON!
  config: String!
  schedule: String
  user: User
  runs(page: Int, perPage: Int, orderBy: PipelineRunOrderBy): PipelineRunPage!
}

enum PipelineError {
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  INVALID_CONFIG
  PIPELINE_ALREADY_COMPLETED
}

type PipelineRun {
  id: String!
  run_id: String!
  user: User
  pipeline: Pipeline!
  version: PipelineVersion!
  config: String!
  status: PipelineRunStatus!
  executionDate: DateTime
  duration: Int
  progress: Int!
  triggerMode: PipelineRunTrigger
  messages: [PipelineRunMessage!]!
  logs: String
  outputs: [PipelineRunOutput!]!
  code: String!
}

type PipelineRunMessage {
  message: String!
  priority: MessagePriority!
  timestamp: DateTime
}

enum PipelineRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

type PipelineRunOutput {
  title: String!
  uri: String!
}

type PipelineRunPage {
  items: [PipelineRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

enum PipelineRunStatus {
  success
  running
  failed
  queued
}

enum PipelineRunTrigger {
  SCHEDULED
  MANUAL
}

type PipelinesPage {
  items: [Pipeline!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

input PipelineTokenInput {
  name: String!
}

type PipelineTokenResult {
  success: Boolean!
  errors: [PipelineError!]!
  token: String
}

type PipelineVersion {
  id: String!
  user: User
  pipeline: Pipeline!
  number: Int!
  zipfile: String!
}

input PrepareAccessmodFileDownloadInput {
  fileId: String!
}

type PrepareAccessmodFileDownloadResult {
  success: Boolean!
  downloadUrl: String
}

input PrepareAccessmodFilesetVisualizationDownloadInput {
  id: String!
}

type PrepareAccessmodFilesetVisualizationDownloadResult {
  success: Boolean!
  url: String
}

input PrepareAccessmodFileUploadInput {
  filesetId: String!
  mimeType: String!
}

type PrepareAccessmodFileUploadResult {
  success: Boolean!
  uploadUrl: String
  fileUri: String
}

input PrepareDownloadURLInput {
  uri: URL!
}

type PrepareDownloadURLResult {
  success: Boolean!
  url: URL
}

type Query {
  search(query: String, page: Int, perPage: Int, datasourceIds: [String!], types: [String!]): SearchQueryResult!
  catalog(path: String, page: Int, perPage: Int): CatalogPage!
  me: Me!
  team(id: String!): Team
  teams(term: String, page: Int, perPage: Int): TeamPage!
  organizations: [Organization!]!
  collection(id: String!): Collection
  collections(page: Int, perPage: Int): CollectionPage!
  dags(page: Int, perPage: Int): DAGPage!
  dag(id: String!): DAG
  dagRun(id: String!): DAGRun
  accessmodProject(id: String): AccessmodProject
  accessmodProjects(term: String, countries: [String!], teams: [String!], page: Int, perPage: Int, orderBy: AccessmodProjectOrder): AccessmodProjectPage!
  accessmodFileset(id: String): AccessmodFileset
  accessmodFilesets(projectId: String!, roleId: String, term: String, mode: AccessmodFilesetMode, page: Int, perPage: Int): AccessmodFilesetPage!
  accessmodFilesetRole(id: String!): AccessmodFilesetRole
  accessmodFilesetRoles: [AccessmodFilesetRole!]!
  accessmodAnalysis(id: String): AccessmodAnalysis
  accessmodAnalyses(projectId: String!, page: Int, perPage: Int): AccessmodAnalysisPage!
  accessmodAccessRequests(page: Int, perPage: Int): AccessmodAccessRequestPage!
  country(code: String, alpha3: String): Country
  boundaries(country_code: String!, level: String!): [WHOBoundary!]!
  countries: [Country!]!
  externalDashboards(page: Int, perPage: Int): ExternalDashboardPage!
  externalDashboard(id: String!): ExternalDashboard
  notebooksUrl: URL!
  totalNotebooks: Int!
  lastActivities: [Activity!]!
  pipelines(page: Int, perPage: Int): PipelinesPage!
  pipeline(id: String, name: String): Pipeline
  pipelineRun(id: String!): PipelineRun
  pipelineRunCode(id: String): String
  workspace(id: String!): Workspace
  workspaces(page: Int, perPage: Int): WorkspacePage!
}

enum RequestAccessmodAccessError {
  ALREADY_EXISTS
  MUST_ACCEPT_TOS
  INVALID
}

input RequestAccessmodAccessInput {
  firstName: String!
  lastName: String!
  email: String!
  acceptTos: Boolean!
}

type RequestAccessmodAccessInputResult {
  success: Boolean!
  errors: [RequestAccessmodAccessError!]!
}

input ResetPasswordInput {
  email: String!
}

type ResetPasswordResult {
  success: Boolean!
}

enum RunDAGError {
  DAG_NOT_FOUND
  INVALID_CONFIG
}

input RunDAGInput {
  dagId: String!
  config: JSON!
}

type RunDAGResult {
  success: Boolean!
  errors: [RunDAGError!]!
  dagRun: DAGRun
  dag: DAG
}

input RunPipelineInput {
  id: String!
  version: Int
  config: String
}

type RunPipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  run: PipelineRun
}

type S3Bucket {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type S3Object {
  id: String!
  bucket: S3Bucket!
  filename: String!
  key: String!
  parentKey: String!
  size: Int!
  storageClass: String!
  type: String!
  lastModified: DateTime!
  etag: String!
  collections: [Collection!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type S3ObjectPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [S3Object!]!
}

type SearchQueryResult {
  results: [SearchResult!]!
  types: [SearchType!]!
}

type SearchResult {
  object: SearchResultObject!
  rank: Float!
}

union SearchResultObject = CatalogEntry | Collection

type SearchType {
  value: String!
  label: String!
}

enum SetDAGRunFavoriteError {
  NOT_FOUND
  INVALID
  MISSING_LABEL
}

input SetDAGRunFavoriteInput {
  id: String!
  label: String
  isFavorite: Boolean!
}

type SetDAGRunFavoriteResult {
  success: Boolean!
  errors: [SetDAGRunFavoriteError!]!
  dagRun: DAGRun
}

enum SetPasswordError {
  USER_NOT_FOUND
  PASSWORD_MISMATCH
  INVALID_TOKEN
  INVALID_PASSWORD
}

input SetPasswordInput {
  uidb64: String!
  token: String!
  password1: String!
  password2: String!
}

type SetPasswordResult {
  success: Boolean!
  error: SetPasswordError
}

scalar SimplifiedExtentType

scalar StackPriorities

type Tag {
  id: String!
  name: String!
}

type Team {
  id: String!
  name: String!
  memberships(page: Int, perPage: Int): MembershipPage!
  authorizedActions: [TeamAuthorizedActions!]! @deprecated(reason: "authorizedActions is deprecated. Use permissions instead.")
  permissions: TeamPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TeamAuthorizedActions {
  UPDATE
  DELETE
  CREATE_MEMBERSHIP
}

type TeamPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Team!]!
}

type TeamPermissions {
  update: Boolean!
  createMembership: Boolean!
  delete: Boolean!
}

scalar TimeThresholds

enum UpdateAccessmodAccessibilityAnalysisError {
  NOT_FOUND
  NAME_DUPLICATE
}

input UpdateAccessmodAccessibilityAnalysisInput {
  id: String!
  name: String
  landCoverId: String
  demId: String
  stackId: String
  stackPriorities: StackPriorities
  transportNetworkId: String
  waterId: String
  barrierId: String
  movingSpeeds: MovingSpeeds
  healthFacilitiesId: String
  invertDirection: Boolean
  maxTravelTime: Int
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
}

type UpdateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [UpdateAccessmodAccessibilityAnalysisError!]!
}

enum UpdateAccessmodFilesetError {
  NOT_FOUND
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input UpdateAccessmodFilesetInput {
  id: String!
  name: String
  metadata: AccessmodFilesetMetadata
}

type UpdateAccessmodFilesetResult {
  success: Boolean!
  fileset: AccessmodFileset
  errors: [UpdateAccessmodFilesetError!]!
}

enum UpdateAccessmodProjectError {
  NOT_FOUND
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input UpdateAccessmodProjectInput {
  id: String!
  name: String
  description: String
}

enum UpdateAccessmodProjectMemberError {
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input UpdateAccessmodProjectMemberInput {
  id: String!
  mode: PermissionMode!
}

type UpdateAccessmodProjectMemberResult {
  success: Boolean!
  member: AccessmodProjectMember
  errors: [UpdateAccessmodProjectMemberError!]!
}

type UpdateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [UpdateAccessmodProjectError!]!
}

enum UpdateAccessmodZonalStatisticsError {
  NOT_FOUND
  NAME_DUPLICATE
}

input UpdateAccessmodZonalStatisticsInput {
  id: String!
  name: String
  populationId: String
  travelTimesId: String
  boundariesId: String
  timeThresholds: TimeThresholds
}

type UpdateAccessmodZonalStatisticsResult {
  success: Boolean!
  analysis: AccessmodZonalStatistics
  errors: [UpdateAccessmodZonalStatisticsError!]!
}

enum UpdateCollectionError {
  NOT_FOUND
  INVALID
}

input UpdateCollectionInput {
  id: String!
  name: String
  summary: String
  authorId: String
  countries: [CountryInput!]
  tagIds: [String!]
  description: String
}

type UpdateCollectionResult {
  success: Boolean!
  errors: [CreateCollectionError!]!
  collection: Collection
}

enum UpdateDAGError {
  NOT_FOUND
  INVALID
}

input UpdateDAGInput {
  id: String!
  label: String
  description: String
  schedule: String
  countries: [CountryInput!]
}

type UpdateDAGResult {
  success: Boolean!
  errors: [UpdateDAGError!]!
  dag: DAG
}

enum UpdateExternalDashboardError {
  INVALID
  NOT_FOUND
}

input UpdateExternalDashboardInput {
  id: String!
  description: String
  name: String
  countries: [CountryInput!]
}

type UpdateExternalDashboardResult {
  success: Boolean!
  errors: [UpdateExternalDashboardError!]!
  externalDashboard: ExternalDashboard
}

enum UpdateMembershipError {
  PERMISSION_DENIED
  NOT_FOUND
  INVALID_ROLE
}

input UpdateMembershipInput {
  id: String!
  role: MembershipRole!
}

type UpdateMembershipResult {
  success: Boolean!
  membership: Membership
  errors: [UpdateMembershipError!]!
}

input UpdatePipelineProgressInput {
  percent: Int!
}

type UpdatePipelineProgressResult {
  success: Boolean!
  errors: [PipelineError!]!
}

enum UpdateTeamError {
  NOT_FOUND
  PERMISSION_DENIED
  NAME_DUPLICATE
}

input UpdateTeamInput {
  id: String!
  name: String
}

type UpdateTeamResult {
  team: Team
  success: Boolean!
  errors: [UpdateTeamError!]!
}

enum UpdateWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
  INVALID
}

input UpdateWorkspaceInput {
  id: String!
  name: String
  description: String
  countries: [CountryInput!]
}

enum UpdateWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

input UpdateWorkspaceMemberInput {
  membershipId: String!
  role: WorkspaceMembershipRole!
}

type UpdateWorkspaceMemberResult {
  success: Boolean!
  errors: [UpdateWorkspaceMemberError!]!
  workspaceMembership: WorkspaceMembership
}

type UpdateWorkspaceResult {
  success: Boolean!
  errors: [UpdateWorkspaceError!]!
  workspace: Workspace
}

input UploadPipelineInput {
  name: String!
  zipfile: String!
}

type UploadPipelineResult {
  success: Boolean!
  version: Int
  errors: [PipelineError!]!
}

scalar URL

type User {
  id: String!
  email: String!
  firstName: String
  lastName: String
  displayName: String!
  avatar: Avatar!
  dateJoined: DateTime!
  lastLogin: DateTime
}

enum VerifyTokenError {
  INVALID_OTP_OR_DEVICE
}

input VerifyTokenInput {
  token: String!
}

type VerifyTokenResult {
  success: Boolean!
  errors: [VerifyTokenError!]
}

type WHOBoundary {
  id: String!
  name: String!
  country: Country!
  administrative_level: Int!
  parent: String
  extent: String!
}

type WHOInfo {
  region: WHORegion
  defaultCRS: Int!
  simplifiedExtent: SimplifiedExtentType
}

type WHORegion {
  code: String!
  name: String!
}

type Workspace {
  id: String!
  name: String!
  description: String
  members(page: Int, perPage: Int): WorkspaceMembershipPage!
  permissions: WorkspacePermissions!
  countries: [Country!]!
  createdAt: DateTime!
  updatedAt: DateTime
  createdBy: User!
}

type WorkspaceMembership {
  id: String!
  user: User!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkspaceMembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceMembership!]!
}

enum WorkspaceMembershipRole {
  ADMIN
  EDITOR
  VIEWER
}

type WorkspacePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Workspace!]!
}

type WorkspacePermissions {
  update: Boolean!
  delete: Boolean!
  manageMembers: Boolean!
}

