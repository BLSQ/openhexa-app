"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AccessmodAccessibilityAnalysis implements AccessmodAnalysis {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  landCover: AccessmodFileset
  dem: AccessmodFileset
  transportNetwork: AccessmodFileset
  slope: AccessmodFileset
  water: AccessmodFileset
  barrier: AccessmodFileset
  movingSpeeds: AccessmodFileset
  healthFacilities: AccessmodFileset
  invertDirection: Boolean
  maxTravelTime: Int
  maxSlope: Float
  priorityRoads: Boolean
  priorityLandCover: [Int!]
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
  travelTimes: AccessmodFileset
  frictionSurface: AccessmodFileset
  catchmentAreas: AccessmodFileset
}

enum AccessmodAccessibilityAnalysisAlgorithm {
  ANISOTROPIC
  ISOTROPIC
}

interface AccessmodAnalysis {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodAnalysisAuthorizedActions {
  UPDATE
  DELETE
  RUN
}

type AccessmodAnalysisPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodAnalysis!]!
}

enum AccessmodAnalysisStatus {
  DRAFT
  READY
  QUEUED
  RUNNING
  SUCCESS
  FAILED
}

enum AccessmodAnalysisType {
  ACCESSIBILITY
  GEOGRAPHIC_COVERAGE
}

type AccessmodFile {
  id: String!
  uri: String!
  name: String!
  fileset: AccessmodFileset
  mimeType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodFileset {
  id: String!
  name: String!
  status: AccessmodFilesetStatus!
  role: AccessmodFilesetRole!
  author: User!
  files: [AccessmodFile!]!
  metadata: AccessmodFilesetMetadata!
  authorizedActions: [AccessmodFilesetAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetAuthorizedActions {
  UPDATE
  DELETE
  CREATE_FILE
}

enum AccessmodFilesetFormat {
  VECTOR
  RASTER
  TABULAR
}

scalar AccessmodFilesetMetadata

type AccessmodFilesetPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodFileset!]!
}

type AccessmodFilesetRole {
  id: String!
  code: AccessmodFilesetRoleCode!
  name: String!
  format: AccessmodFilesetFormat!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetRoleCode {
  BARRIER
  CATCHMENT_AREAS
  COVERAGE
  DEM
  FRICTION_SURFACE
  GEOMETRY
  HEALTH_FACILITIES
  LAND_COVER
  MOVING_SPEEDS
  POPULATION
  SLOPE
  TRANSPORT_NETWORK
  TRAVEL_TIMES
  WATER
}

enum AccessmodFilesetStatus {
  PENDING
  VALIDATING
  VALID
  INVALID
}

type AccessmodGeographicCoverageAnalysis implements AccessmodAnalysis {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  author: User!
  authorizedActions: [AccessmodAnalysisAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  population: AccessmodFileset
  frictionSurface: AccessmodFileset
  dem: AccessmodFileset
  healthFacilities: AccessmodFileset
  anisotropic: Boolean
  maxTravelTime: Int
  hfProcessingOrder: String
  geographicCoverage: AccessmodFileset
  catchmentAreas: AccessmodFileset
}

type AccessmodProject {
  id: String!
  name: String!
  spatialResolution: Int!
  description: String!
  crs: Int!
  country: Country!
  author: User!
  extent: AccessmodFileset
  authorizedActions: [AccessmodProjectAuthorizedActions!]!
  permissions: [AccessmodProjectPermission!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodProjectAuthorizedActions {
  UPDATE
  DELETE
  CREATE_FILESET
  CREATE_ANALYSIS
  CREATE_PERMISSION
}

type AccessmodProjectPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodProject!]!
}

type AccessmodProjectPermission {
  id: String!
  user: User
  team: Team
  project: AccessmodProject!
  mode: PermissionMode!
  authorizedActions: [AccessmodProjectPermissionAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodProjectPermissionAuthorizedActions {
  UPDATE
  DELETE
}

type AccessmodProjectPermissionPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodProjectPermission!]!
}

type Avatar {
  initials: String!
  color: String!
}

type Country {
  code: String!
  alpha3: String!
  name: String!
  flag: String!
}

input CountryInput {
  code: String!
  alpha3: String
  name: String
  flag: String
}

enum CreateAccessmodAccessibilityAnalysisError {
  NAME_DUPLICATE
}

input CreateAccessmodAccessibilityAnalysisInput {
  projectId: String!
  name: String!
}

type CreateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [CreateAccessmodAccessibilityAnalysisError!]!
}

enum CreateAccessmodFileError {
  URI_DUPLICATE
}

input CreateAccessmodFileInput {
  filesetId: String!
  uri: String!
  mimeType: String!
}

type CreateAccessmodFileResult {
  success: Boolean!
  file: AccessmodFile
  errors: [CreateAccessmodFileError!]!
}

enum CreateAccessmodFilesetError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodFilesetInput {
  name: String!
  projectId: String!
  roleId: String!
}

type CreateAccessmodFilesetResult {
  success: Boolean!
  fileset: AccessmodFileset
  errors: [CreateAccessmodFilesetError!]!
}

enum CreateAccessmodProjectError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodProjectInput {
  name: String!
  spatialResolution: Int!
  description: String
  crs: Int!
  extentId: String
  country: CountryInput!
}

enum CreateAccessmodProjectPermissionError {
  PERMISSION_DENIED
  NOT_FOUND
}

input CreateAccessmodProjectPermissionInput {
  userId: String
  teamId: String
  projectId: String!
  mode: PermissionMode!
}

type CreateAccessmodProjectPermissionResult {
  success: Boolean!
  permission: AccessmodProjectPermission
  errors: [CreateAccessmodProjectPermissionError!]!
}

type CreateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [CreateAccessmodProjectError!]!
}

enum CreateMembershipError {
  PERMISSION_DENIED
  NOT_FOUND
}

input CreateMembershipInput {
  userEmail: String!
  teamId: String!
  role: MembershipRole!
}

type CreateMembershipResult {
  success: Boolean!
  membership: Membership
  errors: [CreateMembershipError!]!
}

enum CreateTeamError {
  PERMISSION_DENIED
  NAME_DUPLICATE
}

input CreateTeamInput {
  name: String!
}

type CreateTeamResult {
  team: Team
  success: Boolean!
  errors: [CreateTeamError!]!
}

scalar Date

scalar DateTime

enum DeleteAccessmodAnalysisError {
  NOT_FOUND
  DELETE_FAILED
}

input DeleteAccessmodAnalysisInput {
  id: String!
}

type DeleteAccessmodAnalysisResult {
  success: Boolean!
  errors: [DeleteAccessmodAnalysisError!]!
}

enum DeleteAccessmodFileError {
  NOT_FOUND
}

input DeleteAccessmodFileInput {
  id: String!
}

type DeleteAccessmodFileResult {
  success: Boolean!
  errors: [DeleteAccessmodFileError!]!
}

enum DeleteAccessmodFilesetError {
  NOT_FOUND
}

input DeleteAccessmodFilesetInput {
  id: String!
}

type DeleteAccessmodFilesetResult {
  success: Boolean!
  errors: [DeleteAccessmodFilesetError!]!
}

enum DeleteAccessmodProjectError {
  NOT_FOUND
  PERMISSION_DENIED
}

input DeleteAccessmodProjectInput {
  id: String!
}

enum DeleteAccessmodProjectPermissionError {
  PERMISSION_DENIED
  NOT_FOUND
}

input DeleteAccessmodProjectPermissionInput {
  id: String!
}

type DeleteAccessmodProjectPermissionResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectPermissionError!]!
}

type DeleteAccessmodProjectResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectError!]!
}

enum DeleteMembershipError {
  PERMISSION_DENIED
  NOT_FOUND
}

input DeleteMembershipInput {
  id: String!
}

type DeleteMembershipResult {
  success: Boolean!
  errors: [DeleteMembershipError!]!
}

enum DeleteTeamError {
  NOT_FOUND
  PERMISSION_DENIED
}

input DeleteTeamInput {
  id: String!
}

type DeleteTeamResult {
  success: Boolean!
  errors: [DeleteTeamError!]!
}

enum LaunchAccessmodAnalysisError {
  LAUNCH_FAILED
}

input LaunchAccessmodAnalysisInput {
  id: String!
}

type LaunchAccessmodAnalysisResult {
  success: Boolean!
  analysis: AccessmodAnalysis
  errors: [LaunchAccessmodAnalysisError!]!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResult {
  success: Boolean!
  me: Me
}

type LogoutResult {
  success: Boolean!
}

type Me {
  user: User
  authorizedActions: [MeAuthorizedActions!]!
}

enum MeAuthorizedActions {
  CREATE_TEAM
  CREATE_ACCESSMOD_PROJECT
}

type Membership {
  id: String!
  user: User!
  team: Team!
  authorizedActions: [MembershipAuthorizedActions!]!
  role: MembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum MembershipAuthorizedActions {
  UPDATE
  DELETE
}

type MembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Membership!]!
}

enum MembershipRole {
  ADMIN
  REGULAR
}

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult!
  setPassword(input: SetPasswordInput!): SetPasswordResult!
  createTeam(input: CreateTeamInput!): CreateTeamResult!
  updateTeam(input: UpdateTeamInput!): UpdateTeamResult!
  deleteTeam(input: DeleteTeamInput!): DeleteTeamResult!
  createMembership(input: CreateMembershipInput!): CreateMembershipResult!
  updateMembership(input: UpdateMembershipInput!): UpdateMembershipResult!
  deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult!
  createAccessmodProject(input: CreateAccessmodProjectInput): CreateAccessmodProjectResult!
  updateAccessmodProject(input: UpdateAccessmodProjectInput): UpdateAccessmodProjectResult!
  deleteAccessmodProject(input: DeleteAccessmodProjectInput): DeleteAccessmodProjectResult!
  createAccessmodProjectPermission(input: CreateAccessmodProjectPermissionInput!): CreateAccessmodProjectPermissionResult!
  updateAccessmodProjectPermission(input: UpdateAccessmodProjectPermissionInput!): UpdateAccessmodProjectPermissionResult!
  deleteAccessmodProjectPermission(input: DeleteAccessmodProjectPermissionInput!): DeleteAccessmodProjectPermissionResult!
  createAccessmodFileset(input: CreateAccessmodFilesetInput): CreateAccessmodFilesetResult!
  deleteAccessmodFileset(input: DeleteAccessmodFilesetInput): DeleteAccessmodFilesetResult!
  prepareAccessmodFileUpload(input: PrepareAccessmodFileUploadInput): PrepareAccessmodFileUploadResult!
  prepareAccessmodFileDownload(input: PrepareAccessmodFileDownloadInput): PrepareAccessmodFileDownloadResult!
  createAccessmodFile(input: CreateAccessmodFileInput): CreateAccessmodFileResult!
  deleteAccessmodFile(input: DeleteAccessmodFileInput): DeleteAccessmodFileResult!
  createAccessmodAccessibilityAnalysis(input: CreateAccessmodAccessibilityAnalysisInput): CreateAccessmodAccessibilityAnalysisResult!
  updateAccessmodAccessibilityAnalysis(input: UpdateAccessmodAccessibilityAnalysisInput): UpdateAccessmodAccessibilityAnalysisResult!
  launchAccessmodAnalysis(input: LaunchAccessmodAnalysisInput): LaunchAccessmodAnalysisResult!
  deleteAccessmodAnalysis(input: DeleteAccessmodAnalysisInput): DeleteAccessmodAnalysisResult!
}

type Organization {
  id: String!
  name: String!
  type: String!
  url: String!
  contactInfo: String!
}

input OrganizationInput {
  id: String!
  name: String
  type: String
  url: String
  contactInfo: String
}

enum PermissionMode {
  OWNER
  EDITOR
  VIEWER
}

input PrepareAccessmodFileDownloadInput {
  fileId: String!
}

type PrepareAccessmodFileDownloadResult {
  success: Boolean!
  downloadUrl: String
}

input PrepareAccessmodFileUploadInput {
  filesetId: String!
  mimeType: String!
}

type PrepareAccessmodFileUploadResult {
  success: Boolean!
  uploadUrl: String
  fileUri: String
}

type Query {
  me: Me!
  team(id: String!): Team
  teams(term: String, page: Int, perPage: Int): TeamPage!
  organizations: [Organization!]!
  countries: [Country!]!
  accessmodProject(id: String): AccessmodProject
  accessmodProjects(term: String, countries: [String!], teams: [String!], page: Int, perPage: Int): AccessmodProjectPage!
  accessmodFileset(id: String): AccessmodFileset
  accessmodFilesets(projectId: String!, roleId: String, term: String, page: Int, perPage: Int): AccessmodFilesetPage!
  accessmodFilesetRole(id: String!): AccessmodFilesetRole
  accessmodFilesetRoles: [AccessmodFilesetRole!]!
  accessmodAnalysis(id: String): AccessmodAnalysis
  accessmodAnalyses(projectId: String!, page: Int, perPage: Int): AccessmodAnalysisPage!
}

input ResetPasswordInput {
  email: String!
}

type ResetPasswordResult {
  success: Boolean!
}

enum SetPasswordError {
  USER_NOT_FOUND
  PASSWORD_MISMATCH
  INVALID_TOKEN
  INVALID_PASSWORD
}

input SetPasswordInput {
  uidb64: String!
  token: String!
  password1: String!
  password2: String!
}

type SetPasswordResult {
  success: Boolean!
  error: SetPasswordError
}

type Team {
  id: String!
  name: String!
  memberships(page: Int, perPage: Int): MembershipPage!
  authorizedActions: [TeamAuthorizedActions!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TeamAuthorizedActions {
  UPDATE
  DELETE
  CREATE_MEMBERSHIP
}

type TeamPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Team!]!
}

enum UpdateAccessmodAccessibilityAnalysisError {
  NOT_FOUND
  NAME_DUPLICATE
}

input UpdateAccessmodAccessibilityAnalysisInput {
  id: String!
  name: String
  landCoverId: String
  demId: String
  transportNetworkId: String
  slopeId: String
  waterId: String
  barrierId: String
  movingSpeedsId: String
  healthFacilitiesId: String
  invertDirection: Boolean
  maxTravelTime: Int
  maxSlope: Float
  priorityRoads: Boolean
  priorityLandCover: [Int!]
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
}

type UpdateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [UpdateAccessmodAccessibilityAnalysisError!]!
}

enum UpdateAccessmodProjectError {
  NOT_FOUND
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input UpdateAccessmodProjectInput {
  id: String!
  name: String
  description: String
  crs: Int
  spatialResolution: Int
  country: CountryInput
  extentId: String
}

enum UpdateAccessmodProjectPermissionError {
  PERMISSION_DENIED
  NOT_FOUND
}

input UpdateAccessmodProjectPermissionInput {
  id: String!
  mode: PermissionMode!
}

type UpdateAccessmodProjectPermissionResult {
  success: Boolean!
  permission: AccessmodProjectPermission
  errors: [UpdateAccessmodProjectPermissionError!]!
}

type UpdateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [UpdateAccessmodProjectError!]!
}

enum UpdateMembershipError {
  PERMISSION_DENIED
  NOT_FOUND
}

input UpdateMembershipInput {
  id: String!
  role: MembershipRole!
}

type UpdateMembershipResult {
  success: Boolean!
  membership: Membership
  errors: [UpdateMembershipError!]!
}

enum UpdateTeamError {
  NOT_FOUND
  PERMISSION_DENIED
  NAME_DUPLICATE
}

input UpdateTeamInput {
  id: String!
  name: String
}

type UpdateTeamResult {
  team: Team
  success: Boolean!
  errors: [UpdateTeamError!]!
}

type User {
  id: String!
  email: String!
  firstName: String
  lastName: String
  avatar: Avatar!
  dateJoined: DateTime!
  lastLogin: DateTime
}

