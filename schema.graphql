directive @loginRequired(withoutTwoFactor: Boolean) on FIELD_DEFINITION

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type AccessmodAccessibilityAnalysis implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  landCover: AccessmodFileset
  dem: AccessmodFileset
  transportNetwork: AccessmodFileset
  water: AccessmodFileset
  barrier: AccessmodFileset
  stack: AccessmodFileset
  stackPriorities: StackPriorities
  movingSpeeds: MovingSpeeds
  healthFacilities: AccessmodFileset
  invertDirection: Boolean
  maxTravelTime: Int
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
  travelTimes: AccessmodFileset
  frictionSurface: AccessmodFileset
}

enum AccessmodAccessibilityAnalysisAlgorithm {
  ANISOTROPIC
  ISOTROPIC
}

type AccessmodAccessRequest {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  acceptedTos: Boolean!
  status: AccessmodAccessRequestStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodAccessRequestPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodAccessRequest!]!
}

enum AccessmodAccessRequestStatus {
  PENDING
  APPROVED
  DENIED
}

interface AccessmodAnalysis {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  author: User!
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodAnalysisPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodAnalysis!]!
}

type AccessmodAnalysisPermissions {
  update: Boolean!
  delete: Boolean!
  run: Boolean!
}

enum AccessmodAnalysisStatus {
  DRAFT
  READY
  QUEUED
  RUNNING
  SUCCESS
  FAILED
}

enum AccessmodAnalysisType {
  ACCESSIBILITY
  GEOGRAPHIC_COVERAGE
  ZONAL_STATISTICS
}

type AccessmodFile {
  id: String!
  uri: String!
  name: String!
  fileset: AccessmodFileset
  mimeType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodFileset implements AccessmodOwnership {
  id: String!
  name: String!
  mode: AccessmodFilesetMode!
  status: AccessmodFilesetStatus!
  role: AccessmodFilesetRole!
  author: User!
  owner: AccessmodOwner
  files: [AccessmodFile!]!
  metadata: AccessmodFilesetMetadata!
  permissions: AccessmodFilesetPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetFormat {
  VECTOR
  RASTER
  TABULAR
}

scalar AccessmodFilesetMetadata

enum AccessmodFilesetMode {
  USER_INPUT
  AUTOMATIC_ACQUISITION
}

type AccessmodFilesetPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodFileset!]!
}

type AccessmodFilesetPermissions {
  update: Boolean!
  delete: Boolean!
  createFile: Boolean!
}

type AccessmodFilesetRole {
  id: String!
  code: AccessmodFilesetRoleCode!
  name: String!
  format: AccessmodFilesetFormat!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccessmodFilesetRoleCode {
  BARRIER
  COVERAGE
  DEM
  FRICTION_SURFACE
  GEOMETRY
  HEALTH_FACILITIES
  LAND_COVER
  POPULATION
  TRANSPORT_NETWORK
  TRAVEL_TIMES
  WATER
  STACK
  BOUNDARIES
  ZONAL_STATISTICS
  ZONAL_STATISTICS_TABLE
}

enum AccessmodFilesetStatus {
  PENDING
  VALIDATING
  VALID
  INVALID
  TO_ACQUIRE
}

type AccessmodGeographicCoverageAnalysis implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  population: AccessmodFileset
  frictionSurface: AccessmodFileset
  dem: AccessmodFileset
  healthFacilities: AccessmodFileset
  anisotropic: Boolean
  maxTravelTime: Int
  hfProcessingOrder: String
  geographicCoverage: AccessmodFileset
  catchmentAreas: AccessmodFileset
}

union AccessmodOwner = User | Team

interface AccessmodOwnership {
  owner: AccessmodOwner
}

type AccessmodProject implements AccessmodOwnership {
  id: String!
  name: String!
  spatialResolution: Int!
  description: String!
  crs: Int!
  country: Country!
  author: User!
  owner: AccessmodOwner
  extent: [[Float!]!]
  dem: AccessmodFileset
  permissions: AccessmodProjectPermissions!
  members: [AccessmodProjectMember!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodProjectMember {
  id: String!
  user: User
  team: Team
  project: AccessmodProject!
  mode: PermissionMode!
  permissions: AccessmodProjectMemberPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccessmodProjectMemberPermissions {
  update: Boolean!
  delete: Boolean!
}

enum AccessmodProjectOrder {
  UPDATED_AT_DESC
  UPDATED_AT_ASC
  NAME_DESC
  NAME_ASC
}

type AccessmodProjectPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [AccessmodProject!]!
}

type AccessmodProjectPermissions {
  update: Boolean!
  delete: Boolean!
  createFileset: Boolean!
  createAnalysis: Boolean!
  createMember: Boolean!
  createPermission: Boolean!
}

type AccessmodZonalStatistics implements AccessmodAnalysis & AccessmodOwnership {
  id: String!
  type: AccessmodAnalysisType!
  status: AccessmodAnalysisStatus!
  name: String!
  owner: AccessmodOwner
  author: User!
  permissions: AccessmodAnalysisPermissions!
  createdAt: DateTime!
  updatedAt: DateTime!
  population: AccessmodFileset
  travelTimes: AccessmodFileset
  boundaries: AccessmodFileset
  timeThresholds: TimeThresholds
  zonalStatisticsTable: AccessmodFileset
  zonalStatisticsGeo: AccessmodFileset
}

"""Represents the input for adding an output to a pipeline."""
input AddPipelineOutputInput {
  uri: String!
  type: String!
  name: String
}

"""Represents the result of adding an output to a pipeline."""
type AddPipelineOutputResult {
  success: Boolean!
  errors: [PipelineError!]!
}

type AddPipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
  recipient: PipelineRecipient
}

enum ApproveAccessmodAccessRequestError {
  INVALID
}

input ApproveAccessmodAccessRequestInput {
  id: String!
}

type ApproveAccessmodAccessRequestResult {
  success: Boolean!
  errors: [ApproveAccessmodAccessRequestError!]!
}

"""
Enum representing the possible errors that can occur when archiving a workspace.
"""
enum ArchiveWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

"""Represents the input for archiving a workspace."""
input ArchiveWorkspaceInput {
  slug: String!
}

"""Represents the result of archiving a workspace."""
type ArchiveWorkspaceResult {
  success: Boolean!
  errors: [ArchiveWorkspaceError!]!
}

"""The Avatar type represents the avatar of a user."""
type Avatar {
  """The initials of the user's avatar."""
  initials: String!

  """The color of the user's avatar."""
  color: String!
}

scalar BigInt

"""
A bucket is where all the files and data related to a workspace are stored.
"""
type Bucket {
  name: String!
  objects(prefix: String, page: Int = 1, perPage: Int = 15, query: String, ignoreHiddenFiles: Boolean = true): BucketObjectPage!
  object(key: String!): BucketObject
}

"""An object in a workspace's bucket."""
type BucketObject {
  key: String!
  name: String!
  path: String!
  size: BigInt
  updatedAt: DateTime
  type: BucketObjectType!
}

"""A page of objects in a workspace's bucket."""
type BucketObjectPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageNumber: Int!
  items: [BucketObject!]!
}

"""The type of an object in a workspace's bucket."""
enum BucketObjectType {
  FILE
  DIRECTORY
}

type Config {
  """List of requirements for the password."""
  passwordRequirements: [String!]
}

"""Represents a connection to an external data source or service."""
interface Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

"""Represents a field in a connection."""
type ConnectionField {
  code: String!
  value: String
  secret: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Represents the input for a connection field."""
input ConnectionFieldInput {
  code: String!
  value: String
  secret: Boolean!
}

"""Represents the permissions of a connection."""
type ConnectionPermissions {
  update: Boolean!
  delete: Boolean!
}

"""Represents the types of connections."""
enum ConnectionType {
  S3
  GCS
  POSTGRESQL
  DHIS2
  CUSTOM
  IASO
}

type Country {
  code: String!
  alpha3: String!
  name: String!
  flag: String!
  whoInfo: WHOInfo!
}

input CountryInput {
  code: String!
  alpha3: String
  name: String
  flag: String
}

enum CreateAccessmodAccessibilityAnalysisError {
  NAME_DUPLICATE
}

input CreateAccessmodAccessibilityAnalysisInput {
  projectId: String!
  name: String!
}

type CreateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [CreateAccessmodAccessibilityAnalysisError!]!
}

enum CreateAccessmodFileError {
  URI_DUPLICATE
}

input CreateAccessmodFileInput {
  filesetId: String!
  uri: String!
  mimeType: String!
}

type CreateAccessmodFileResult {
  success: Boolean!
  file: AccessmodFile
  errors: [CreateAccessmodFileError!]!
}

enum CreateAccessmodFilesetError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodFilesetInput {
  name: String!
  projectId: String!
  roleId: String!
  automatic: Boolean
  metadata: AccessmodFilesetMetadata
}

type CreateAccessmodFilesetResult {
  success: Boolean!
  fileset: AccessmodFileset
  errors: [CreateAccessmodFilesetError!]!
}

enum CreateAccessmodProjectError {
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input CreateAccessmodProjectInput {
  name: String!
  description: String
  spatialResolution: Int!
  crs: Int!
  country: CountryInput!
  extent: [[Float!]!]
}

enum CreateAccessmodProjectMemberError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input CreateAccessmodProjectMemberInput {
  userId: String
  teamId: String
  projectId: String!
  mode: PermissionMode!
}

type CreateAccessmodProjectMemberResult {
  success: Boolean!
  member: AccessmodProjectMember
  errors: [CreateAccessmodProjectMemberError!]!
}

type CreateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [CreateAccessmodProjectError!]!
}

enum CreateAccessmodZonalStatisticsError {
  NAME_DUPLICATE
}

input CreateAccessmodZonalStatisticsInput {
  projectId: String!
  name: String!
}

type CreateAccessmodZonalStatisticsResult {
  success: Boolean!
  analysis: AccessmodZonalStatistics
  errors: [CreateAccessmodZonalStatisticsError!]!
}

"""Errors that can occur when creating a folder in a workspace's bucket."""
enum CreateBucketFolderError {
  ALREADY_EXISTS
  NOT_FOUND
  PERMISSION_DENIED
}

"""Input for creating a folder in a workspace's bucket."""
input CreateBucketFolderInput {
  workspaceSlug: String!
  folderKey: String!
}

"""The result of creating a folder in a workspace's bucket."""
type CreateBucketFolderResult {
  success: Boolean!
  errors: [CreateBucketFolderError!]!
  folder: BucketObject
}

"""Represents the error types for creating a connection."""
enum CreateConnectionError {
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
  INVALID_SLUG
}

"""Represents the input for creating a connection."""
input CreateConnectionInput {
  workspaceSlug: String!
  name: String!
  slug: String
  description: String
  type: ConnectionType!
  fields: [ConnectionFieldInput!]
}

"""Represents the result of creating a connection."""
type CreateConnectionResult {
  success: Boolean!
  connection: Connection
  errors: [CreateConnectionError!]!
}

"""Errors that can occur when creating a dataset."""
enum CreateDatasetError {
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for creating a dataset."""
input CreateDatasetInput {
  workspaceSlug: String!
  name: String!
  description: String
}

"""Result of creating a dataset."""
type CreateDatasetResult {
  link: DatasetLink
  dataset: Dataset
  success: Boolean!
  errors: [CreateDatasetError!]!
}

"""Errors that can occur when creating a dataset version."""
enum CreateDatasetVersionError {
  DATASET_NOT_FOUND
  DUPLICATE_NAME
  PERMISSION_DENIED
}

"""Errors that can occur when creating a dataset version file."""
enum CreateDatasetVersionFileError {
  VERSION_NOT_FOUND
  LOCKED_VERSION
  ALREADY_EXISTS
  INVALID_URI
  PERMISSION_DENIED
}

"""Input for creating a dataset version file."""
input CreateDatasetVersionFileInput {
  versionId: ID!
  contentType: String!
  uri: String!
}

"""Result of creating a dataset version file."""
type CreateDatasetVersionFileResult {
  """The created file object"""
  file: DatasetVersionFile

  """The URL to upload the file to"""
  uploadUrl: String! @deprecated(reason: "moved to dedicated generateDatasetUploadUrl mutation")
  success: Boolean!
  errors: [CreateDatasetVersionFileError!]!
}

"""Input for creating a dataset version."""
input CreateDatasetVersionInput {
  datasetId: ID!
  name: String!
  changelog: String
}

"""Result of creating a dataset version."""
type CreateDatasetVersionResult {
  version: DatasetVersion
  success: Boolean!
  errors: [CreateDatasetVersionError!]!
}

"""
The CreateMembershipError enum represents the possible errors that can occur during the createMembership mutation.
"""
enum CreateMembershipError {
  """
  Indicates that a membership with the same user and team already exists.
  """
  ALREADY_EXISTS

  """
  Indicates that the user does not have permission to create a membership in the team.
  """
  PERMISSION_DENIED

  """Indicates that the team or user was not found."""
  NOT_FOUND
}

"""
The CreateMembershipInput type represents the input for the createMembership mutation.
"""
input CreateMembershipInput {
  """The email address of the user to add to the team."""
  userEmail: String!

  """The unique identifier of the team."""
  teamId: UUID!

  """The role of the user in the team."""
  role: MembershipRole!
}

"""
The CreateMembershipResult type represents the result of the createMembership mutation.
"""
type CreateMembershipResult {
  """Indicates whether the createMembership mutation was successful."""
  success: Boolean!

  """The created membership object."""
  membership: Membership

  """The list of errors that occurred during the createMembership mutation."""
  errors: [CreateMembershipError!]!
}

"""
Enum representing the possible errors that can occur when creating a pipeline from a template version.
"""
enum CreatePipelineFromTemplateVersionError {
  PERMISSION_DENIED
  WORKSPACE_NOT_FOUND
  PIPELINE_TEMPLATE_VERSION_NOT_FOUND
  PIPELINE_ALREADY_EXISTS
}

"""
Represents the input for deleting a pipeline template.
"""
input DeletePipelineTemplateInput {
  id: UUID!
}

"""
Represents the result of deleting a pipeline.
"""
type DeletePipelineTemplateResult {
  success: Boolean!
  errors: [PipelineTemplateError!]!
}

enum PipelineTemplateError {
  PIPELINE_TEMPLATE_NOT_FOUND
  PERMISSION_DENIED
}

"""
Represents the input for creating a new pipeline from a template version.
"""
input CreatePipelineFromTemplateVersionInput {
  workspaceSlug: String!
  pipelineTemplateVersionId: UUID!
}

"""
Represents the result of creating a new pipeline from a template version.
"""
type CreatePipelineFromTemplateVersionResult {
  pipeline: Pipeline
  success: Boolean!
  errors: [CreatePipelineFromTemplateVersionError!]
}

"""Represents the input for creating a pipeline."""
input CreatePipelineInput {
  code: String!
  name: String
  workspaceSlug: String!
  notebookPath: String
}

"""Represents the input for adding a recipient to a pipeline."""
input CreatePipelineRecipientInput {
  pipelineId: UUID!
  userId: UUID!
  notificationLevel: PipelineNotificationLevel!
}

"""Represents the result of creating a pipeline."""
type CreatePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  pipeline: Pipeline
}

"""
Enum representing the possible errors that can occur when creating a pipeline template version.
"""
enum CreatePipelineTemplateVersionError {
  PERMISSION_DENIED
  WORKSPACE_NOT_FOUND
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  DUPLICATE_TEMPLATE_NAME_OR_CODE
  UNKNOWN_ERROR
}

"""Represents the input for creating a new pipeline template version."""
input CreatePipelineTemplateVersionInput {
  name: String
  code: String
  description: String
  changelog: String
  config: String
  workspaceSlug: String!
  pipelineId: UUID!
  pipelineVersionId: UUID!
}

"""Represents the result of creating a new pipeline template version."""
type CreatePipelineTemplateVersionResult {
  pipelineTemplate: PipelineTemplate
  success: Boolean!
  errors: [CreatePipelineTemplateVersionError!]
}

"""
The CreateTeamError enum represents the possible errors that can occur during the createTeam mutation.
"""
enum CreateTeamError {
  """Indicates that the user does not have permission to create a team."""
  PERMISSION_DENIED

  """Indicates that a team with the same name already exists."""
  NAME_DUPLICATE
}

"""
The CreateTeamInput type represents the input for the createTeam mutation.
"""
input CreateTeamInput {
  """The name of the team."""
  name: String!
}

"""
The CreateTeamResult type represents the result of the createTeam mutation.
"""
type CreateTeamResult {
  """The created team object."""
  team: Team

  """Indicates whether the createTeam mutation was successful."""
  success: Boolean!

  """The list of errors that occurred during the createTeam mutation."""
  errors: [CreateTeamError!]!
}

"""
Enum representing the possible errors that can occur when creating a workspace.
"""
enum CreateWorkspaceError {
  PERMISSION_DENIED
  INVALID_SLUG
}

"""Represents the input for creating a workspace."""
input CreateWorkspaceInput {
  name: String!
  slug: String
  description: String
  countries: [CountryInput!]
  loadSampleData: Boolean
}

"""Represents the result of creating a workspace."""
type CreateWorkspaceResult {
  success: Boolean!
  errors: [CreateWorkspaceError!]!
  workspace: Workspace
}

"""Custom connection object"""
type CustomConnection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

type DAG {
  id: UUID!
  label: String!
  tags: [Tag!]!
  formCode: String
  countries: [Country!]!
  externalId: String!
  description: String
  user: User
  template: DAGTemplate!
  schedule: String
  externalUrl: URL
  runs(page: Int, perPage: Int, orderBy: DAGRunOrderBy): DAGRunPage!
}

type DAGPage {
  items: [DAG!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

type DAGRun {
  id: UUID!
  label: String
  externalId: String
  externalUrl: URL
  user: User
  config: JSON
  status: DAGRunStatus!
  executionDate: DateTime
  lastRefreshedAt: DateTime
  duration: Int
  progress: Int!
  triggerMode: DAGRunTrigger
  messages: [DAGRunMessage!]!
  logs: String
  outputs: [DAGRunOutput!]!
  isFavorite: Boolean!
}

type DAGRunMessage {
  message: String!
  priority: String!
  timestamp: DateTime
}

enum DAGRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

type DAGRunOutput {
  title: String!
  uri: String!
}

type DAGRunPage {
  items: [DAGRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

enum DAGRunStatus {
  success
  running
  failed
  queued
  stopped
  terminating
}

enum DAGRunTrigger {
  SCHEDULED
  MANUAL
}

type DAGTemplate {
  code: String!
  description: String
  sampleConfig: JSON
}

type Database {
  tables(page: Int, perPage: Int): DatabaseTablePage!
  table(name: String!): DatabaseTable
  credentials: DatabaseCredentials
}

type DatabaseCredentials {
  dbName: String!
  username: String!
  password: String!
  host: String!
  port: Int!
  url: String!
}

"""Represents a database table."""
type DatabaseTable {
  """The name of the table."""
  name: String!

  """The number of rows in the table."""
  count: Int

  """The columns of the table."""
  columns: [TableColumn!]!

  """A sample row from the table."""
  sample: JSON!

  """Retrieves a paginated list of rows from the table."""
  rows(
    """The column to order the rows by."""
    orderBy: String!

    """The direction to order the rows in."""
    direction: OrderByDirection!

    """The page number to retrieve."""
    page: Int!

    """The number of rows per page."""
    perPage: Int = 15
  ): TableRowsPage!
}

"""Represents a paginated list of database tables."""
type DatabaseTablePage {
  """The page number of the result."""
  pageNumber: Int!

  """The total number of pages."""
  totalPages: Int!

  """The total number of items."""
  totalItems: Int!

  """The tables in the current page."""
  items: [DatabaseTable!]!
}

"""
Dataset is a collection of files that are related to each other and are versioned.
"""
type Dataset implements MetadataObject {
  id: ID!
  slug: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User
  workspace: Workspace
  permissions: DatasetPermissions!
  versions(page: Int = 1, perPage: Int = 15): DatasetVersionPage!
  version(id: ID!): DatasetVersion
  latestVersion: DatasetVersion
  links(page: Int = 1, perPage: Int = 15): DatasetLinkPage!
  attributes: [MetadataAttribute!]!
  targetId: OpaqueID!
}

"""File sample for dataset file"""
type DatasetFileSample {
  sample: JSON
  status: FileSampleStatus!
  statusReason: String
}

"""A link of a dataset with a workspace."""
type DatasetLink {
  id: ID!
  isPinned: Boolean!
  createdAt: DateTime!
  createdBy: User
  dataset: Dataset!
  workspace: Workspace!
  permissions: DatasetLinkPermissions!
}

"""A page of dataset links."""
type DatasetLinkPage {
  totalPages: Int!
  totalItems: Int!
  pageNumber: Int!
  items: [DatasetLink!]!
}

"""Permissions of a dataset link."""
type DatasetLinkPermissions {
  """Permissions to delete the link between the workspace and the dataset"""
  delete: Boolean!

  """Permissions to pin the dataset for the workspace"""
  pin: Boolean!
}

"""A page of datasets."""
type DatasetPage {
  totalPages: Int!
  totalItems: Int!
  pageNumber: Int!
  items: [Dataset!]!
}

"""Permissions of a dataset."""
type DatasetPermissions {
  """Permissions to edit the dataset"""
  update: Boolean!

  """Permissions to delete the dataset"""
  delete: Boolean!

  """Permissions to create a new version of the dataset"""
  createVersion: Boolean!
}

"""
A version of a dataset. A version is a snapshot of the dataset at a point in time.
"""
type DatasetVersion implements MetadataObject {
  id: ID!
  name: String!
  changelog: String
  description: String @deprecated(reason: "use changelog instead")
  createdAt: DateTime!
  createdBy: User
  dataset: Dataset!
  permissions: DatasetVersionPermissions!
  fileByName(name: String!): DatasetVersionFile
  files(page: Int = 1, perPage: Int = 15): DatasetVersionFilePage!
  attributes: [MetadataAttribute!]!
  targetId: OpaqueID!
}

"""A file in a dataset version."""
type DatasetVersionFile implements MetadataObject {
  id: ID!
  uri: String!
  filename: String!
  createdAt: DateTime!
  createdBy: User
  contentType: String!
  size: BigInt!
  fileSample: DatasetFileSample
  properties: JSON
  attributes: [MetadataAttribute!]!
  targetId: OpaqueID!
  downloadUrl(attachment: Boolean): String
}

"""A page of dataset version files."""
type DatasetVersionFilePage {
  totalPages: Int!
  totalItems: Int!
  pageNumber: Int!
  items: [DatasetVersionFile!]!
}

"""A page of dataset versions."""
type DatasetVersionPage {
  totalPages: Int!
  totalItems: Int!
  pageNumber: Int!
  items: [DatasetVersion!]!
}

"""Permissions of a dataset version."""
type DatasetVersionPermissions {
  """Permissions to update the dataset version"""
  update: Boolean!

  """Permissions to delete the dataset version"""
  delete: Boolean!

  """Permissions to download the content of the dataset version"""
  download: Boolean!
}

scalar Date

scalar DateTime

"""Represents the error types for declining a workspace invitation."""
enum DeclineWorkspaceInvitationError {
  INVITATION_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for declining a workspace invitation."""
input DeclineWorkspaceInvitationInput {
  invitationId: UUID!
}

"""Represents the result of declining a workspace invitation."""
type DeclineWorkspaceInvitationResult {
  success: Boolean!
  invitation: WorkspaceInvitation
  errors: [DeclineWorkspaceInvitationError!]!
}

enum DeleteAccessmodAnalysisError {
  NOT_FOUND
  DELETE_FAILED
}

input DeleteAccessmodAnalysisInput {
  id: String!
}

type DeleteAccessmodAnalysisResult {
  success: Boolean!
  errors: [DeleteAccessmodAnalysisError!]!
}

enum DeleteAccessmodFilesetError {
  NOT_FOUND
  FILESET_IN_USE
}

input DeleteAccessmodFilesetInput {
  id: String!
}

type DeleteAccessmodFilesetResult {
  success: Boolean!
  errors: [DeleteAccessmodFilesetError!]!
}

enum DeleteAccessmodProjectError {
  NOT_FOUND
  PERMISSION_DENIED
}

input DeleteAccessmodProjectInput {
  id: String!
}

enum DeleteAccessmodProjectMemberError {
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input DeleteAccessmodProjectMemberInput {
  id: String!
}

type DeleteAccessmodProjectMemberResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectMemberError!]!
}

type DeleteAccessmodProjectResult {
  success: Boolean!
  errors: [DeleteAccessmodProjectError!]!
}

"""
Errors that can occur when deleting an object from a workspace's bucket.
"""
enum DeleteBucketObjectError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Input for deleting an object from a workspace's bucket."""
input DeleteBucketObjectInput {
  workspaceSlug: String!
  objectKey: String!
}

"""The result of deleting an object from a workspace's bucket."""
type DeleteBucketObjectResult {
  success: Boolean!
  errors: [DeleteBucketObjectError!]!
}

"""Represents the error types for deleting a connection."""
enum DeleteConnectionError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for deleting a connection."""
input DeleteConnectionInput {
  id: String!
}

"""Represents the result of deleting a connection."""
type DeleteConnectionResult {
  success: Boolean!
  errors: [DeleteConnectionError!]!
}

"""Errors that can occur when deleting a dataset."""
enum DeleteDatasetError {
  DATASET_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for deleting a dataset."""
input DeleteDatasetInput {
  id: ID!
}

"""Errors that can occur when deleting a dataset link."""
enum DeleteDatasetLinkError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Input for deleting a dataset link."""
input DeleteDatasetLinkInput {
  id: ID!
}

"""Result of deleting a dataset link."""
type DeleteDatasetLinkResult {
  success: Boolean!
  errors: [DeleteDatasetLinkError!]!
}

"""Result of deleting a dataset."""
type DeleteDatasetResult {
  success: Boolean!
  errors: [DeleteDatasetError!]!
}

"""Errors that can occur when deleting a dataset version."""
enum DeleteDatasetVersionError {
  VERSION_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for deleting a dataset version."""
input DeleteDatasetVersionInput {
  versionId: ID!
}

"""Result of deleting a dataset version."""
type DeleteDatasetVersionResult {
  success: Boolean!
  errors: [DeleteDatasetVersionError!]!
}

"""
The DeleteMembershipError enum represents the possible errors that can occur during the deleteMembership mutation.
"""
enum DeleteMembershipError {
  """
  Indicates that the user does not have permission to delete the membership.
  """
  PERMISSION_DENIED

  """Indicates that the membership was not found."""
  NOT_FOUND
}

"""
The DeleteMembershipInput type represents the input for the deleteMembership mutation.
"""
input DeleteMembershipInput {
  """The unique identifier of the membership to delete."""
  id: UUID!
}

"""
The DeleteMembershipResult type represents the result of the deleteMembership mutation.
"""
type DeleteMembershipResult {
  """Indicates whether the deleteMembership mutation was successful."""
  success: Boolean!

  """The list of errors that occurred during the deleteMembership mutation."""
  errors: [DeleteMembershipError!]!
}

"""Errors that can occur when deleting an attribute."""
enum DeleteMetadataAttributeError {
  PERMISSION_DENIED
  TARGET_NOT_FOUND
  METADATA_ATTRIBUTE_NOT_FOUND
}

"""Input to delete custom attribute"""
input DeleteMetadataAttributeInput {
  targetId: OpaqueID!
  key: String!
}

type DeleteMetadataAttributeResult {
  success: Boolean!
  errors: [DeleteMetadataAttributeError!]!
}

"""Represents the input for deleting a pipeline."""
input DeletePipelineInput {
  id: UUID!
}

"""Represents the input for deleting a pipeline recipient."""
input DeletePipelineRecipientInput {
  recipientId: UUID!
}

type DeletePipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
}

"""Represents the result of deleting a pipeline."""
type DeletePipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
}

enum DeletePipelineVersionError {
  PIPELINE_VERSION_NOT_FOUND
  PERMISSION_DENIED
  PIPELINE_NOT_FOUND
}

"""Represents the input for deleting a pipeline version."""
input DeletePipelineVersionInput {
  id: UUID!
}

"""Represents the result of deleting a pipeline version."""
type DeletePipelineVersionResult {
  success: Boolean!
  errors: [DeletePipelineVersionError!]!
}

"""
The DeleteTeamError enum represents the possible errors that can occur during the deleteTeam mutation.
"""
enum DeleteTeamError {
  """Indicates that the team was not found."""
  NOT_FOUND

  """Indicates that the user does not have permission to delete the team."""
  PERMISSION_DENIED
}

"""
The DeleteTeamInput type represents the input for the deleteTeam mutation.
"""
input DeleteTeamInput {
  """The unique identifier of the team to delete."""
  id: UUID!
}

"""
The DeleteTeamResult type represents the result of the deleteTeam mutation.
"""
type DeleteTeamResult {
  """Indicates whether the deleteTeam mutation was successful."""
  success: Boolean!

  """The list of errors that occurred during the deleteTeam mutation."""
  errors: [DeleteTeamError!]!
}

enum DeleteWorkspaceDatabaseTableError {
  PERMISSION_DENIED
  TABLE_NOT_FOUND
  WORKSPACE_NOT_FOUND
}

"""Represents the input for deleting a database table in a workspace."""
input DeleteWorkspaceDatabaseTableInput {
  workspaceSlug: String!
  table: String!
}

"""Represents the result of deleting a database table in a workspace."""
type DeleteWorkspaceDatabaseTableResult {
  success: Boolean!
  errors: [DeleteWorkspaceDatabaseTableError!]!
}

"""
Enum representing the possible errors that can occur when deleting a workspace.
"""
enum DeleteWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

"""Represents the input for deleting a workspace."""
input DeleteWorkspaceInput {
  slug: String!
}

"""Represents the error types for deleting a workspace invitation."""
enum DeleteWorkspaceInvitationError {
  INVITATION_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for deleting a workspace invitation."""
input DeleteWorkspaceInvitationInput {
  invitationId: UUID!
}

"""Represents the result of deleting a workspace invitation."""
type DeleteWorkspaceInvitationResult {
  success: Boolean!
  errors: [DeleteWorkspaceInvitationError!]!
}

"""
Enum representing the possible errors that can occur when deleting a workspace member.
"""
enum DeleteWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for deleting a workspace member."""
input DeleteWorkspaceMemberInput {
  membershipId: UUID!
}

"""Represents the result of deleting a workspace member."""
type DeleteWorkspaceMemberResult {
  success: Boolean!
  errors: [DeleteWorkspaceMemberError!]!
}

"""Represents the result of deleting a workspace."""
type DeleteWorkspaceResult {
  success: Boolean!
  errors: [DeleteWorkspaceError!]!
}

enum DenyAccessmodAccessRequestError {
  INVALID
}

input DenyAccessmodAccessRequestInput {
  id: String!
}

type DenyAccessmodAccessRequestResult {
  success: Boolean!
  errors: [DenyAccessmodAccessRequestError!]!
}

"""DHIS2 connection object"""
type DHIS2Connection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
  queryMetadata(type: String!, filter: String): DHIS2QueryResult!
}

enum DHIS2ConnectionError {
  CONNECTION_ERROR
  UNKNOWN_ERROR
}

"""DHIS2 metadata item"""
type DHIS2MetadataItem {
  id: String!
  name: String!
}

"""DHIS2 metadata query result"""
type DHIS2QueryResult {
  items: [DHIS2MetadataItem!]
  success: Boolean!
  error: DHIS2ConnectionError
}

"""
The DisableTwoFactorError enum represents the possible errors that can occur during the disableTwoFactor mutation.
"""
enum DisableTwoFactorError {
  INVALID_OTP
  NOT_ENABLED
}

"""
The DisableTwoFactorInput type represents the input for the disableTwoFactor mutation.
"""
input DisableTwoFactorInput {
  token: String!
}

"""
The DisableTwoFactorResult type represents the result of the disableTwoFactor mutation.
"""
type DisableTwoFactorResult {
  success: Boolean!
  errors: [DisableTwoFactorError!]
}

"""
The EnableTwoFactorError enum represents the possible errors that can occur during the enableTwoFactor mutation.
"""
enum EnableTwoFactorError {
  ALREADY_ENABLED
  EMAIL_MISMATCH
}

"""
The EnableTwoFactorInput type represents the input for the enableTwoFactor mutation.
"""
input EnableTwoFactorInput {
  email: String
}

"""
The EnableTwoFactorResult type represents the result of the enableTwoFactor mutation.
"""
type EnableTwoFactorResult {
  success: Boolean!
  verified: Boolean
  errors: [EnableTwoFactorError!]
}

"""The FeatureFlag type represents a feature flag in the system."""
type FeatureFlag {
  """The code of the feature flag."""
  code: String!

  """The configuration of the feature flag."""
  config: JSON!
}

"""Statuses that can occur when generating file sample"""
enum FileSampleStatus {
  PROCESSING
  FAILED
  FINISHED
}

"""GCS connection object"""
type GCSConnection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

"""
The GenerateChallengeError enum represents the possible errors that can occur during the generateChallenge mutation.
"""
enum GenerateChallengeError {
  DEVICE_NOT_FOUND
  CHALLENGE_ERROR
}

"""
The GenerateChallengeResult type represents the result of the generateChallenge mutation.
"""
type GenerateChallengeResult {
  success: Boolean!
  errors: [GenerateChallengeError!]
}

"""Input for creating un upload link for the file"""
input GenerateDatasetUploadUrlInput {
  versionId: ID!
  contentType: String!
  uri: String!
}

"""Result of creating an upload url"""
type GenerateDatasetUploadUrlResult {
  uploadUrl: String
  success: Boolean!
  errors: [CreateDatasetVersionFileError!]!
}

"""Possible errors when generating a new database password."""
enum GenerateNewDatabasePasswordError {
  """The user does not have permission to generate a new password."""
  PERMISSION_DENIED

  """The database was not found."""
  NOT_FOUND
}

"""Input for generating a new database password."""
input GenerateNewDatabasePasswordInput {
  """The slug of the workspace."""
  workspaceSlug: String!
}

"""The result of generating a new database password."""
type GenerateNewDatabasePasswordResult {
  """Indicates if the password generation was successful."""
  success: Boolean!

  """The errors that occurred during password generation."""
  errors: [GenerateNewDatabasePasswordError!]!

  """The workspace associated with the generated password."""
  workspace: Workspace
}

enum GeneratePipelineWebhookUrlError {
  PIPELINE_NOT_FOUND
  WEBHOOK_NOT_ENABLED
  PERMISSION_DENIED
}

input GeneratePipelineWebhookUrlInput {
  id: UUID!
}

type GeneratePipelineWebhookUrlResult {
  success: Boolean!
  errors: [GeneratePipelineWebhookUrlError!]!
  pipeline: Pipeline
}

"""Represents the error types for generating a workspace token."""
enum GenerateWorkspaceTokenError {
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for generating a workspace token."""
input GenerateWorkspaceTokenInput {
  slug: String!
}

"""Represents the result of generating a workspace token."""
type GenerateWorkspaceTokenResult {
  success: Boolean!
  token: String
  errors: [GenerateWorkspaceTokenError!]!
}

scalar Generic

"""Represents a generic output of a pipeline run."""
type GenericOutput {
  name: String
  type: String!
  uri: String!
}

"""IASO connection object"""
type IASOConnection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

"""Represents the input for inviting a member to a workspace."""
input InviteWorkspaceMemberInput {
  workspaceSlug: String!
  userEmail: String!
  role: WorkspaceMembershipRole!
}

"""Represents the result of inviting a member to a workspace."""
type InviteWorkspaceMemberResult {
  success: Boolean!
  errors: [InviteWorkspaceMembershipError!]!
  workspaceMembership: WorkspaceMembership
}

"""
Enum representing the possible errors that can occur when inviting a user to a workspace.
"""
enum InviteWorkspaceMembershipError {
  ALREADY_EXISTS
  PERMISSION_DENIED
  USER_NOT_FOUND
  WORKSPACE_NOT_FOUND
}

"""Represents the error types for joining a workspace."""
enum JoinWorkspaceError {
  ALREADY_EXISTS
  ALREADY_ACCEPTED
  PERMISSION_DENIED
  INVITATION_NOT_FOUND
}

"""Represents the input for joining a workspace."""
input JoinWorkspaceInput {
  invitationId: UUID!
}

"""Represents the result of joining a workspace."""
type JoinWorkspaceResult {
  success: Boolean!
  workspace: Workspace
  invitation: WorkspaceInvitation
  errors: [JoinWorkspaceError!]!
}

scalar JSON

enum LaunchAccessmodAnalysisError {
  LAUNCH_FAILED
}

input LaunchAccessmodAnalysisInput {
  id: String!
}

type LaunchAccessmodAnalysisResult {
  success: Boolean!
  analysis: AccessmodAnalysis
  errors: [LaunchAccessmodAnalysisError!]!
}

enum LaunchNotebookServerError {
  NOT_FOUND
  PERMISSION_DENIED
}

input LaunchNotebookServerInput {
  workspaceSlug: String!
}

type LaunchNotebookServerResult {
  success: Boolean!
  server: NotebookServer
  errors: [LaunchNotebookServerError!]!
}

"""Errors that can occur when linking a dataset with a workspace."""
enum LinkDatasetError {
  DATASET_NOT_FOUND
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
  ALREADY_LINKED
}

"""Input for linking a dataset with a workspace."""
input LinkDatasetInput {
  datasetId: ID!
  workspaceSlug: String!
}

"""Result of linking a dataset with a workspace."""
type LinkDatasetResult {
  link: DatasetLink
  success: Boolean!
  errors: [LinkDatasetError!]!
}

"""
The LoginError enum represents the possible errors that can occur during the login process.
"""
enum LoginError {
  """Indicates that an OTP (one-time password) is required for login."""
  OTP_REQUIRED

  """Indicates that the provided credentials are invalid."""
  INVALID_CREDENTIALS

  """Indicates that the provided OTP is invalid."""
  INVALID_OTP
}

"""The LoginInput type represents the input for the login mutation."""
input LoginInput {
  """The email address of the user."""
  email: String!

  """The password of the user."""
  password: String!

  """The token for two-factor authentication."""
  token: String
}

"""The LoginResult type represents the result of the login mutation."""
type LoginResult {
  """Indicates whether the login was successful."""
  success: Boolean!

  """The list of errors that occurred during the login process."""
  errors: [LoginError!]
}

"""The LogoutResult type represents the result of the logout mutation."""
type LogoutResult {
  """Indicates whether the logout was successful."""
  success: Boolean!
}

"""Represents the input for logging a pipeline message."""
input LogPipelineMessageInput {
  priority: MessagePriority!
  message: String!
}

"""Represents the result of logging a pipeline message."""
type LogPipelineMessageResult {
  success: Boolean!
  errors: [PipelineError!]!
}

"""The Me type represents the currently authenticated user."""
type Me {
  """The user object representing the currently authenticated user."""
  user: User

  """The feature flags assigned to the currently authenticated user."""
  features: [FeatureFlag!]!

  """The permissions assigned to the currently authenticated user."""
  permissions: MePermissions!
  hasTwoFactorEnabled: Boolean!
}

"""The Membership type represents a membership of a user in a team."""
type Membership {
  """The unique identifier of the membership."""
  id: UUID!

  """The user associated with the membership."""
  user: User!

  """The team associated with the membership."""
  team: Team!

  """The permissions assigned to the membership."""
  permissions: MembershipPermissions!

  """The role of the user in the team."""
  role: MembershipRole!

  """The date when the membership was created."""
  createdAt: DateTime!

  """The date when the membership was last updated."""
  updatedAt: DateTime!
}

"""The MembershipPage type represents a paginated list of memberships."""
type MembershipPage {
  """The current page number."""
  pageNumber: Int!

  """The total number of pages."""
  totalPages: Int!

  """The total number of items."""
  totalItems: Int!

  """The list of memberships on the current page."""
  items: [Membership!]!
}

"""
The MembershipPermissions type represents the permissions of a membership.
"""
type MembershipPermissions {
  """Indicates whether the user has permission to update the membership."""
  update: Boolean!

  """Indicates whether the user has permission to delete the membership."""
  delete: Boolean!
}

"""The MembershipRole enum represents the role of a user in a team."""
enum MembershipRole {
  """Indicates that the user is an admin of the team."""
  ADMIN

  """Indicates that the user is a regular member of the team."""
  REGULAR
}

"""
The MePermissions type represents the permissions of the currently authenticated user.
"""
type MePermissions {
  """Indicates whether the user has permission to create a team."""
  createTeam: Boolean!

  """Indicates whether the user has permission to access the admin panel."""
  adminPanel: Boolean!

  """Indicates whether the user has superuser privileges."""
  superUser: Boolean!
  createAccessmodProject: Boolean!
  manageAccessmodAccessRequests: Boolean!
  createWorkspace: Boolean!
}

"""An enumeration representing the priority levels of a message."""
enum MessagePriority {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

"""Generic metadata attribute"""
type MetadataAttribute {
  id: UUID!
  key: String!
  label: String
  value: JSON
  system: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User
  updatedBy: User
}

"""Interface for type implementing metadata"""
interface MetadataObject {
  targetId: OpaqueID!
  attributes: [MetadataAttribute!]!
}

scalar MovingSpeeds

type Mutation {
  """Registers a new user."""
  register(input: RegisterInput!): RegisterResult!

  """Authenticates a user and generates an access token."""
  login(input: LoginInput!): LoginResult!

  """Logs out the currently authenticated user."""
  logout: LogoutResult!

  """Sends a password reset email to the user."""
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult!

  """Sets a new password for the user."""
  setPassword(input: SetPasswordInput!): SetPasswordResult!

  """Updates the profile of the currently authenticated user."""
  updateUser(input: UpdateUserInput!): UpdateUserResult!

  """Verifies a device for two-factor authentication."""
  verifyDevice(input: VerifyDeviceInput!): VerifyDeviceResult!

  """Generates a challenge for two-factor authentication."""
  generateChallenge: GenerateChallengeResult!

  """
  Enables two-factor authentication for the currently authenticated user.
  """
  enableTwoFactor(input: EnableTwoFactorInput): EnableTwoFactorResult!

  """
  Disables two-factor authentication for the currently authenticated user.
  """
  disableTwoFactor(input: DisableTwoFactorInput): DisableTwoFactorResult!
  createTeam(input: CreateTeamInput!): CreateTeamResult!
  updateTeam(input: UpdateTeamInput!): UpdateTeamResult!
  deleteTeam(input: DeleteTeamInput!): DeleteTeamResult!
  createMembership(input: CreateMembershipInput!): CreateMembershipResult!
  updateMembership(input: UpdateMembershipInput!): UpdateMembershipResult!
  deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult!
  runDAG(input: RunDAGInput!): RunDAGResult!
  updateDAG(input: UpdateDAGInput!): UpdateDAGResult!
  prepareDownloadURL(input: PrepareDownloadURLInput!): PrepareDownloadURLResult
  setDAGRunFavorite(input: SetDAGRunFavoriteInput!): SetDAGRunFavoriteResult
  createAccessmodProject(input: CreateAccessmodProjectInput!): CreateAccessmodProjectResult!
  updateAccessmodProject(input: UpdateAccessmodProjectInput!): UpdateAccessmodProjectResult!
  deleteAccessmodProject(input: DeleteAccessmodProjectInput!): DeleteAccessmodProjectResult!
  createAccessmodProjectMember(input: CreateAccessmodProjectMemberInput!): CreateAccessmodProjectMemberResult!
  updateAccessmodProjectMember(input: UpdateAccessmodProjectMemberInput!): UpdateAccessmodProjectMemberResult!
  deleteAccessmodProjectMember(input: DeleteAccessmodProjectMemberInput!): DeleteAccessmodProjectMemberResult!
  createAccessmodFileset(input: CreateAccessmodFilesetInput!): CreateAccessmodFilesetResult!
  updateAccessmodFileset(input: UpdateAccessmodFilesetInput!): UpdateAccessmodFilesetResult!
  deleteAccessmodFileset(input: DeleteAccessmodFilesetInput!): DeleteAccessmodFilesetResult!
  prepareAccessmodFileUpload(input: PrepareAccessmodFileUploadInput!): PrepareAccessmodFileUploadResult!
  prepareAccessmodFileDownload(input: PrepareAccessmodFileDownloadInput!): PrepareAccessmodFileDownloadResult!
  prepareAccessmodFilesetVisualizationDownload(input: PrepareAccessmodFilesetVisualizationDownloadInput!): PrepareAccessmodFilesetVisualizationDownloadResult!
  createAccessmodFile(input: CreateAccessmodFileInput!): CreateAccessmodFileResult!
  createAccessmodAccessibilityAnalysis(input: CreateAccessmodAccessibilityAnalysisInput): CreateAccessmodAccessibilityAnalysisResult!
  createAccessmodZonalStatistics(input: CreateAccessmodZonalStatisticsInput): CreateAccessmodZonalStatisticsResult!
  updateAccessmodAccessibilityAnalysis(input: UpdateAccessmodAccessibilityAnalysisInput): UpdateAccessmodAccessibilityAnalysisResult!
  updateAccessmodZonalStatistics(input: UpdateAccessmodZonalStatisticsInput): UpdateAccessmodZonalStatisticsResult!
  launchAccessmodAnalysis(input: LaunchAccessmodAnalysisInput): LaunchAccessmodAnalysisResult!
  deleteAccessmodAnalysis(input: DeleteAccessmodAnalysisInput): DeleteAccessmodAnalysisResult!
  requestAccessmodAccess(input: RequestAccessmodAccessInput!): RequestAccessmodAccessInputResult!
  approveAccessmodAccessRequest(input: ApproveAccessmodAccessRequestInput!): ApproveAccessmodAccessRequestResult!
  denyAccessmodAccessRequest(input: DenyAccessmodAccessRequestInput!): DenyAccessmodAccessRequestResult!
  launchNotebookServer(input: LaunchNotebookServerInput!): LaunchNotebookServerResult!

  """Creates a new pipeline."""
  createPipeline(input: CreatePipelineInput!): CreatePipelineResult!

  """Updates an existing pipeline."""
  updatePipeline(input: UpdatePipelineInput!): UpdatePipelineResult!

  """Deletes a pipeline."""
  deletePipeline(input: DeletePipelineInput): DeletePipelineResult!

  """Runs a pipeline."""
  runPipeline(input: RunPipelineInput): RunPipelineResult!

  """Stops a pipeline."""
  stopPipeline(input: StopPipelineInput!): StopPipelineResult!

  """Retrieves a token for a pipeline."""
  pipelineToken(input: PipelineTokenInput!): PipelineTokenResult!

  """Uploads a pipeline."""
  uploadPipeline(input: UploadPipelineInput!): UploadPipelineResult!

  """Updates a pipeline version."""
  updatePipelineVersion(input: UpdatePipelineVersionInput!): UpdatePipelineVersionResult!

  """Logs a message for a pipeline."""
  logPipelineMessage(input: LogPipelineMessageInput!): LogPipelineMessageResult!

  """Updates the progress of a pipeline."""
  updatePipelineProgress(input: UpdatePipelineProgressInput!): UpdatePipelineProgressResult!

  """Adds an output to a pipeline."""
  addPipelineOutput(input: AddPipelineOutputInput!): AddPipelineOutputResult!

  """Deletes a pipeline version."""
  deletePipelineVersion(input: DeletePipelineVersionInput!): DeletePipelineVersionResult!

  """Generates a webhook URL for a pipeline."""
  generatePipelineWebhookUrl(input: GeneratePipelineWebhookUrlInput!): GeneratePipelineWebhookUrlResult!

  """Adds a recipient to a pipeline."""
  addPipelineRecipient(input: CreatePipelineRecipientInput!): AddPipelineRecipientResult!

  """Updates a pipeline recipient."""
  updatePipelineRecipient(input: UpdatePipelineRecipientInput!): UpdatePipelineRecipientResult!

  """Deletes a pipeline recipient."""
  deletePipelineRecipient(input: DeletePipelineRecipientInput!): DeletePipelineRecipientResult!

  """Upgrades a pipeline version using the latest template version."""
  upgradePipelineVersionFromTemplate(input: UpgradePipelineVersionFromTemplateInput!): UpgradePipelineVersionFromTemplateResult!

  """Creates a new pipeline template version."""
  createPipelineTemplateVersion(input: CreatePipelineTemplateVersionInput!): CreatePipelineTemplateVersionResult!
  createPipelineFromTemplateVersion(input: CreatePipelineFromTemplateVersionInput!): CreatePipelineFromTemplateVersionResult!
  deletePipelineTemplate(input: DeletePipelineTemplateInput): DeletePipelineTemplateResult! @loginRequired
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspaceResult!
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspaceResult!
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspaceResult!
  archiveWorkspace(input: ArchiveWorkspaceInput!): ArchiveWorkspaceResult!
  inviteWorkspaceMember(input: InviteWorkspaceMemberInput!): InviteWorkspaceMemberResult!
  updateWorkspaceMember(input: UpdateWorkspaceMemberInput!): UpdateWorkspaceMemberResult!
  deleteWorkspaceMember(input: DeleteWorkspaceMemberInput!): DeleteWorkspaceMemberResult!
  generateWorkspaceToken(input: GenerateWorkspaceTokenInput!): GenerateWorkspaceTokenResult!
  joinWorkspace(input: JoinWorkspaceInput!): JoinWorkspaceResult!
  declineWorkspaceInvitation(input: DeclineWorkspaceInvitationInput!): DeclineWorkspaceInvitationResult!
  resendWorkspaceInvitation(input: ResendWorkspaceInvitationInput!): ResendWorkspaceInvitationResult!
  deleteWorkspaceInvitation(input: DeleteWorkspaceInvitationInput!): DeleteWorkspaceInvitationResult!
  deleteWorkspaceDatabaseTable(input: DeleteWorkspaceDatabaseTableInput!): DeleteWorkspaceDatabaseTableResult
  createConnection(input: CreateConnectionInput!): CreateConnectionResult!
  updateConnection(input: UpdateConnectionInput!): UpdateConnectionResult!
  deleteConnection(input: DeleteConnectionInput!): DeleteConnectionResult!

  """Set a custom metadata attribute to an object instance"""
  setMetadataAttribute(input: SetMetadataAttributeInput!): SetMetadataAttributeResult!

  """Delete an metadata attribute from an object instance"""
  deleteMetadataAttribute(input: DeleteMetadataAttributeInput!): DeleteMetadataAttributeResult!

  """Generates a new password for a database."""
  generateNewDatabasePassword(input: GenerateNewDatabasePasswordInput!): GenerateNewDatabasePasswordResult!

  """Delete an object from a workspace's bucket."""
  deleteBucketObject(input: DeleteBucketObjectInput!): DeleteBucketObjectResult!

  """Prepare to download an object from a workspace's bucket."""
  prepareObjectDownload(input: PrepareObjectDownloadInput!): PrepareObjectDownloadResult!

  """Prepare to upload an object to a workspace's bucket."""
  prepareObjectUpload(input: PrepareObjectUploadInput!): PrepareObjectUploadResult!

  """Create a folder in a workspace's bucket."""
  createBucketFolder(input: CreateBucketFolderInput!): CreateBucketFolderResult!

  """Create a new dataset."""
  createDataset(input: CreateDatasetInput!): CreateDatasetResult!

  """Update a dataset."""
  updateDataset(input: UpdateDatasetInput!): UpdateDatasetResult!

  """Delete a dataset."""
  deleteDataset(input: DeleteDatasetInput!): DeleteDatasetResult!

  """Create a new dataset version."""
  createDatasetVersion(input: CreateDatasetVersionInput!): CreateDatasetVersionResult!

  """Update a dataset version."""
  updateDatasetVersion(input: UpdateDatasetVersionInput!): UpdateDatasetVersionResult!

  """Delete a dataset version."""
  deleteDatasetVersion(input: DeleteDatasetVersionInput!): DeleteDatasetVersionResult!

  """Create dataset version file upload url."""
  generateDatasetUploadUrl(input: GenerateDatasetUploadUrlInput!): GenerateDatasetUploadUrlResult!

  """Create a new file in a dataset version."""
  createDatasetVersionFile(input: CreateDatasetVersionFileInput!): CreateDatasetVersionFileResult!

  """Prepare to download a file in a dataset version."""
  prepareVersionFileDownload(input: PrepareVersionFileDownloadInput!): PrepareVersionFileDownloadResult!

  """Link a dataset with a workspace."""
  linkDataset(input: LinkDatasetInput!): LinkDatasetResult!

  """Delete a dataset link."""
  deleteDatasetLink(input: DeleteDatasetLinkInput!): DeleteDatasetLinkResult!

  """Pin or unpin a dataset for a workspace."""
  pinDataset(input: PinDatasetInput!): PinDatasetResult!

  """Updates an existing template."""
  updatePipelineTemplate(input: UpdateTemplateInput!): UpdateTemplateResult!

  updateTemplateVersion(input: UpdateTemplateVersionInput!): UpdateTemplateVersionResult!
  deleteTemplateVersion(input: DeleteTemplateVersionInput!): DeleteTemplateVersionResult!
}

type NotebookServer {
  name: String!
  url: String!
  ready: Boolean!
}

scalar OpaqueID

"""The direction in which to order a list of items."""
enum OrderByDirection {
  ASC
  DESC
}

"""The Organization type represents an organization in the system."""
type Organization {
  """The unique identifier of the organization."""
  id: UUID!

  """The name of the organization."""
  name: String!

  """The type of the organization."""
  type: String!

  """The URL of the organization."""
  url: String!

  """The contact information of the organization."""
  contactInfo: String!
}

"""
The OrganizationInput type represents the input for creating or updating an organization.
"""
input OrganizationInput {
  """The unique identifier of the organization."""
  id: UUID!

  """The updated name of the organization."""
  name: String

  """The updated type of the organization."""
  type: String

  """The updated URL of the organization."""
  url: String

  """The updated contact information of the organization."""
  contactInfo: String
}

"""Represents an input parameter of a pipeline."""
input ParameterInput {
  code: String!
  type: String!
  name: String
  multiple: Boolean
  required: Boolean
  default: Generic
  help: String
  choices: [Generic!]
}

"""Enum representing the type of a parameter."""
enum ParameterType {
  bool
  int
  str
  float
  dataset
  dhis2
  postgresql
  iaso
  s3
  gcs
  custom
}

"""The PermissionMode enum represents the mode of permissions for a team."""
enum PermissionMode {
  """Indicates that the user is the owner of the team."""
  OWNER

  """Indicates that the user is an editor of the team."""
  EDITOR

  """Indicates that the user is a viewer of the team."""
  VIEWER
}

"""
Errors that can occur when pinning or unpinning a dataset for a workspace.
"""
enum PinDatasetError {
  LINK_NOT_FOUND
  WORKSPACE_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for pinning or unpinning a dataset for a workspace."""
input PinDatasetInput {
  linkId: ID!
  pinned: Boolean!
}

"""Result of pinning or unpinning a dataset for a workspace."""
type PinDatasetResult {
  link: DatasetLink
  success: Boolean!
  errors: [PinDatasetError!]!
}

"""Represents a pipeline."""
type Pipeline {
  id: UUID!
  name: String
  code: String!
  permissions: PipelinePermissions!
  workspace: Workspace!
  config: JSON!
  schedule: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  currentVersion: PipelineVersion
  runs(page: Int, perPage: Int, orderBy: PipelineRunOrderBy): PipelineRunPage!
  versions(page: Int, perPage: Int): PipelineVersionPage!
  recipients: [PipelineRecipient!]!
  webhookEnabled: Boolean!
  webhookUrl: String
  type: PipelineType!
  notebookPath: String
  template: PipelineTemplate
  sourceTemplate: PipelineTemplate
  hasNewTemplateVersions: Boolean!
  newTemplateVersions: [PipelineTemplateVersion!]
}

enum PipelineError {
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  PIPELINE_DOES_NOT_SUPPORT_PARAMETERS
  WORKSPACE_NOT_FOUND
  PIPELINE_ALREADY_EXISTS
  INVALID_CONFIG
  PIPELINE_ALREADY_COMPLETED
  PIPELINE_ALREADY_STOPPED
  INVALID_TIMEOUT_VALUE
  PERMISSION_DENIED
  FILE_NOT_FOUND
  TABLE_NOT_FOUND
  CANNOT_UPDATE_NOTEBOOK_PIPELINE
  DUPLICATE_PIPELINE_VERSION_NAME
}

"""Represents the notification level for a pipeline recipient."""
enum PipelineNotificationLevel {
  ALL
  ERROR
}

"""Represents a parameter of a pipeline."""
type PipelineParameter {
  code: String!
  name: String!
  type: ParameterType!
  multiple: Boolean!
  required: Boolean!
  default: Generic
  help: String
  choices: [Generic!]
}

"""Represents the permissions for a pipeline."""
type PipelinePermissions {
  update: Boolean!
  delete: Boolean!
  run: Boolean!
  schedule: Boolean!
  createVersion: Boolean!
  stopPipeline: Boolean!
  createTemplateVersion: Boolean!
}

"""Represents a recipient of a pipeline."""
type PipelineRecipient {
  id: UUID!
  user: User!
  pipeline: Pipeline!
  notificationLevel: PipelineNotificationLevel!
}

enum PipelineRecipientError {
  PIPELINE_NOT_FOUND
  USER_NOT_FOUND
  RECIPIENT_NOT_FOUND
  PERMISSION_DENIED
  ALREADY_EXISTS
}

"""Represents a pipeline run."""
type PipelineRun {
  id: UUID!
  run_id: UUID!
  user: User
  pipeline: Pipeline!
  version: PipelineVersion
  config: JSON!
  status: PipelineRunStatus!
  executionDate: DateTime
  duration: Int
  progress: Int!
  triggerMode: PipelineRunTrigger
  messages: [PipelineRunMessage!]!
  logs: String
  outputs: [PipelineRunOutput!]!
  code: String!
  sendMailNotifications: Boolean!
  enableDebugLogs: Boolean!
  timeout: Int
  datasetVersions: [DatasetVersion!]!
  stoppedBy: User
}

"""Represents a message associated with a pipeline run."""
type PipelineRunMessage {
  message: String!
  priority: MessagePriority!
  timestamp: DateTime
}

"""Enum representing the possible orderings for pipeline runs."""
enum PipelineRunOrderBy {
  EXECUTION_DATE_DESC
  EXECUTION_DATE_ASC
}

"""
Represents an output of a pipeline run, which can be either a BucketObject, GenericOutput, or DatabaseTable.
"""
union PipelineRunOutput = BucketObject | GenericOutput | DatabaseTable

"""Represents a page of pipeline runs."""
type PipelineRunPage {
  items: [PipelineRun!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

"""Enum representing the status of a pipeline run."""
enum PipelineRunStatus {
  success
  running
  failed
  queued
  stopped
  terminating
}

enum PipelineRunTrigger {
  scheduled
  manual
  webhook
}

"""Represents a page of pipelines."""
type PipelinesPage {
  items: [Pipeline!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

"""Represents a pipeline template."""
type PipelineTemplate {
  id: UUID!
  name: String!
  code: String!
  description: String
  config: String
  versions(page: Int, perPage: Int): TemplateVersionPage!
  currentVersion: PipelineTemplateVersion
  sourcePipeline: Pipeline
  permissions: PipelineTemplatePermissions!
}

"""Represents paged result of fetching pipeline templates."""
type PipelineTemplatePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [PipelineTemplate!]!
}

"""Represents the permissions for a pipeline template."""
type PipelineTemplatePermissions {
  delete: Boolean!
  update: Boolean!
}

"""
Represents a page of template versions.
"""
type TemplateVersionPage {
  items: [PipelineTemplateVersion!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

"""Represents a version of a pipeline template."""
type PipelineTemplateVersion {
  id: UUID!
  versionNumber: Int!
  changelog: String
  createdAt: DateTime!
  template: PipelineTemplate!
  user: User
  permissions: PipelineTemplateVersionPermissions!
  isLatestVersion: Boolean!
}

"""Represents the permissions for a pipeline template version."""
type PipelineTemplateVersionPermissions {
  update: Boolean!
  delete: Boolean!
}

"""Represents the input for retrieving a pipeline token."""
input PipelineTokenInput {
  workspaceSlug: String!
  pipelineCode: String!
}

"""Represents the result of retrieving a pipeline token."""
type PipelineTokenResult {
  success: Boolean!
  errors: [PipelineError!]!
  token: String
}

"""Represents the type of a pipeline."""
enum PipelineType {
  zipFile
  notebook
}

"""Represents a version of a pipeline."""
type PipelineVersion {
  id: UUID!
  user: User
  pipeline: Pipeline!
  name: String
  number: Int @deprecated(reason: "Use 'versionNumber' instead")
  versionNumber: Int!
  versionName: String!
  description: String
  externalLink: URL
  createdAt: DateTime!
  parameters: [PipelineParameter!]!
  isLatestVersion: Boolean!
  zipfile: String!
  timeout: Int
  permissions: PipelineVersionPermissions!
  config: JSON
  templateVersion: PipelineTemplateVersion
}

"""Represents a page of pipeline versions."""
type PipelineVersionPage {
  items: [PipelineVersion!]!
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
}

"""Represents the permissions for a pipeline version."""
type PipelineVersionPermissions {
  update: Boolean!
  delete: Boolean!
}

"""PostgreSQL connection object"""
type PostgreSQLConnection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

input PrepareAccessmodFileDownloadInput {
  fileId: String!
}

type PrepareAccessmodFileDownloadResult {
  success: Boolean!
  downloadUrl: String
}

input PrepareAccessmodFilesetVisualizationDownloadInput {
  id: String!
}

type PrepareAccessmodFilesetVisualizationDownloadResult {
  success: Boolean!
  url: String
}

input PrepareAccessmodFileUploadInput {
  filesetId: String!
  mimeType: String!
}

type PrepareAccessmodFileUploadResult {
  success: Boolean!
  uploadUrl: String
  fileUri: String
}

input PrepareDownloadURLInput {
  uri: URL!
}

type PrepareDownloadURLResult {
  success: Boolean!
  url: URL
}

"""
Errors that can occur when preparing to download an object from a workspace's bucket.
"""
enum PrepareObjectDownloadError {
  NOT_FOUND
  PERMISSION_DENIED
}

input PrepareObjectDownloadInput {
  workspaceSlug: String!
  objectKey: String!
}

"""
The result of preparing to download an object from a workspace's bucket.
"""
type PrepareObjectDownloadResult {
  success: Boolean!
  downloadUrl: URL
  errors: [PrepareObjectDownloadError!]!
}

"""
Errors that can occur when preparing to upload an object to a workspace's bucket.
"""
enum PrepareObjectUploadError {
  PERMISSION_DENIED
}

"""
Input for preparing to upload an object to a workspace's bucket.
The `contentType` 
"""
input PrepareObjectUploadInput {
  workspaceSlug: String!
  objectKey: String!
  contentType: String
}

"""
The result of preparing to upload an object to a workspace's bucket. It contains
a URL that can be used to upload the object using a PUT request.
"""
type PrepareObjectUploadResult {
  """
  Url to upload the object to. The contentType passed with the PUT request should match the one passed in the input.
  """
  uploadUrl: URL
  success: Boolean!
  errors: [PrepareObjectUploadError!]!
}

"""Errors that can occur when preparing a dataset version file download."""
enum PrepareVersionFileDownloadError {
  FILE_NOT_FOUND
  FILE_NOT_UPLOADED
  PERMISSION_DENIED
}

"""Input for preparing a dataset version file download."""
input PrepareVersionFileDownloadInput {
  fileId: ID!
}

"""Result of preparing a dataset version file download."""
type PrepareVersionFileDownloadResult {
  downloadUrl: String
  success: Boolean!
  errors: [PrepareVersionFileDownloadError!]!
}

type Query {
  """Retrieves the currently authenticated user."""
  me: Me!
  team(id: UUID!): Team
  teams(term: String, page: Int, perPage: Int): TeamPage!

  """Retrieves a list of organizations."""
  organizations: [Organization!]!
  dags(page: Int, perPage: Int): DAGPage!
  dag(id: UUID!): DAG
  dagRun(id: UUID!): DAGRun
  accessmodProject(id: String): AccessmodProject
  accessmodProjects(term: String, countries: [String!], teams: [String!], page: Int, perPage: Int, orderBy: AccessmodProjectOrder): AccessmodProjectPage!
  accessmodFileset(id: String): AccessmodFileset
  accessmodFilesets(projectId: String!, roleId: String, term: String, mode: AccessmodFilesetMode, page: Int, perPage: Int): AccessmodFilesetPage!
  accessmodFilesetRole(id: String!): AccessmodFilesetRole
  accessmodFilesetRoles: [AccessmodFilesetRole!]!
  accessmodAnalysis(id: String): AccessmodAnalysis
  accessmodAnalyses(projectId: String!, page: Int, perPage: Int): AccessmodAnalysisPage!
  accessmodAccessRequests(page: Int, perPage: Int): AccessmodAccessRequestPage!
  country(code: String, alpha3: String): Country
  boundaries(country_code: String!, level: String!): [WHOBoundary!]!
  countries: [Country!]!
  notebooksUrl: URL!

  """Retrieves a page of pipelines."""
  pipelines(workspaceSlug: String, page: Int, perPage: Int): PipelinesPage!

  """Retrieves a pipeline by ID."""
  pipeline(id: UUID!): Pipeline

  """Retrieves a pipeline version by ID."""
  pipelineVersion(id: UUID!): PipelineVersion

  """Retrieves a pipeline by workspace slug and code."""
  pipelineByCode(workspaceSlug: String!, code: String!): Pipeline
  """Retrieves a template by code."""
  templateByCode(code: String!): PipelineTemplate

  """Retrieves a pipeline run by ID."""
  pipelineRun(id: UUID!): PipelineRun
  pipelineTemplates(page: Int = 1, perPage: Int = 15, search: String, workspaceSlug: String): PipelineTemplatePage!
  workspace(slug: String!): Workspace
  workspaces(query: String, page: Int, perPage: Int): WorkspacePage!
  pendingWorkspaceInvitations(page: Int! = 1, perPage: Int = 10): WorkspaceInvitationPage!
  databaseTable(id: String!): DatabaseTable
  connection(id: UUID!): Connection
  connectionBySlug(workspaceSlug: String!, connectionSlug: String!): Connection
  metadataAttributes(targetId: OpaqueID!): [MetadataAttribute]!

  """Retrieves the configuration of the system."""
  config: Config!

  """Get a dataset by its ID."""
  dataset(id: ID!): Dataset

  """Get a dataset by its slug."""
  datasetVersion(id: ID!): DatasetVersion

  """Get a dataset file by its id """
  datasetVersionFile(id: ID!): DatasetVersionFile

  """Get a dataset link by its id."""
  datasetLink(id: ID!): DatasetLink

  """Get a dataset link by its slug."""
  datasetLinkBySlug(workspaceSlug: String!, datasetSlug: String!): DatasetLink

  """Search datasets."""
  datasets(query: String, page: Int = 1, perPage: Int = 15): DatasetPage!
}

"""
The RegisterError enum represents the possible errors that can occur during the register mutation.
"""
enum RegisterError {
  """Indicates that the user is already logged in."""
  ALREADY_LOGGED_IN

  """Indicates that the email address is already taken."""
  EMAIL_TAKEN

  """Indicates that the invitation token is invalid."""
  INVALID_TOKEN

  """Indicates that the provided passwords do not match."""
  PASSWORD_MISMATCH

  """Indicates that the provided password is invalid."""
  INVALID_PASSWORD
}

"""The RegisterInput type represents the input for the register mutation."""
input RegisterInput {
  """The first password for registration."""
  password1: String!

  """The second password for registration (confirmation)."""
  password2: String!

  """The first name of the user."""
  firstName: String!

  """The last name of the user."""
  lastName: String!

  """The invitation token for registration."""
  invitationToken: String!
}

"""
The RegisterResult type represents the result of the register mutation.
"""
type RegisterResult {
  """Indicates whether the registration was successful."""
  success: Boolean!

  """The list of errors that occurred during the registration process."""
  errors: [RegisterError!]
}

enum RequestAccessmodAccessError {
  ALREADY_EXISTS
  MUST_ACCEPT_TOS
  INVALID
}

input RequestAccessmodAccessInput {
  firstName: String!
  lastName: String!
  email: String!
  acceptTos: Boolean!
}

type RequestAccessmodAccessInputResult {
  success: Boolean!
  errors: [RequestAccessmodAccessError!]!
}

"""Represents the error types for resending a workspace invitation."""
enum ResendWorkspaceInvitationError {
  INVITATION_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for resending a workspace invitation."""
input ResendWorkspaceInvitationInput {
  invitationId: UUID!
}

"""Represents the result of resending a workspace invitation."""
type ResendWorkspaceInvitationResult {
  success: Boolean!
  errors: [ResendWorkspaceInvitationError!]!
}

"""
The ResetPasswordInput type represents the input for the resetPassword mutation.
"""
input ResetPasswordInput {
  """The email address of the user."""
  email: String!
}

"""
The ResetPasswordResult type represents the result of the resetPassword mutation.
"""
type ResetPasswordResult {
  """Indicates whether the password reset was successful."""
  success: Boolean!
}

enum RunDAGError {
  DAG_NOT_FOUND
  INVALID_CONFIG
}

input RunDAGInput {
  dagId: UUID!
  config: JSON!
}

type RunDAGResult {
  success: Boolean!
  errors: [RunDAGError!]!
  dagRun: DAGRun
  dag: DAG
}

"""Represents the input for running a pipeline."""
input RunPipelineInput {
  id: UUID!
  versionId: UUID
  config: JSON!
  sendMailNotifications: Boolean
  enableDebugLogs: Boolean
}

"""Represents the result of running a pipeline."""
type RunPipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
  run: PipelineRun
}

type S3Bucket {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""S3 connection object"""
type S3Connection implements Connection {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  type: ConnectionType!
  user: User
  fields: [ConnectionField!]!
  permissions: ConnectionPermissions!
}

type S3Object {
  id: String!
  bucket: S3Bucket!
  filename: String!
  key: String!
  parentKey: String!
  size: Int!
  storageClass: String!
  type: String!
  lastModified: DateTime!
  etag: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type S3ObjectPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [S3Object!]!
}

enum SetDAGRunFavoriteError {
  NOT_FOUND
  INVALID
  MISSING_LABEL
}

input SetDAGRunFavoriteInput {
  id: UUID!
  label: String
  isFavorite: Boolean!
}

type SetDAGRunFavoriteResult {
  success: Boolean!
  errors: [SetDAGRunFavoriteError!]!
  dagRun: DAGRun
}

"""Errors that can occur when setting an attribute."""
enum SetMetadataAttributeError {
  PERMISSION_DENIED
  TARGET_NOT_FOUND
}

"""Input to set a custom attribute, empty field for value is accepted"""
input SetMetadataAttributeInput {
  targetId: OpaqueID!
  key: String!
  value: JSON
  label: String
}

type SetMetadataAttributeResult {
  success: Boolean!
  attribute: MetadataAttribute
  errors: [SetMetadataAttributeError!]!
}

"""
The SetPasswordError enum represents the possible errors that can occur during the setPassword mutation.
"""
enum SetPasswordError {
  """Indicates that the user was not found."""
  USER_NOT_FOUND

  """Indicates that the provided passwords do not match."""
  PASSWORD_MISMATCH

  """Indicates that the provided token is invalid."""
  INVALID_TOKEN

  """Indicates that the provided password is invalid."""
  INVALID_PASSWORD
}

"""
The SetPasswordInput type represents the input for the setPassword mutation.
"""
input SetPasswordInput {
  """The base64-encoded user ID."""
  uidb64: String!

  """The token for password reset."""
  token: String!

  """The new password."""
  password1: String!

  """The confirmation of the new password."""
  password2: String!
}

"""
The SetPasswordResult type represents the result of the setPassword mutation.
"""
type SetPasswordResult {
  """Indicates whether the password was set successfully."""
  success: Boolean!

  """The error that occurred during the setPassword mutation."""
  error: SetPasswordError
}

scalar SimplifiedExtentType

scalar StackPriorities

"""Represents the input for stopping a pipeline."""
input StopPipelineInput {
  runId: UUID!
}

"""Represents the result of stopping a pipeline."""
type StopPipelineResult {
  success: Boolean!
  errors: [PipelineError!]!
}

type TableColumn {
  name: String!
  type: String!
}

"""Represents a paginated list of rows from a database table."""
type TableRowsPage {
  """The page number of the result."""
  pageNumber: Int!

  """Indicates if there is a next page available."""
  hasNextPage: Boolean!

  """Indicates if there is a previous page available."""
  hasPreviousPage: Boolean!

  """The rows in the current page."""
  items: [JSON!]!
}

"""A tag is a label."""
type Tag {
  id: String!
  name: String!
}

"""The Team type represents a team in the system."""
type Team {
  """The unique identifier of the team."""
  id: UUID!

  """The name of the team."""
  name: String!

  """Retrieves the memberships of the team."""
  memberships(page: Int, perPage: Int): MembershipPage!

  """The permissions assigned to the team."""
  permissions: TeamPermissions!

  """The date when the team was created."""
  createdAt: DateTime!

  """The date when the team was last updated."""
  updatedAt: DateTime!
}

"""The TeamPage type represents a paginated list of teams."""
type TeamPage {
  """The current page number."""
  pageNumber: Int!

  """The total number of pages."""
  totalPages: Int!

  """The total number of items."""
  totalItems: Int!

  """The list of teams on the current page."""
  items: [Team!]!
}

"""The TeamPermissions type represents the permissions of a team."""
type TeamPermissions {
  """Indicates whether the user has permission to update the team."""
  update: Boolean!

  """
  Indicates whether the user has permission to create a membership in the team.
  """
  createMembership: Boolean!

  """Indicates whether the user has permission to delete the team."""
  delete: Boolean!
}

scalar TimeThresholds

enum UpdateAccessmodAccessibilityAnalysisError {
  NOT_FOUND
  NAME_DUPLICATE
}

input UpdateAccessmodAccessibilityAnalysisInput {
  id: String!
  name: String
  landCoverId: String
  demId: String
  stackId: String
  stackPriorities: StackPriorities
  transportNetworkId: String
  waterId: String
  barrierId: String
  movingSpeeds: MovingSpeeds
  healthFacilitiesId: String
  invertDirection: Boolean
  maxTravelTime: Int
  waterAllTouched: Boolean
  algorithm: AccessmodAccessibilityAnalysisAlgorithm
  knightMove: Boolean
}

type UpdateAccessmodAccessibilityAnalysisResult {
  success: Boolean!
  analysis: AccessmodAccessibilityAnalysis
  errors: [UpdateAccessmodAccessibilityAnalysisError!]!
}

enum UpdateAccessmodFilesetError {
  NOT_FOUND
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input UpdateAccessmodFilesetInput {
  id: String!
  name: String
  metadata: AccessmodFilesetMetadata
}

type UpdateAccessmodFilesetResult {
  success: Boolean!
  fileset: AccessmodFileset
  errors: [UpdateAccessmodFilesetError!]!
}

enum UpdateAccessmodProjectError {
  NOT_FOUND
  NAME_DUPLICATE
  PERMISSION_DENIED
}

input UpdateAccessmodProjectInput {
  id: String!
  name: String
  description: String
}

enum UpdateAccessmodProjectMemberError {
  PERMISSION_DENIED
  NOT_FOUND
  NOT_IMPLEMENTED
}

input UpdateAccessmodProjectMemberInput {
  id: String!
  mode: PermissionMode!
}

type UpdateAccessmodProjectMemberResult {
  success: Boolean!
  member: AccessmodProjectMember
  errors: [UpdateAccessmodProjectMemberError!]!
}

type UpdateAccessmodProjectResult {
  success: Boolean!
  project: AccessmodProject
  errors: [UpdateAccessmodProjectError!]!
}

enum UpdateAccessmodZonalStatisticsError {
  NOT_FOUND
  NAME_DUPLICATE
}

input UpdateAccessmodZonalStatisticsInput {
  id: String!
  name: String
  populationId: String
  travelTimesId: String
  boundariesId: String
  timeThresholds: TimeThresholds
}

type UpdateAccessmodZonalStatisticsResult {
  success: Boolean!
  analysis: AccessmodZonalStatistics
  errors: [UpdateAccessmodZonalStatisticsError!]!
}

"""Represents the error types for updating a connection."""
enum UpdateConnectionError {
  NOT_FOUND
  PERMISSION_DENIED
  INVALID_SLUG
}

"""Represents the input for updating a connection."""
input UpdateConnectionInput {
  id: String!
  name: String
  slug: String
  description: String
  fields: [ConnectionFieldInput!]
}

"""Represents the result of updating a connection."""
type UpdateConnectionResult {
  success: Boolean!
  connection: Connection
  errors: [UpdateConnectionError!]!
}

enum UpdateDAGError {
  NOT_FOUND
  INVALID
}

input UpdateDAGInput {
  id: UUID!
  label: String
  description: String
  schedule: String
  countries: [CountryInput!]
}

type UpdateDAGResult {
  success: Boolean!
  errors: [UpdateDAGError!]!
  dag: DAG
}

"""Errors that can occur when updating a dataset."""
enum UpdateDatasetError {
  DATASET_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for updating a dataset."""
input UpdateDatasetInput {
  datasetId: ID!
  name: String
  description: String
}

"""Result of updating a dataset."""
type UpdateDatasetResult {
  dataset: Dataset
  success: Boolean!
  errors: [UpdateDatasetError!]!
}

"""Errors that can occur when updating a dataset version."""
enum UpdateDatasetVersionError {
  VERSION_NOT_FOUND
  PERMISSION_DENIED
}

"""Input for updating a dataset version."""
input UpdateDatasetVersionInput {
  versionId: ID!
  name: String
  changelog: String
}

"""Result of updating a dataset version."""
type UpdateDatasetVersionResult {
  version: DatasetVersion
  success: Boolean!
  errors: [UpdateDatasetVersionError!]!
}

"""
The UpdateMembershipError enum represents the possible errors that can occur during the updateMembership mutation.
"""
enum UpdateMembershipError {
  """
  Indicates that the user does not have permission to update the membership.
  """
  PERMISSION_DENIED

  """Indicates that the membership was not found."""
  NOT_FOUND

  """Indicates that the provided role is invalid."""
  INVALID_ROLE
}

"""
The UpdateMembershipInput type represents the input for the updateMembership mutation.
"""
input UpdateMembershipInput {
  """The unique identifier of the membership to update."""
  id: UUID!

  """The updated role of the user in the team."""
  role: MembershipRole!
}

"""
The UpdateMembershipResult type represents the result of the updateMembership mutation.
"""
type UpdateMembershipResult {
  """Indicates whether the updateMembership mutation was successful."""
  success: Boolean!

  """The updated membership object."""
  membership: Membership

  """The list of errors that occurred during the updateMembership mutation."""
  errors: [UpdateMembershipError!]!
}

"""
Enum representing the possible errors that can occur when updating a pipeline.
"""
enum UpdatePipelineError {
  NOT_FOUND
  PERMISSION_DENIED
  INVALID_CONFIG
  MISSING_VERSION_CONFIG
}

"""Represents the input for updating a pipeline."""
input UpdatePipelineInput {
  id: UUID!
  name: String
  config: JSON
  schedule: String
  description: String
  webhookEnabled: Boolean
}

"""
Enum representing the possible errors that can occur when updating a template.
"""
enum UpdateTemplateError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for updating a template."""
input UpdateTemplateInput {
  id: UUID!
  name: String
  config: JSON
  description: String
}

"""Represents the result of updating a template."""
type UpdateTemplateResult {
  success: Boolean!
  errors: [UpdateTemplateError!]!
  template: PipelineTemplate
}

"""Represents the input for updating the progress of a pipeline."""
input UpdatePipelineProgressInput {
  percent: Int!
}

"""Represents the result of updating the progress of a pipeline."""
type UpdatePipelineProgressResult {
  success: Boolean!
  errors: [PipelineError!]!
}

"""Represents the input for updating a recipient."""
input UpdatePipelineRecipientInput {
  recipientId: UUID!
  notificationLevel: PipelineNotificationLevel!
}

type UpdatePipelineRecipientResult {
  success: Boolean!
  errors: [PipelineRecipientError!]!
  recipient: PipelineRecipient
}

"""Represents the result of updating a pipeline."""
type UpdatePipelineResult {
  success: Boolean!
  errors: [UpdatePipelineError!]!
  pipeline: Pipeline
}

"""
Enum representing the possible errors that can occur when updating a pipeline version.
"""
enum UpdatePipelineVersionError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for updating a pipeline version."""
input UpdatePipelineVersionInput {
  id: UUID!
  name: String
  description: String
  externalLink: URL
  config: JSON
}

"""Represents the result of updating a pipeline version."""
type UpdatePipelineVersionResult {
  success: Boolean!
  errors: [UpdatePipelineVersionError!]!
  pipelineVersion: PipelineVersion
}

"""
The UpdateTeamError enum represents the possible errors that can occur during the updateTeam mutation.
"""
enum UpdateTeamError {
  """Indicates that the team was not found."""
  NOT_FOUND

  """Indicates that the user does not have permission to update the team."""
  PERMISSION_DENIED

  """Indicates that a team with the same name already exists."""
  NAME_DUPLICATE
}

"""
The UpdateTeamInput type represents the input for the updateTeam mutation.
"""
input UpdateTeamInput {
  """The unique identifier of the team to update."""
  id: UUID!

  """The updated name of the team."""
  name: String
}

"""
The UpdateTeamResult type represents the result of the updateTeam mutation.
"""
type UpdateTeamResult {
  """The updated team object."""
  team: Team

  """Indicates whether the updateTeam mutation was successful."""
  success: Boolean!

  """The list of errors that occurred during the updateTeam mutation."""
  errors: [UpdateTeamError!]!
}

"""
The UpdateUserError enum represents the possible errors that can occur during the updateUser mutation.
"""
enum UpdateUserError {
  """
  Indicates that the user does not have permission to update their profile.
  """
  PERMISSION_DENIED

  """Indicates that the provided language is invalid."""
  INVALID_LANGUAGE
}

"""
The UpdateUserInput type represents the input for the updateUser mutation.
"""
input UpdateUserInput {
  """The updated first name of the user."""
  firstName: String

  """The updated last name of the user."""
  lastName: String

  """The updated language preference of the user."""
  language: String
}

"""
The UpdateUserResult type represents the result of the updateUser mutation.
"""
type UpdateUserResult {
  """Indicates whether the user update was successful."""
  success: Boolean!

  """The updated user object."""
  user: User

  """The list of errors that occurred during the updateUser mutation."""
  errors: [UpdateUserError!]!
}

"""
Enum representing the possible errors that can occur when updating a workspace.
"""
enum UpdateWorkspaceError {
  PERMISSION_DENIED
  NOT_FOUND
}

"""Represents the input for updating a workspace."""
input UpdateWorkspaceInput {
  slug: String!
  name: String
  description: String
  countries: [CountryInput!]
  dockerImage: String
}

"""
Enum representing the possible errors that can occur when updating a workspace member.
"""
enum UpdateWorkspaceMemberError {
  MEMBERSHIP_NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for updating a workspace member."""
input UpdateWorkspaceMemberInput {
  membershipId: UUID!
  role: WorkspaceMembershipRole!
}

"""Represents the result of updating a workspace member."""
type UpdateWorkspaceMemberResult {
  success: Boolean!
  errors: [UpdateWorkspaceMemberError!]!
  workspaceMembership: WorkspaceMembership
}

"""Represents the result of updating a workspace."""
type UpdateWorkspaceResult {
  success: Boolean!
  errors: [UpdateWorkspaceError!]!
  workspace: Workspace
}

"""
Enum representing the possible errors that can occur when upgrading a pipeline version from the latest template version.
"""
enum UpgradePipelineVersionFromTemplateError {
  PIPELINE_NOT_FOUND
  PIPELINE_NOT_FROM_TEMPLATE
  NO_NEW_TEMPLATE_VERSION_AVAILABLE
}

"""
Represents the input for upgrading a pipeline version from the latest template version.
"""
input UpgradePipelineVersionFromTemplateInput {
  pipelineId: UUID!
}

"""
Represents the result of upgrading a pipeline version from the latest template version.
"""
type UpgradePipelineVersionFromTemplateResult {
  success: Boolean!
  errors: [UpgradePipelineVersionFromTemplateError!]!
  pipelineVersion: PipelineVersion
}

"""Represents the input for uploading a pipeline."""
input UploadPipelineInput {
  workspaceSlug: String!
  pipelineCode: String
  name: String
  description: String
  externalLink: URL
  parameters: [ParameterInput!]!
  zipfile: String!
  config: JSON
  timeout: Int
}

"""Represents the result of uploading a pipeline."""
type UploadPipelineResult {
  success: Boolean!
  pipelineVersion: PipelineVersion
  errors: [PipelineError!]!
}

scalar URL

"""The User type represents a user in the system."""
type User {
  """The unique identifier of the user."""
  id: UUID!

  """The email address of the user."""
  email: String!

  """The first name of the user."""
  firstName: String

  """The last name of the user."""
  lastName: String

  """The display name of the user."""
  displayName: String!

  """The language preference of the user."""
  language: String!

  """The avatar of the user."""
  avatar: Avatar!

  """The date when the user joined the system."""
  dateJoined: DateTime!

  """The date of the user's last login."""
  lastLogin: DateTime
}

scalar UUID

"""
The VerifyDeviceError enum represents the possible errors that can occur during the verifyDevice mutation.
"""
enum VerifyDeviceError {
  NO_DEVICE
  INVALID_OTP
}

"""
The VerifyDeviceInput type represents the input for the verifyDevice mutation.
"""
input VerifyDeviceInput {
  token: String
}

"""
The VerifyDeviceResult type represents the result of the verifyDevice mutation.
"""
type VerifyDeviceResult {
  success: Boolean!
  errors: [VerifyDeviceError!]
}

type WHOBoundary {
  id: String!
  name: String!
  country: Country!
  administrative_level: Int!
  parent: String
  extent: String!
}

type WHOInfo {
  region: WHORegion
  defaultCRS: Int!
  simplifiedExtent: SimplifiedExtentType
}

type WHORegion {
  code: String!
  name: String!
}

"""
Represents a workspace. A workspace is a shared environment where users can collaborate on data projects.
"""
type Workspace {
  slug: String!
  name: String!
  description: String
  dockerImage: String
  members(page: Int, perPage: Int): WorkspaceMembershipPage!
  permissions: WorkspacePermissions!
  countries: [Country!]!
  createdAt: DateTime!
  updatedAt: DateTime
  createdBy: User!
  connections: [Connection!]!
  invitations(includeAccepted: Boolean, page: Int, perPage: Int): WorkspaceInvitationPage!
  database: Database!

  """File storage of the workspace represented as a bucket"""
  bucket: Bucket!

  """Linked datasets of the workspace"""
  datasets(pinned: Boolean, query: String, page: Int = 1, perPage: Int = 15): DatasetLinkPage!
}

"""Represents an invitation to join a workspace."""
type WorkspaceInvitation {
  id: UUID!
  email: String!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  status: WorkspaceInvitationStatus!
  invitedBy: User
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Represents a page of workspace invitations."""
type WorkspaceInvitationPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceInvitation!]!
}

"""Represents the status of a workspace invitation."""
enum WorkspaceInvitationStatus {
  PENDING
  DECLINED
  ACCEPTED
}

"""Represents a membership in a workspace."""
type WorkspaceMembership {
  id: UUID!
  user: User!
  workspace: Workspace!
  role: WorkspaceMembershipRole!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Represents a page of workspace memberships."""
type WorkspaceMembershipPage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [WorkspaceMembership!]!
}

"""Represents the role of a workspace membership."""
enum WorkspaceMembershipRole {
  ADMIN
  EDITOR
  VIEWER
}

"""Represents a page of workspaces."""
type WorkspacePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [Workspace!]!
}

"""Represents the permissions of a workspace."""
type WorkspacePermissions {
  update: Boolean!
  delete: Boolean!
  manageMembers: Boolean!
  createConnection: Boolean!
  launchNotebookServer: Boolean!
  deleteDatabaseTable: Boolean!
  createPipeline: Boolean!
  createPipelineTemplateVersion: Boolean!

  """User can create objects in the workspace's bucket."""
  createObject: Boolean!

  """User can delete objects in the workspace's bucket."""
  deleteObject: Boolean!

  """User can download objects from the workspace's bucket."""
  downloadObject: Boolean!

  """Permissions to create a dataset in the workspace"""
  createDataset: Boolean!
}


"""
Represents the input for deleting a template version.
"""
input DeleteTemplateVersionInput {
  id: UUID!
}

"""
Represents the result of deleting a template version.
"""
type DeleteTemplateVersionResult {
  success: Boolean!
  errors: [DeleteTemplateVersionError!]!
}

enum DeleteTemplateVersionError {
  TEMPLATE_VERSION_NOT_FOUND
  PERMISSION_DENIED
  TEMPLATE_NOT_FOUND
}

"""
Represents the input for updating a template version.
"""
input UpdateTemplateVersionInput {
  id: UUID!
  changelog: String
}

"""
Enum representing the possible errors that can occur when updating a template version.
"""
enum UpdateTemplateVersionError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""
Represents the result of updating a template version.
"""
type UpdateTemplateVersionResult {
  success: Boolean!
  errors: [UpdateTemplateVersionError!]!
  templateVersion: PipelineTemplateVersion
}

