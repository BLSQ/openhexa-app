name: Provision & deploy
on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: Name of the environment (in Github)
        required: true
        default: Test
      tag:
        description: App component image tag
        required: true

jobs:
  provision_and_deploy:
    name: Provision and deploy using Terraform
    environment:
      name: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTIALS }}

    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch all history for all branches and tags

      # Python setup
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies and PyYaml
        run: |
          python -m pip install --upgrade pip
          pip install PyYaml

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform
      # Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state,
      # downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="bucket=${{ secrets.AWS_S3_TERRAFORM_STATE_BUCKET_NAME }}" \
            -backend-config="key=openhexa-app-$ENVIRONMENT/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          ENVIRONMENT=$(echo ${{ github.event.inputs.environment }}|tr '[:upper:]' '[:lower:]')
          terraform -chdir=terraform plan \
            -out=./terraform/saved_plan
            -var 'gcp_project_id=${{ secrets.GCP_PROJECT_ID }}' \
            -var 'gcp_region=${{ secrets.GCP_REGION }}' \
            -var 'gcp_zone=${{ secrets.GCP_ZONE }}' \
            -var 'gcp_global_address_name=${{ secrets.GCP_GLOBAL_ADDRESS_NAME }}' \
            -var 'gcp_sql_instance_tier=${{ secrets.GCP_SQL_INSTANCE_TIER }}' \
            -var 'gcp_sql_database_name=${{ secrets.GCP_SQL_DATABASE_NAME }}' \
            -var 'gcp_sql_user_name=${{ secrets.GCP_SQL_USER_NAME }}' \
            -var 'gcp_gke_default_pool_max_node_count=${{ secrets.GCP_GKE_DEFAULT_POOL_MAX_NODE_COUNT }}' \
            -var 'gcp_gke_default_pool_machine_type=${{ secrets.GCP_GKE_DEFAULT_POOL_MACHINE_TYPE }}' \
            -var 'kubernetes_namespace=${{ secrets.KUBERNETES_NAMESPACE }}' \
            -var 'aws_region=${{ secrets.AWS_REGION }}' \
            -var 'aws_route53_zone_name=${{ secrets.AWS_ROUTE_53_ZONE_NAME }}' \
            -var 'aws_route53_record_name=${{ secrets.AWS_ROUTE_53_RECORD_NAME }}'

      # Apply the changes required to reach the desired state of the configuration, or the pre-determined set of
      # actions generated by terraform plan
      - name: Terraform apply
        run: terraform -chdir=terraform apply ./terraform/saved_plan
#
#      # Gcloud stuff (see https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke)
#      - name: Setup gcloud
#        uses: GoogleCloudPlatform/github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01
#        with:
#          project_id: ${{ secrets.GCP_PROJECT_ID }}
#          service_account_key: ${{ secrets.GKE_SA_KEY }}
#          export_default_credentials: true
#
#      # Get outputs from file
#      - name: Terraform Output
#        run: terraform output -json >> ./output.json
#
#      # Make sure that the kubectl utility can access the newly created cluster
#      - name: Access to cluster
#        run: |
#          gcloud container clusters get-credentials $(terraform output -raw gcp_gke_cluster_name) \
#            --zone $(terraform output -raw gcp_gke_cluster_location)
#
#      # Copy the sample file
#      - name: Copy the sample file
#        run: |
#          cp k8s/sample_app.yaml k8s/app.yaml
#
#      # Update app file using Python
#      - name: Update app file
#        run: |
#          python script/update_app_file.py k8s/app.yaml ${{ github.event.inputs.tag }}
#
#      # Deploy the app component
#      - name: Deploy app
#        run: |
#          kubectl apply -n $(terraform output -raw kubernetes_namespace) -f k8s/app.yaml
#
#      # Migrate
#      - name: Migrate
#        run: |
#          kubectl exec deploy/app-deployment -n $(terraform output -raw kubernetes_namespace) -- python manage.py migrate
