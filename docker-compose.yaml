# Defines a service that can be reused multiple times later
x-app: &common
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: app
      args:
        - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
        - WORKSPACE_STORAGE_LOCATION=${WORKSPACE_STORAGE_LOCATION}
    env_file:
      - path: ./.env
        required: true
    environment:
      - ADDITIONAL_ALLOWED_HOSTS=*
      - SESSION_COOKIE_SECURE=False
      - CSRF_COOKIE_SECURE=False
      - SECURE_SSL_REDIRECT=False
      - STORAGE_BACKEND=azure
      - PIPELINE_SCHEDULER_SPAWNER=docker

    networks:
      - openhexa
    volumes:  # only used for Github Codespaces
      - "${LOCAL_WORKSPACE_FOLDER:-./backend}:/code"
      - "${WORKSPACE_STORAGE_LOCATION:-/data/openhexa}:/data"

services:
  db:
    platform: linux/amd64
    image: postgis/postgis:16-3.5
    env_file:
      - path: ./.env
        required: true
    networks:
      - openhexa
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  app:
    # Inherit from the block defined on top and override some fields
    <<: *common
    command: "manage runserver 0:8000"
    restart: unless-stopped
    container_name: app
    image: blsq/openhexa-app
    ports:
      - "8000:8000"
    depends_on:
      - db

  # Workers
  ##########

  dataset_worker:
    <<: *common
    command: "manage dataset_worker"
    restart: unless-stopped
    profiles:
      - "dataset_worker"
    depends_on:
      - db

  pipelines_runner:
    <<: *common
    user: "root"
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: pipelines
      args:
        - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
        - WORKSPACE_STORAGE_LOCATION=${WORKSPACE_STORAGE_LOCATION}
    command: "manage pipelines_runner"
    restart: unless-stopped
    profiles:
      - "pipelines"
    depends_on:
      - db
    volumes:  # only used for Github Codespaces
      - "${LOCAL_WORKSPACE_FOLDER:-./backend}:/code"
      - /var/run/docker.sock:/var/run/docker.sock

  pipelines_scheduler:
    <<: *common
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: pipelines
      args:
        - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
        - WORKSPACE_STORAGE_LOCATION=${WORKSPACE_STORAGE_LOCATION}
    command: "manage pipelines_scheduler"
    restart: unless-stopped
    profiles:
      - "pipelines"
    volumes:  # only used for Github Codespaces
      - "${LOCAL_WORKSPACE_FOLDER:-./backend}:/code"
    depends_on:
      - db

  # Frontend
  # TODO: Fix dev container to be able to work with the backend graphql files
  ###########

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    env_file: ./.env
    networks:
      - openhexa
    container_name: frontend
    profiles:
      - "frontend"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - OPENHEXA_BACKEND_URL=http://app:8000
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./.env:/.env
      - ./backend:/backend

  # Dev tools
  ############

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - openhexa

  # Azurite is used to test the Azure storage backend locally. This has to be run separately when triggering tests.
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    restart: always
    profiles:
      - "test"
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"


  # Legacy services
  ################

  # This service is only used for the connector_accessmod app.
  accessmod_dataworker:
    <<: *common
    command: "manage validate_fileset_worker"
    restart: unless-stopped
    profiles:
      - "accessmod"
    depends_on:
      - db

networks:
  openhexa:
    name: openhexa
    external: true

volumes:
  pgdata:
  minio_data:
