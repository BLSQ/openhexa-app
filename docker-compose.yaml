# Defines a service that can be reused multiple times later
x-app-common: &app-common
  image: ${BACKEND_IMAGE:-blsq/openhexa-app}
  build:
    context: ./backend
    target: app
    args:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - WORKSPACE_STORAGE_LOCATION=${WORKSPACE_STORAGE_LOCATION}
  env_file:
    - path: ./.env
      required: true
  environment:
    - ADDITIONAL_ALLOWED_HOSTS=*
  depends_on:
    db:
      condition: service_healthy
      restart: true
  networks:
    - openhexa
  volumes:
    - "${WORKSPACE_STORAGE_LOCATION:-/data/openhexa}:/data"


x-app: &app
  <<: *app-common
  command: "manage runserver 0:8000"
  restart: always
  container_name: app
  depends_on:
    db:
      condition: service_healthy
      restart: true
    prestart:
      condition: service_completed_successfully

services:
  db:
    image: postgis/postgis:15-3.3
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    env_file:
      - path: ./.env
        required: true
    networks:
      - openhexa
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  prestart:
    <<: *app-common
    command: "fixtures"
    container_name: prestart
    image: blsq/openhexa-app

  app:
    # Inherit from the block defined on top and override some fields
    <<: *app
    command: "manage runserver 0:8000"
    restart: unless-stopped
    container_name: app
    ports:
      - "8000:8000"
    
  # Workers
  ##########

  dataset_worker:
    <<: *app
    command: "manage dataset_worker"
    restart: unless-stopped
    profiles:
      - "dataset_worker"

  pipelines_runner:
    <<: *app
    build:
      target: pipelines
    command: "manage pipelines_runner"
    restart: unless-stopped
    profiles:
      - "pipelines"
    volumes:  # only used for Github Codespaces
      - /var/run/docker.sock:/var/run/docker.sock

  pipelines_scheduler:
    <<: *app
    build:
      target: pipelines
    command: "manage pipelines_scheduler"
    restart: unless-stopped
    profiles:
      - "pipelines"

  # Frontend
  # TODO: Fix dev container to be able to work with the backend graphql files
  ###########

  frontend:
    image: ${FRONTEND_IMAGE:-blsq/openhexa-frontend}
    env_file: ./.env
    networks:
      - openhexa
    container_name: frontend
    profiles:
      - "frontend"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - OPENHEXA_BACKEND_URL=http://app:8000
    restart: unless-stopped
    depends_on:
      - app

  # Dev tools
  ############

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - openhexa

  
  # Legacy services
  ################

  # This service is only used for the connector_accessmod app.
  accessmod_dataworker:
    <<: *app-common
    command: "manage validate_fileset_worker"
    restart: unless-stopped
    profiles:
      - "accessmod"
    depends_on:
      - db

networks:
  openhexa:
    name: openhexa
    external: true

volumes:
  pgdata:
  minio_data:
