union AccessmodOwner = User | Team

interface AccessmodOwnership {
    owner: AccessmodOwner
}

# Projects
type AccessmodProject implements AccessmodOwnership {
    id: String!
    name: String!
    spatialResolution: Int!
    description: String!
    crs: Int!
    country: Country!
    author: User!
    owner: AccessmodOwner
    extent: [[Float!]!]
    dem: AccessmodFileset
    permissions: AccessmodProjectPermissions!
    members: [AccessmodProjectMember!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type AccessmodProjectPermissions {
    update: Boolean!
    delete: Boolean!
    createFileset: Boolean!
    createAnalysis: Boolean!
    createMember: Boolean!
    createPermission: Boolean!
}

type AccessmodProjectPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodProject!]!
}
input CreateAccessmodProjectInput {
    name: String!
    description: String
    spatialResolution: Int!
    crs: Int!
    country: CountryInput!
    extent: [[Float!]!]
}
type CreateAccessmodProjectResult {
    success: Boolean!
    project: AccessmodProject
    errors: [CreateAccessmodProjectError!]!
}
enum CreateAccessmodProjectError {
    NAME_DUPLICATE
    PERMISSION_DENIED
}
input UpdateAccessmodProjectInput {
    id: String!
    name: String
    description: String
}
type UpdateAccessmodProjectResult {
    success: Boolean!
    project: AccessmodProject
    errors: [UpdateAccessmodProjectError!]!
}
enum UpdateAccessmodProjectError {
    NOT_FOUND
    NAME_DUPLICATE
    PERMISSION_DENIED
}
input DeleteAccessmodProjectInput {
    id: String!
}
type DeleteAccessmodProjectResult {
    success: Boolean!
    errors: [DeleteAccessmodProjectError!]!
}
enum DeleteAccessmodProjectError {
    NOT_FOUND
    PERMISSION_DENIED
}
type AccessmodProjectMember {
    id: String!
    user: User
    team: Team
    project: AccessmodProject!
    mode: PermissionMode!
    permissions: AccessmodProjectMemberPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type AccessmodProjectMemberPermissions {
    update: Boolean!
    delete: Boolean!
}

input CreateAccessmodProjectMemberInput {
    userId: String
    teamId: String
    projectId: String!
    mode: PermissionMode!
}
type CreateAccessmodProjectMemberResult {
    success: Boolean!
    member: AccessmodProjectMember
    errors: [CreateAccessmodProjectMemberError!]!
}
enum CreateAccessmodProjectMemberError {
    ALREADY_EXISTS
    PERMISSION_DENIED
    NOT_FOUND
    NOT_IMPLEMENTED
}
input UpdateAccessmodProjectMemberInput {
    id: String!
    mode: PermissionMode!
}
type UpdateAccessmodProjectMemberResult {
    success: Boolean!
    member: AccessmodProjectMember
    errors: [UpdateAccessmodProjectMemberError!]!
}
enum UpdateAccessmodProjectMemberError {
    PERMISSION_DENIED
    NOT_FOUND
    NOT_IMPLEMENTED
}
input DeleteAccessmodProjectMemberInput {
    id: String!
}
type DeleteAccessmodProjectMemberResult {
    success: Boolean!
    errors: [DeleteAccessmodProjectMemberError!]!
}
enum DeleteAccessmodProjectMemberError {
    PERMISSION_DENIED
    NOT_FOUND
    NOT_IMPLEMENTED
}

enum AccessmodProjectOrder {
    UPDATED_AT_DESC
    UPDATED_AT_ASC
    NAME_DESC
    NAME_ASC
}

extend type Query {
    accessmodProject(id: String): AccessmodProject
    accessmodProjects(term: String, countries: [String!], teams: [String!], page: Int, perPage: Int, orderBy: AccessmodProjectOrder): AccessmodProjectPage!
}
extend type Mutation {
    createAccessmodProject(input: CreateAccessmodProjectInput!): CreateAccessmodProjectResult! @loginRequired
    updateAccessmodProject(input: UpdateAccessmodProjectInput!): UpdateAccessmodProjectResult! @loginRequired
    deleteAccessmodProject(input: DeleteAccessmodProjectInput!): DeleteAccessmodProjectResult! @loginRequired
    createAccessmodProjectMember(input: CreateAccessmodProjectMemberInput!): CreateAccessmodProjectMemberResult! @loginRequired
    updateAccessmodProjectMember(input: UpdateAccessmodProjectMemberInput!): UpdateAccessmodProjectMemberResult! @loginRequired
    deleteAccessmodProjectMember(input: DeleteAccessmodProjectMemberInput!): DeleteAccessmodProjectMemberResult! @loginRequired
}

# Filesets
type AccessmodFileset implements AccessmodOwnership {
    id: String!
    name: String!
    mode: AccessmodFilesetMode!
    status: AccessmodFilesetStatus!
    role: AccessmodFilesetRole!
    author: User!
    owner: AccessmodOwner
    files: [AccessmodFile!]!
    metadata: AccessmodFilesetMetadata!
    permissions: AccessmodFilesetPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type AccessmodFilesetPermissions {
    update: Boolean!
    delete: Boolean!
    createFile: Boolean!
}

enum AccessmodFilesetMode {
    USER_INPUT
    AUTOMATIC_ACQUISITION
}
enum AccessmodFilesetStatus {
    PENDING
    VALIDATING
    VALID
    INVALID
    TO_ACQUIRE
}
scalar AccessmodFilesetMetadata


type AccessmodFilesetPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodFileset!]!
}
type AccessmodFilesetRole {
    id: String!
    code: AccessmodFilesetRoleCode!
    name: String!
    format: AccessmodFilesetFormat!
    createdAt: DateTime!
    updatedAt: DateTime!
}
enum AccessmodFilesetRoleCode {
    BARRIER
    COVERAGE
    DEM
    FRICTION_SURFACE
    GEOMETRY
    HEALTH_FACILITIES
    LAND_COVER
    POPULATION
    TRANSPORT_NETWORK
    TRAVEL_TIMES
    WATER
    STACK
    BOUNDARIES
    ZONAL_STATISTICS
    ZONAL_STATISTICS_TABLE
}
enum AccessmodFilesetFormat {
    VECTOR
    RASTER
    TABULAR
}
type AccessmodFile {
    id: String!
    uri: String!
    name: String!
    fileset: AccessmodFileset
    mimeType: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}
input CreateAccessmodFilesetInput {
    name: String!
    projectId: String!
    roleId: String!
    automatic: Boolean
    metadata: AccessmodFilesetMetadata
}
type CreateAccessmodFilesetResult {
    success: Boolean!
    fileset: AccessmodFileset
    errors: [CreateAccessmodFilesetError!]!
}
enum CreateAccessmodFilesetError {
    NAME_DUPLICATE
    PERMISSION_DENIED
}
input UpdateAccessmodFilesetInput {
    id: String!
    name: String
    metadata: AccessmodFilesetMetadata
}
type UpdateAccessmodFilesetResult {
    success: Boolean!
    fileset: AccessmodFileset
    errors: [UpdateAccessmodFilesetError!]!
}
enum UpdateAccessmodFilesetError {
    NOT_FOUND
    NAME_DUPLICATE
    PERMISSION_DENIED
}
input PrepareAccessmodFileUploadInput {
    filesetId: String!
    mimeType: String!
}
type PrepareAccessmodFileUploadResult {
    success: Boolean!
    uploadUrl: String
    fileUri: String
}
input CreateAccessmodFileInput {
    filesetId: String!
    uri: String!
    mimeType: String!
}
type CreateAccessmodFileResult {
    success: Boolean!
    file: AccessmodFile
    errors: [CreateAccessmodFileError!]!
}
enum CreateAccessmodFileError {
    URI_DUPLICATE
}
input PrepareAccessmodFileDownloadInput {
    fileId: String!
}
type PrepareAccessmodFileDownloadResult {
    success: Boolean!
    downloadUrl: String
}
input DeleteAccessmodFilesetInput {
    id: String!
}
type DeleteAccessmodFilesetResult {
    success: Boolean!
    errors: [DeleteAccessmodFilesetError!]!
}
enum DeleteAccessmodFilesetError {
    NOT_FOUND
    FILESET_IN_USE
}
input PrepareAccessmodFilesetVisualizationDownloadInput {
    id: String!
}
type PrepareAccessmodFilesetVisualizationDownloadResult {
    success: Boolean!
    url: String
}
extend type Query {
    accessmodFileset(id: String): AccessmodFileset
    accessmodFilesets(projectId: String!, roleId: String, term: String, mode: AccessmodFilesetMode, page: Int, perPage: Int): AccessmodFilesetPage!
    accessmodFilesetRole(id: String!): AccessmodFilesetRole
    accessmodFilesetRoles: [AccessmodFilesetRole!]!
}
extend type Mutation {
    createAccessmodFileset(input: CreateAccessmodFilesetInput!): CreateAccessmodFilesetResult! @loginRequired
    updateAccessmodFileset(input: UpdateAccessmodFilesetInput!): UpdateAccessmodFilesetResult! @loginRequired
    deleteAccessmodFileset(input: DeleteAccessmodFilesetInput!): DeleteAccessmodFilesetResult! @loginRequired
    prepareAccessmodFileUpload(input: PrepareAccessmodFileUploadInput!): PrepareAccessmodFileUploadResult! @loginRequired
    prepareAccessmodFileDownload(input: PrepareAccessmodFileDownloadInput!): PrepareAccessmodFileDownloadResult! @loginRequired
    prepareAccessmodFilesetVisualizationDownload(input: PrepareAccessmodFilesetVisualizationDownloadInput!): PrepareAccessmodFilesetVisualizationDownloadResult! @loginRequired
    createAccessmodFile(input: CreateAccessmodFileInput!): CreateAccessmodFileResult! @loginRequired
}

# Analysis
enum AccessmodAnalysisType {
    ACCESSIBILITY
    GEOGRAPHIC_COVERAGE
    ZONAL_STATISTICS
}
enum AccessmodAnalysisStatus {
    DRAFT
    READY
    QUEUED
    RUNNING
    SUCCESS
    FAILED
}

interface AccessmodAnalysis {
    id: String!
    type: AccessmodAnalysisType!
    status: AccessmodAnalysisStatus!
    name: String!
    author: User!
    permissions: AccessmodAnalysisPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type AccessmodAnalysisPermissions {
    update: Boolean!
    delete: Boolean!
    run: Boolean!
}

enum AccessmodAccessibilityAnalysisAlgorithm {
    ANISOTROPIC
    ISOTROPIC
}

scalar StackPriorities
scalar MovingSpeeds
type AccessmodAccessibilityAnalysis implements AccessmodAnalysis & AccessmodOwnership {
    id: String!
    type: AccessmodAnalysisType!
    status: AccessmodAnalysisStatus!
    name: String!
    owner: AccessmodOwner
    author: User!
    permissions: AccessmodAnalysisPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
    landCover: AccessmodFileset
    dem: AccessmodFileset
    transportNetwork: AccessmodFileset
    water: AccessmodFileset
    barrier: AccessmodFileset
    stack: AccessmodFileset
    stackPriorities: StackPriorities
    movingSpeeds: MovingSpeeds
    healthFacilities: AccessmodFileset
    invertDirection: Boolean
    maxTravelTime: Int
    waterAllTouched: Boolean
    algorithm: AccessmodAccessibilityAnalysisAlgorithm
    knightMove: Boolean
    travelTimes: AccessmodFileset
    frictionSurface: AccessmodFileset
}
type AccessmodGeographicCoverageAnalysis implements AccessmodAnalysis & AccessmodOwnership {
    id: String!
    type: AccessmodAnalysisType!
    status: AccessmodAnalysisStatus!
    name: String!
    owner: AccessmodOwner
    author: User!
    permissions: AccessmodAnalysisPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
    population: AccessmodFileset
    frictionSurface: AccessmodFileset
    dem: AccessmodFileset
    healthFacilities: AccessmodFileset
    anisotropic: Boolean
    maxTravelTime: Int
    hfProcessingOrder: String
    geographicCoverage: AccessmodFileset
    catchmentAreas: AccessmodFileset
}
type AccessmodAnalysisPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodAnalysis!]!
}
input CreateAccessmodAccessibilityAnalysisInput {
    projectId: String!
    name: String!
}
type CreateAccessmodAccessibilityAnalysisResult {
    success: Boolean!
    analysis: AccessmodAccessibilityAnalysis
    errors: [CreateAccessmodAccessibilityAnalysisError!]!
}
enum CreateAccessmodAccessibilityAnalysisError {
    NAME_DUPLICATE
}
input UpdateAccessmodAccessibilityAnalysisInput {
    id: String!
    name: String
    landCoverId: String
    demId: String
    stackId: String
    stackPriorities: StackPriorities
    transportNetworkId: String
    waterId: String
    barrierId: String
    movingSpeeds: MovingSpeeds
    healthFacilitiesId: String
    invertDirection: Boolean
    maxTravelTime: Int
    waterAllTouched: Boolean
    algorithm: AccessmodAccessibilityAnalysisAlgorithm
    knightMove: Boolean
}
type UpdateAccessmodAccessibilityAnalysisResult {
    success: Boolean!
    analysis: AccessmodAccessibilityAnalysis
    errors: [UpdateAccessmodAccessibilityAnalysisError!]!
}
enum UpdateAccessmodAccessibilityAnalysisError {
    NOT_FOUND
    NAME_DUPLICATE
}
scalar TimeThresholds
type AccessmodZonalStatistics implements AccessmodAnalysis & AccessmodOwnership {
    id: String!
    type: AccessmodAnalysisType!
    status: AccessmodAnalysisStatus!
    name: String!
    owner: AccessmodOwner
    author: User!
    permissions: AccessmodAnalysisPermissions!
    createdAt: DateTime!
    updatedAt: DateTime!
    population: AccessmodFileset
    travelTimes: AccessmodFileset
    boundaries: AccessmodFileset
    timeThresholds: TimeThresholds
    zonalStatisticsTable: AccessmodFileset
    zonalStatisticsGeo: AccessmodFileset
}
input CreateAccessmodZonalStatisticsInput {
    projectId: String!
    name: String!
}
type CreateAccessmodZonalStatisticsResult {
    success: Boolean!
    analysis: AccessmodZonalStatistics
    errors: [CreateAccessmodZonalStatisticsError!]!
}
enum CreateAccessmodZonalStatisticsError {
    NAME_DUPLICATE
}
input UpdateAccessmodZonalStatisticsInput {
    id: String!
    name: String
    populationId: String
    travelTimesId: String
    boundariesId: String
    timeThresholds: TimeThresholds
}
type UpdateAccessmodZonalStatisticsResult {
    success: Boolean!
    analysis: AccessmodZonalStatistics
    errors: [UpdateAccessmodZonalStatisticsError!]!
}
enum UpdateAccessmodZonalStatisticsError {
    NOT_FOUND
    NAME_DUPLICATE
}
input LaunchAccessmodAnalysisInput {
    id: String!
}
type LaunchAccessmodAnalysisResult {
    success: Boolean!
    analysis: AccessmodAnalysis
    errors: [LaunchAccessmodAnalysisError!]!
}
enum LaunchAccessmodAnalysisError {
    LAUNCH_FAILED
}
input DeleteAccessmodAnalysisInput {
    id: String!
}
type DeleteAccessmodAnalysisResult {
    success: Boolean!
    errors: [DeleteAccessmodAnalysisError!]!
}
enum DeleteAccessmodAnalysisError {
    NOT_FOUND
    DELETE_FAILED
}
extend type Query {
    accessmodAnalysis(id: String): AccessmodAnalysis
    accessmodAnalyses(projectId: String!, page: Int, perPage: Int): AccessmodAnalysisPage!
}
extend type Mutation {
    createAccessmodAccessibilityAnalysis(input: CreateAccessmodAccessibilityAnalysisInput): CreateAccessmodAccessibilityAnalysisResult! @loginRequired
    createAccessmodZonalStatistics(input: CreateAccessmodZonalStatisticsInput): CreateAccessmodZonalStatisticsResult! @loginRequired
    updateAccessmodAccessibilityAnalysis(input: UpdateAccessmodAccessibilityAnalysisInput): UpdateAccessmodAccessibilityAnalysisResult! @loginRequired
    updateAccessmodZonalStatistics(input: UpdateAccessmodZonalStatisticsInput): UpdateAccessmodZonalStatisticsResult! @loginRequired
    launchAccessmodAnalysis(input: LaunchAccessmodAnalysisInput): LaunchAccessmodAnalysisResult! @loginRequired
    deleteAccessmodAnalysis(input: DeleteAccessmodAnalysisInput): DeleteAccessmodAnalysisResult! @loginRequired
}

# Access request
enum AccessmodAccessRequestStatus {
    PENDING
    APPROVED
    DENIED
}
type AccessmodAccessRequest {
    id: String!
    firstName: String!
    lastName: String!
    email: String!
    acceptedTos: Boolean!
    status: AccessmodAccessRequestStatus!
    createdAt: DateTime!
    updatedAt: DateTime!
}
type AccessmodAccessRequestPage {
    pageNumber: Int!
    totalPages: Int!
    totalItems: Int!
    items: [AccessmodAccessRequest!]!
}
input RequestAccessmodAccessInput {
    firstName: String!
    lastName: String!
    email: String!
    acceptTos: Boolean!
}
enum RequestAccessmodAccessError {
    ALREADY_EXISTS
    MUST_ACCEPT_TOS
    INVALID
}
type RequestAccessmodAccessInputResult {
    success: Boolean!
    errors: [RequestAccessmodAccessError!]!
}
input ApproveAccessmodAccessRequestInput {
    id: String!
}
enum ApproveAccessmodAccessRequestError {
    INVALID
}
type ApproveAccessmodAccessRequestResult {
    success: Boolean!
    errors: [ApproveAccessmodAccessRequestError!]!
}
input DenyAccessmodAccessRequestInput {
    id: String!
}
enum DenyAccessmodAccessRequestError {
    INVALID
}
type DenyAccessmodAccessRequestResult {
    success: Boolean!
    errors: [DenyAccessmodAccessRequestError!]!
}
extend type Query {
    accessmodAccessRequests(page: Int, perPage: Int): AccessmodAccessRequestPage!
}
extend type Mutation {
    requestAccessmodAccess(input: RequestAccessmodAccessInput!): RequestAccessmodAccessInputResult!
    approveAccessmodAccessRequest(input: ApproveAccessmodAccessRequestInput!): ApproveAccessmodAccessRequestResult! @loginRequired
    denyAccessmodAccessRequest(input: DenyAccessmodAccessRequestInput!): DenyAccessmodAccessRequestResult! @loginRequired
}

extend type MePermissions {
    createAccessmodProject: Boolean!
    manageAccessmodAccessRequests: Boolean!
}
