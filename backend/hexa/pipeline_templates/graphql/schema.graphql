extend type Mutation {
  """
  Creates a new pipeline template version.
  """
  createPipelineTemplateVersion(input: CreatePipelineTemplateVersionInput!): CreatePipelineTemplateVersionResult! @loginRequired
  createPipelineFromTemplateVersion(input: CreatePipelineFromTemplateVersionInput!): CreatePipelineFromTemplateVersionResult! @loginRequired

  """
  Deletes a pipeline template.
  """
  deletePipelineTemplate(input: DeletePipelineTemplateInput): DeletePipelineTemplateResult! @loginRequired

  """
  Updates an existing template.
  """
  updatePipelineTemplate(input: UpdateTemplateInput!): UpdateTemplateResult! @loginRequired

  """
  Deletes a template version.
  """
  deleteTemplateVersion(input: DeleteTemplateVersionInput!): DeleteTemplateVersionResult! @loginRequired

  """
  Updates a template version.
  """
  updateTemplateVersion(input: UpdateTemplateVersionInput!): UpdateTemplateVersionResult! @loginRequired
}

extend type Query {
  """
  Retrieves a page of pipeline templates.
  """
  pipelineTemplates(page: Int = 1, perPage: Int = 15, search: String, workspaceSlug: String): PipelineTemplatePage!  @loginRequired

  """
  Retrieves a template by workspace slug and code.
  """
  templateByCode(code: String!): PipelineTemplate @loginRequired
}

"""
Represents paged result of fetching pipeline templates.
"""
type PipelineTemplatePage {
  pageNumber: Int!
  totalPages: Int!
  totalItems: Int!
  items: [PipelineTemplate!]!
}
"""
Represents the input for creating a new pipeline template version.
"""
input CreatePipelineTemplateVersionInput {
  name: String  # The name of the pipeline template.
  code: String  # The code of the pipeline template.
  description: String  # The description of the pipeline template.
  changelog: String  # The changelog of the pipeline template version.
  config: String  # The configuration of the pipeline template.
  workspaceSlug: String!  # The slug of the pipeline workspace.
  pipelineId: UUID!  # The ID of the pipeline.
  pipelineVersionId: UUID!  # The ID of the pipeline version.
}

"""
Represents the result of creating a new pipeline template version.
"""
type CreatePipelineTemplateVersionResult {
  pipelineTemplate: PipelineTemplate  # The created pipeline template.
  success: Boolean!  # Indicates if the pipeline template version was created successfully.
  errors: [CreatePipelineTemplateVersionError!]  # The list of errors that occurred during the creation of the pipeline template version.
}

"""
Represents the input for creating a new pipeline from a template version.
"""
input CreatePipelineFromTemplateVersionInput {
  workspaceSlug: String!  # The slug of the pipeline workspace.
  pipelineTemplateVersionId: UUID!  # The ID of the pipeline template version.
}

"""
Represents the result of creating a new pipeline from a template version.
"""
type CreatePipelineFromTemplateVersionResult {
  pipeline: Pipeline  # The created pipeline.
  success: Boolean!  # Indicates if the pipeline was created successfully.
  errors: [CreatePipelineFromTemplateVersionError!]  # The list of errors that occurred during the creation of the pipeline.
}

"""
Enum representing the possible errors that can occur when creating a pipeline from a template version.
"""
enum CreatePipelineFromTemplateVersionError {
  PERMISSION_DENIED
  WORKSPACE_NOT_FOUND
  PIPELINE_TEMPLATE_VERSION_NOT_FOUND
}

"""
Enum representing the possible errors that can occur when creating a pipeline template version.
"""
enum CreatePipelineTemplateVersionError {
  PERMISSION_DENIED
  WORKSPACE_NOT_FOUND
  PIPELINE_NOT_FOUND
  PIPELINE_VERSION_NOT_FOUND
  DUPLICATE_TEMPLATE_NAME_OR_CODE
  UNKNOWN_ERROR
}

"""
Represents the input for deleting a pipeline template.
"""
input DeletePipelineTemplateInput {
  id: UUID!  # The ID of the pipeline template to delete.
}

"""
Represents the result of deleting a template.
"""
type DeletePipelineTemplateResult {
  success: Boolean!  # Indicates if the pipeline template was deleted successfully.
  errors: [PipelineTemplateError!]!  # The list of errors that occurred during the deletion of the pipeline template.
}

enum PipelineTemplateError {
  PIPELINE_TEMPLATE_NOT_FOUND
  PERMISSION_DENIED
}

"""
Enum representing the possible errors that can occur when updating a template.
"""
enum UpdateTemplateError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""Represents the input for updating a template."""
input UpdateTemplateInput {
  id: UUID!
  name: String
  config: JSON
  description: String
}

"""Represents the result of updating a template."""
type UpdateTemplateResult {
  success: Boolean!
  errors: [UpdateTemplateError!]!
  template: PipelineTemplate
}

"""
Represents a pipeline template.
"""
type PipelineTemplate {
  id: UUID!  # The ID of the pipeline template.
  name: String!  # The name of the pipeline template.
  code: String!  # The code of the pipeline template.
  description: String  # The description of the pipeline template.
  config: String  # The configuration of the pipeline template.
  versions(page: Int, perPage: Int): TemplateVersionPage!  # Retrieves the template versions associated with the template.
  currentVersion: PipelineTemplateVersion  # The current version of the pipeline template.
  sourcePipeline: Pipeline  # The source pipeline of the pipeline template.
  permissions: PipelineTemplatePermissions!  # The permissions for the pipeline template.
}

"""
Represents a page of template versions.
"""
type TemplateVersionPage {
  items: [PipelineTemplateVersion!]!  # The list of template versions on the current page.
  pageNumber: Int!  # The current page number.
  totalPages: Int!  # The total number of pages.
  totalItems: Int!  # The total number of pipeline versions.
}

"""
Represents a version of a pipeline template.
"""
type PipelineTemplateVersion {
  id: UUID!  # The ID of the pipeline template version.
  versionNumber: Int!  # The version number of the pipeline template version.
  changelog: String  # The changelog of the pipeline template version.
  createdAt: DateTime!  # The creation date of the pipeline template version.
  template: PipelineTemplate!  # The pipeline template associated with the version.
  user: User  # The user who created the version.
  permissions: PipelineTemplateVersionPermissions!  # The permissions for the pipeline version template.
  isLatestVersion: Boolean!  # Indicates if the template version is the latest version.
}

"""
Represents the permissions for a pipeline template.
"""
type PipelineTemplatePermissions {
    delete: Boolean! # Indicates if the pipeline template can be deleted by the requesting user.
    update: Boolean! # Indicates if the pipeline template can be updated by the requesting user.
}

"""
Represents the permissions for a pipeline template version.
"""
type PipelineTemplateVersionPermissions {
  update: Boolean!  # Indicates if the pipeline template version can be updated.
  delete: Boolean!  # Indicates if the pipeline template version can be deleted.
}

extend type WorkspacePermissions {
  createPipelineTemplateVersion: Boolean!  # Indicates if a pipeline template version can be created in the workspace.
}

"""
Represents the input for deleting a template version.
"""
input DeleteTemplateVersionInput {
  id: UUID!  # The ID of the template version to delete.
}

"""
Represents the result of deleting a template version.
"""
type DeleteTemplateVersionResult {
  success: Boolean!  # Indicates if the template version was deleted successfully.
  errors: [DeleteTemplateVersionError!]!  # The list of errors that occurred during the deletion of the template version.
}

enum DeleteTemplateVersionError {
  TEMPLATE_VERSION_NOT_FOUND
  PERMISSION_DENIED
}

"""
Represents the input for updating a template version.
"""
input UpdateTemplateVersionInput {
  id: UUID!  # The ID of the template version to update.
  changelog: String  # The new changelog associated with the template version.
}

"""
Enum representing the possible errors that can occur when updating a template version.
"""
enum UpdateTemplateVersionError {
  NOT_FOUND
  PERMISSION_DENIED
}

"""
Represents the result of updating a template version.
"""
type UpdateTemplateVersionResult {
  success: Boolean!  # Indicates if the template version was updated successfully.
  errors: [UpdateTemplateVersionError!]!  # The list of errors that occurred during the update of the template version.
  templateVersion: PipelineTemplateVersion  # The updated template version.
}