# Config map: will be used to set environment variables in our container
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  labels:
    component: app
data:
  DEBUG: "false"
  ALLOWED_HOSTS: <HEXA_APP_DOMAIN>
  DATABASE_HOST: "127.0.0.1"
---
# Deployment: represents the app setup (an autoscaling app setup here)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
  labels:
    component: app
spec:
  replicas: 3
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        component: app
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: <NODE_POOL_SELECTOR>
      containers:
        - name: app-container
          image: <HEXA_APP_IMAGE>
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: app-secret
            - configMapRef:
                name: app-config
          command: [ "/code/docker-entrypoint.sh" ]
          args: [ "start" ]
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
              httpHeaders:
                - name: Host
                  value: <HEXA_APP_DOMAIN>
        - name: app-cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command: [ "/cloud_sql_proxy", "--dir=/cloudsql",
                     "-instances=<CLOUDSQL_CONNECTION_STRING>=tcp:5432",
                     "-credential_file=/secrets/cloudsql/credentials.json" ]
          volumeMounts:
            - name: app-cloudsql-oauth-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: app-ssl-certs
              mountPath: /etc/ssl/certs
            - name: app-cloudsql
              mountPath: /cloudsql
      volumes:
        - name: app-cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: app-ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: app-cloudsql
          emptyDir: { }
---
# Certificate (https)
apiVersion: networking.gke.io/v1beta2
kind: ManagedCertificate
metadata:
  name: app-certificate
spec:
  domains:
    - <HEXA_APP_DOMAIN>
---
# Service: exposes the deployment
apiVersion: v1
kind: Service
metadata:
  name: app-service
  labels:
    component: app
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  selector:
    component: app
---
# Ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: <HEXA_ADDRESS_NAME>
    networking.gke.io/managed-certificates: app-certificate
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.allow-http: "false"
spec:
  backend:
    serviceName: app-service
    servicePort: 80
