name: Deploy django app on GKE using terraform 
on:
  #  push:
  #    branches:
  workflow_dispatch:
    inputs:
      secret:
        description: secret
        required: true
  

jobs:
  deploy:
    name: Provisioning using terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.TERRAFORM_AWS_REGION }}
      GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTIALS_TEST }}

    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch all history for all branches and tags

      # Python setup
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies and PyYaml
        run: |
          python -m pip install --upgrade pip
          pip install PyYaml

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var="secret=${{ github.event.inputs.secret }}"

      # Apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by terraform plan 
      - name: Terraform apply
        run: terraform apply -var="secret=${{ github.event.inputs.secret }}"

      # Gcloud stuff (see https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke)
      - name: Setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01
        with:
           project_id: ${{ secrets.GCP_PROJECT_ID_TEST }}
           service_account_key: ${{ secrets.GKE_SA_KEY_TEST }}
           export_default_credentials: true
           
           
      # Get outputs from file
      - name: Terraform Output
        run: terraform output -json >> ./output.json
        

      # Make sure that the kubectl utility can access the newly created cluster
      - name: Access to cluster
        run: |
         gcloud container clusters get-credentials $(terraform output -raw gcp_gke_cluster_name) --zone $(terraform output -raw gcp_gke_cluster_zone)

      # Copy the sample file
      - name: Copy the sample file
        run: |
         cp k8s/app.yaml.dist k8s/app.yaml

      # Update app file using Python
      - name: Update app file
        run: |
         python bin/update_app_file.py  \
         k8s/app.yaml 
         
      # Deploy the app component 
      - name: Deploy app
        run: |
          kubectl apply -n $(terraform output -raw kubernetes_namespace) -f k8s/app.yaml

