/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    fragment UserProperty_user on User {\n      ...User_user\n    }\n    \n  ": typeof types.UserProperty_UserFragmentDoc,
    "\nfragment UserProperty_user on User {\n  ...User_user\n}\n": typeof types.UserProperty_UserFragmentDoc,
    "\n    fragment UserColumn_user on User {\n      ...User_user\n    }\n    \n  ": typeof types.UserColumn_UserFragmentDoc,
    "\nfragment UserColumn_user on User {\n  ...User_user\n}\n": typeof types.UserColumn_UserFragmentDoc,
    "\n    fragment CountryBadge_country on Country {\n      code\n      name\n    }\n  ": typeof types.CountryBadge_CountryFragmentDoc,
    "\nfragment CountryBadge_country on Country {\n  code\n  name\n}\n": typeof types.CountryBadge_CountryFragmentDoc,
    "\nquery CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}\n": typeof types.CountryPickerDocument,
    "\n    fragment CountryPicker_country on Country {\n      code\n      alpha3\n      name\n    }\n  ": typeof types.CountryPicker_CountryFragmentDoc,
    "\nfragment CountryPicker_country on Country {\n  code\n  alpha3\n  name\n}\n": typeof types.CountryPicker_CountryFragmentDoc,
    "\n    fragment DatabaseTablesPage on DatabaseTableResultPage {\n      items {\n        databaseTable {\n          name\n          count\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": typeof types.DatabaseTablesPageFragmentDoc,
    "\nfragment DatabaseTablesPage on DatabaseTableResultPage {\n  items {\n    databaseTable {\n      name\n      count\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": typeof types.DatabaseTablesPageFragmentDoc,
    "\n    fragment DatasetsPage on DatasetResultPage {\n      items {\n        dataset {\n          id\n          slug\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          createdBy {\n            id\n            displayName\n            ...UserAvatar_user\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": typeof types.DatasetsPageFragmentDoc,
    "\nfragment DatasetsPage on DatasetResultPage {\n  items {\n    dataset {\n      id\n      slug\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      createdBy {\n        id\n        displayName\n        ...UserAvatar_user\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": typeof types.DatasetsPageFragmentDoc,
    "\n    fragment FilesPage on FileResultPage {\n      items {\n        file {\n          name\n          path\n          size\n          updatedAt\n          type\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": typeof types.FilesPageFragmentDoc,
    "\nfragment FilesPage on FileResultPage {\n  items {\n    file {\n      name\n      path\n      size\n      updatedAt\n      type\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": typeof types.FilesPageFragmentDoc,
    "\n    fragment PipelinesPage on PipelineResultPage {\n      items {\n        pipeline {\n          id\n          code\n          name\n          description\n          updatedAt\n          functionalType\n          tags {\n            ...Tag_tag\n          }\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n            items {\n              ...PipelineRunStatusBadge_run\n            }\n          }\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n    \n  ": typeof types.PipelinesPageFragmentDoc,
    "\nfragment PipelinesPage on PipelineResultPage {\n  items {\n    pipeline {\n      id\n      code\n      name\n      description\n      updatedAt\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n        }\n      }\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": typeof types.PipelinesPageFragmentDoc,
    "\n    fragment PipelineTemplatesPage on PipelineTemplateResultPage {\n      items {\n        pipelineTemplate {\n          id\n          code\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          currentVersion {\n            id\n            versionNumber\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": typeof types.PipelineTemplatesPageFragmentDoc,
    "\nfragment PipelineTemplatesPage on PipelineTemplateResultPage {\n  items {\n    pipelineTemplate {\n      id\n      code\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      currentVersion {\n        id\n        versionNumber\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": typeof types.PipelineTemplatesPageFragmentDoc,
    "\nquery GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n  workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n    totalItems\n    items {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n}\n": typeof types.GetWorkspacesDocument,
    "\nquery SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  files: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...FilesPage\n  }\n}\n": typeof types.SearchFilesDocument,
    "\nquery SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  pipelineTemplates: searchPipelineTemplates(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...PipelineTemplatesPage\n  }\n}\n": typeof types.SearchPipelineTemplatesDocument,
    "\nquery SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n  pipelines: searchPipelines(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    functionalType: $functionalType\n  ) {\n    __typename\n    ...PipelinesPage\n  }\n}\n": typeof types.SearchPipelinesDocument,
    "\nquery SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  datasets: searchDatasets(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatasetsPage\n  }\n}\n": typeof types.SearchDatasetsDocument,
    "\nquery SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  databaseTables: searchDatabaseTables(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatabaseTablesPage\n  }\n}\n": typeof types.SearchDatabaseTablesDocument,
    "\n    query SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      datasets: searchDatasets(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...DatasetsPage\n      }\n      \n    }\n  ": typeof types.SearchDatasetsDocument,
    "\n    query SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n      pipelines: searchPipelines(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage, functionalType: $functionalType) {\n        __typename\n        ...PipelinesPage\n      }\n      \n    }\n  ": typeof types.SearchPipelinesDocument,
    "\n    query SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      pipelineTemplates: searchPipelineTemplates(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...PipelineTemplatesPage\n      }\n      \n    }\n  ": typeof types.SearchPipelineTemplatesDocument,
    "\n    query SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      databaseTables: searchDatabaseTables(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...DatabaseTablesPage\n      }\n      \n    }\n  ": typeof types.SearchDatabaseTablesDocument,
    "\n    query SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      files: searchFiles(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...FilesPage\n      }\n      \n    }\n  ": typeof types.SearchFilesDocument,
    "\n    query GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n      workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n        totalItems\n        items {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      \n    }\n  ": typeof types.GetWorkspacesDocument,
    "\n    fragment WorkspaceDisplayFragment on Workspace {\n      name\n      countries {\n        code\n      }\n    }\n  ": typeof types.WorkspaceDisplayFragmentFragmentDoc,
    "\nfragment WorkspaceDisplayFragment on Workspace {\n  name\n  countries {\n    code\n  }\n}\n": typeof types.WorkspaceDisplayFragmentFragmentDoc,
    "\n    fragment Tag_tag on Tag {\n      id\n      name\n    }\n  ": typeof types.Tag_TagFragmentDoc,
    "\nfragment Tag_tag on Tag {\n  id\n  name\n}\n": typeof types.Tag_TagFragmentDoc,
    "\n    fragment User_user on User {\n      id\n      email\n      displayName\n      ...UserAvatar_user\n    }\n    \n  ": typeof types.User_UserFragmentDoc,
    "\nfragment User_user on User {\n  id\n  email\n  displayName\n  ...UserAvatar_user\n}\n": typeof types.User_UserFragmentDoc,
    "query CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}": typeof types.CountryPickerDocument,
    "\n    fragment ColumnMetadataDrawer_file on DatasetVersionFile {\n      id\n      targetId\n      attributes {\n        id\n        key\n        value\n        label\n        system\n        __typename\n      }\n      properties\n    }\n  ": typeof types.ColumnMetadataDrawer_FileFragmentDoc,
    "\nfragment ColumnMetadataDrawer_file on DatasetVersionFile {\n  id\n  targetId\n  attributes {\n    id\n    key\n    value\n    label\n    system\n    __typename\n  }\n  properties\n}\n": typeof types.ColumnMetadataDrawer_FileFragmentDoc,
    "\n    mutation CreateDatasetDialog($input: CreateDatasetInput!) {\n      createDataset(input: $input) {\n        dataset {\n          id\n          slug\n          workspace {\n            slug\n          }\n        }\n        link {\n          id\n        }\n        success\n        errors\n      }\n    }\n  ": typeof types.CreateDatasetDialogDocument,
    "\n    fragment CreateDatasetDialog_workspace on Workspace {\n      slug\n      name\n      permissions {\n        createDataset\n      }\n    }\n  ": typeof types.CreateDatasetDialog_WorkspaceFragmentDoc,
    "\nfragment CreateDatasetDialog_workspace on Workspace {\n  slug\n  name\n  permissions {\n    createDataset\n  }\n}\n": typeof types.CreateDatasetDialog_WorkspaceFragmentDoc,
    "\n    fragment DatasetCard_link on DatasetLink {\n      dataset {\n        name\n        slug\n        description\n        updatedAt\n        workspace {\n          slug\n          name\n        }\n      }\n      id\n      workspace {\n        slug\n        name\n      }\n    }\n  ": typeof types.DatasetCard_LinkFragmentDoc,
    "\nfragment DatasetCard_link on DatasetLink {\n  dataset {\n    name\n    slug\n    description\n    updatedAt\n    workspace {\n      slug\n      name\n    }\n  }\n  id\n  workspace {\n    slug\n    name\n  }\n}\n": typeof types.DatasetCard_LinkFragmentDoc,
    "\n    fragment DatasetExplorer_version on DatasetVersion {\n      id\n      files(page: $page, perPage: $perPage) {\n        totalPages\n        pageNumber\n        totalItems\n        items {\n          ...DatasetExplorer_file\n        }\n      }\n      ...DatasetVersionFileSample_version\n      ...DatasetVersionFileColumns_version\n    }\n    \n    \n  ": typeof types.DatasetExplorer_VersionFragmentDoc,
    "\nfragment DatasetExplorer_version on DatasetVersion {\n  id\n  files(page: $page, perPage: $perPage) {\n    totalPages\n    pageNumber\n    totalItems\n    items {\n      ...DatasetExplorer_file\n    }\n  }\n  ...DatasetVersionFileSample_version\n  ...DatasetVersionFileColumns_version\n}\n": typeof types.DatasetExplorer_VersionFragmentDoc,
    "fragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}": typeof types.DatasetExplorer_FileFragmentDoc,
    "\nfragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}\n": typeof types.DatasetExplorer_FileFragmentDoc,
    "\n      query DatasetLinksDataGrid($datasetId: ID!, $page: Int) {\n        dataset(id: $datasetId) {\n          links(page: $page, perPage: 6) {\n            totalItems\n            items {\n              ...DeleteDatasetLinkTrigger_datasetLink\n              permissions {\n                delete\n              }\n              workspace {\n                slug\n                name\n              }\n              createdBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n      \n    ": typeof types.DatasetLinksDataGridDocument,
    "\n    fragment DatasetLinksDataGrid_dataset on Dataset {\n      id\n      name\n    }\n  ": typeof types.DatasetLinksDataGrid_DatasetFragmentDoc,
    "\nfragment DatasetLinksDataGrid_dataset on Dataset {\n  id\n  name\n}\n": typeof types.DatasetLinksDataGrid_DatasetFragmentDoc,
    "\nquery DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n": typeof types.DatasetPickerDocument,
    "\n    fragment DatasetPicker_workspace on Workspace {\n      datasets {\n        items {\n          id\n          dataset {\n            slug\n            name\n          }\n        }\n      }\n    }\n  ": typeof types.DatasetPicker_WorkspaceFragmentDoc,
    "\nfragment DatasetPicker_workspace on Workspace {\n  datasets {\n    items {\n      id\n      dataset {\n        slug\n        name\n      }\n    }\n  }\n}\n": typeof types.DatasetPicker_WorkspaceFragmentDoc,
    "\n    fragment DatasetVersionFileColumns_file on DatasetVersionFile {\n      id\n      filename\n      ...ColumnMetadataDrawer_file\n    }\n    \n  ": typeof types.DatasetVersionFileColumns_FileFragmentDoc,
    "\n    fragment DatasetVersionFileColumns_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        permissions {\n          update\n        }\n        workspace {\n          slug\n        }\n      }\n    }\n  ": typeof types.DatasetVersionFileColumns_VersionFragmentDoc,
    "\nfragment DatasetVersionFileColumns_file on DatasetVersionFile {\n  id\n  filename\n  ...ColumnMetadataDrawer_file\n}\n": typeof types.DatasetVersionFileColumns_FileFragmentDoc,
    "\nfragment DatasetVersionFileColumns_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    permissions {\n      update\n    }\n    workspace {\n      slug\n    }\n  }\n}\n": typeof types.DatasetVersionFileColumns_VersionFragmentDoc,
    "\n  query GetDatasetVersionFileSample($id: ID!) {\n    datasetVersionFile(id: $id) {\n      id\n      properties\n      fileSample {\n        sample\n        status\n        statusReason\n      }\n    }\n  }\n": typeof types.GetDatasetVersionFileSampleDocument,
    "\n    fragment DatasetVersionFileSample_file on DatasetVersionFile {\n      id\n      filename\n      contentType\n      size\n      downloadUrl(attachment: false)\n    }\n  ": typeof types.DatasetVersionFileSample_FileFragmentDoc,
    "\n    fragment DatasetVersionFileSample_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        workspace {\n          slug\n        }\n      }\n    }\n  ": typeof types.DatasetVersionFileSample_VersionFragmentDoc,
    "\nfragment DatasetVersionFileSample_file on DatasetVersionFile {\n  id\n  filename\n  contentType\n  size\n  downloadUrl(attachment: false)\n}\n": typeof types.DatasetVersionFileSample_FileFragmentDoc,
    "\nfragment DatasetVersionFileSample_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    workspace {\n      slug\n    }\n  }\n}\n": typeof types.DatasetVersionFileSample_VersionFragmentDoc,
    "\n      query DatasetVersionFilesDataGrid(\n        $versionId: ID!\n        $page: Int = 1\n        $perPage: Int!\n      ) {\n        datasetVersion(id: $versionId) {\n          id\n          files(page: $page, perPage: $perPage) {\n            items {\n              ...DownloadVersionFile_file\n              id\n              contentType\n              createdAt\n              uri\n              filename\n            }\n            totalPages\n            totalItems\n            pageNumber\n          }\n        }\n      }\n      \n    ": typeof types.DatasetVersionFilesDataGridDocument,
    "\n    fragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n      id\n      name\n      permissions {\n        download\n      }\n    }\n  ": typeof types.DatasetVersionFilesDataGrid_VersionFragmentDoc,
    "\nfragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n  id\n  name\n  permissions {\n    download\n  }\n}\n": typeof types.DatasetVersionFilesDataGrid_VersionFragmentDoc,
    "\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}\n": typeof types.DatasetVersionPickerDocument,
    "\n    fragment DatasetVersionPicker_version on DatasetVersion {\n      id\n      name\n      createdAt\n    }\n  ": typeof types.DatasetVersionPicker_VersionFragmentDoc,
    "\n    fragment DatasetVersionPicker_dataset on Dataset {\n      id\n    }\n  ": typeof types.DatasetVersionPicker_DatasetFragmentDoc,
    "\nfragment DatasetVersionPicker_version on DatasetVersion {\n  id\n  name\n  createdAt\n}\n": typeof types.DatasetVersionPicker_VersionFragmentDoc,
    "\nfragment DatasetVersionPicker_dataset on Dataset {\n  id\n}\n": typeof types.DatasetVersionPicker_DatasetFragmentDoc,
    "\n    fragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n      id\n      dataset {\n        name\n        id\n      }\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  ": typeof types.DeleteDatasetLinkTrigger_DatasetLinkFragmentDoc,
    "\nfragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n  id\n  dataset {\n    name\n    id\n  }\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n": typeof types.DeleteDatasetLinkTrigger_DatasetLinkFragmentDoc,
    "\n    fragment DeleteDatasetTrigger_dataset on Dataset {\n      id\n      name\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  ": typeof types.DeleteDatasetTrigger_DatasetFragmentDoc,
    "\nfragment DeleteDatasetTrigger_dataset on Dataset {\n  id\n  name\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n": typeof types.DeleteDatasetTrigger_DatasetFragmentDoc,
    "\n    fragment DownloadVersionFile_file on DatasetVersionFile {\n      id\n      filename\n    }\n  ": typeof types.DownloadVersionFile_FileFragmentDoc,
    "\nfragment DownloadVersionFile_file on DatasetVersionFile {\n  id\n  filename\n}\n": typeof types.DownloadVersionFile_FileFragmentDoc,
    "\n    mutation LinkDatasetDialog($input: LinkDatasetInput!) {\n      linkDataset(input: $input) {\n        success\n        errors\n        link {\n          workspace {\n            slug\n          }\n          id\n        }\n      }\n    }\n  ": typeof types.LinkDatasetDialogDocument,
    "\n    fragment LinkDatasetDialog_dataset on Dataset {\n      id\n      name\n    }\n  ": typeof types.LinkDatasetDialog_DatasetFragmentDoc,
    "\nfragment LinkDatasetDialog_dataset on Dataset {\n  id\n  name\n}\n": typeof types.LinkDatasetDialog_DatasetFragmentDoc,
    "\n    mutation PinDatasetButton($input: PinDatasetInput!) {\n      pinDataset(input: $input) {\n        link {\n          id\n          isPinned\n        }\n        success\n        errors\n      }\n    }\n  ": typeof types.PinDatasetButtonDocument,
    "\n    fragment PinDatasetButton_link on DatasetLink {\n      id\n      isPinned\n      permissions {\n        pin\n      }\n    }\n  ": typeof types.PinDatasetButton_LinkFragmentDoc,
    "\nfragment PinDatasetButton_link on DatasetLink {\n  id\n  isPinned\n  permissions {\n    pin\n  }\n}\n": typeof types.PinDatasetButton_LinkFragmentDoc,
    "\n    fragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n      id\n      dataset {\n        id\n        name\n        slug\n        workspace {\n          slug\n        }\n      }\n      workspace {\n        slug\n      }\n    }\n  ": typeof types.UploadDatasetVersionDialog_DatasetLinkFragmentDoc,
    "\nfragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n  id\n  dataset {\n    id\n    name\n    slug\n    workspace {\n      slug\n    }\n  }\n  workspace {\n    slug\n  }\n}\n": typeof types.UploadDatasetVersionDialog_DatasetLinkFragmentDoc,
    "query DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}": typeof types.DatasetPickerDocument,
    "\n      mutation UpdateDataset($input: UpdateDatasetInput!) {\n        updateDataset(input: $input) {\n          dataset {\n            id\n            name\n            description\n            sharedWithOrganization\n            updatedAt\n          }\n          success\n          errors\n        }\n      }\n    ": typeof types.UpdateDatasetDocument,
    "\n      mutation UpdateDatasetVersion($input: UpdateDatasetVersionInput!) {\n        updateDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    ": typeof types.UpdateDatasetVersionDocument,
    "\n      mutation CreateDatasetVersion($input: CreateDatasetVersionInput!) {\n        createDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    ": typeof types.CreateDatasetVersionDocument,
    "\n      mutation generateDatasetUploadUrl(\n        $input: GenerateDatasetUploadUrlInput!\n      ) {\n        generateDatasetUploadUrl(input: $input) {\n          success\n          errors\n          uploadUrl\n        }\n      }\n    ": typeof types.GenerateDatasetUploadUrlDocument,
    "\n      mutation PrepareVersionFileDownload(\n        $input: PrepareVersionFileDownloadInput!\n      ) {\n        prepareVersionFileDownload(input: $input) {\n          success\n          downloadUrl\n          errors\n        }\n      }\n    ": typeof types.PrepareVersionFileDownloadDocument,
    "\n      mutation CreateDatasetVersionFile(\n        $input: CreateDatasetVersionFileInput!\n      ) {\n        createDatasetVersionFile(input: $input) {\n          success\n          errors\n          file {\n            id\n            uri\n          }\n        }\n      }\n    ": typeof types.CreateDatasetVersionFileDocument,
    "\n      mutation DeleteDatasetLink($input: DeleteDatasetLinkInput!) {\n        deleteDatasetLink(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteDatasetLinkDocument,
    "\n      mutation DeleteDataset($input: DeleteDatasetInput!) {\n        deleteDataset(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteDatasetDocument,
    "\n      mutation SetMetadataAttribute($input: SetMetadataAttributeInput!) {\n        setMetadataAttribute(input: $input) {\n          success\n          errors\n          attribute {\n            id\n            key\n            label\n            value\n            system\n          }\n        }\n      }\n    ": typeof types.SetMetadataAttributeDocument,
    "\n      mutation DeleteMetadataAttribute($input: DeleteMetadataAttributeInput!) {\n        deleteMetadataAttribute(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteMetadataAttributeDocument,
    "\n      query TabularFileMetadata($fileId: ID!) {\n        datasetVersionFile(id: $fileId) {\n          attributes {\n            id\n            key\n            value\n            label\n            system\n            createdAt\n            updatedAt\n            createdBy {\n              displayName\n            }\n            updatedBy {\n              displayName\n            }\n          }\n          properties\n          id\n          targetId\n        }\n      }\n    ": typeof types.TabularFileMetadataDocument,
    "\n    fragment DatasetLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n      slug\n    }\n    \n  ": typeof types.DatasetLayout_WorkspaceFragmentDoc,
    "\n    fragment DatasetLayout_datasetLink on DatasetLink {\n      ...UploadDatasetVersionDialog_datasetLink\n      ...PinDatasetButton_link\n      dataset {\n        workspace {\n          slug\n        }\n        slug\n        permissions {\n          delete\n          createVersion\n        }\n      }\n    }\n    \n    \n  ": typeof types.DatasetLayout_DatasetLinkFragmentDoc,
    "\n    fragment DatasetLayout_version on DatasetVersion {\n      id\n      name\n      ...DatasetVersionPicker_version\n    }\n    \n  ": typeof types.DatasetLayout_VersionFragmentDoc,
    "\nfragment DatasetLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n  slug\n}\n": typeof types.DatasetLayout_WorkspaceFragmentDoc,
    "\nfragment DatasetLayout_datasetLink on DatasetLink {\n  ...UploadDatasetVersionDialog_datasetLink\n  ...PinDatasetButton_link\n  dataset {\n    workspace {\n      slug\n    }\n    slug\n    permissions {\n      delete\n      createVersion\n    }\n  }\n}\n": typeof types.DatasetLayout_DatasetLinkFragmentDoc,
    "\nfragment DatasetLayout_version on DatasetVersion {\n  id\n  name\n  ...DatasetVersionPicker_version\n}\n": typeof types.DatasetLayout_VersionFragmentDoc,
    "\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}\n": typeof types.UpdateUserDocument,
    "\n    fragment UserAvatar_user on User {\n      displayName\n      avatar {\n        initials\n        color\n      }\n    }\n  ": typeof types.UserAvatar_UserFragmentDoc,
    "\nfragment UserAvatar_user on User {\n  displayName\n  avatar {\n    initials\n    color\n  }\n}\n": typeof types.UserAvatar_UserFragmentDoc,
    "mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation Logout {\n  logout {\n    success\n  }\n}\n\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation GenerateChallenge {\n  generateChallenge {\n    success\n    errors\n  }\n}\n\nmutation VerifyDevice($input: VerifyDeviceInput!) {\n  verifyDevice(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation DisableTwoFactor($input: DisableTwoFactorInput!) {\n  disableTwoFactor(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation EnableTwoFactor {\n  enableTwoFactor {\n    success\n    verified\n    errors\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}": typeof types.ResetPasswordDocument,
    "query GetUser {\n  me {\n    hasTwoFactorEnabled\n    permissions {\n      adminPanel\n      superUser\n      createWorkspace\n    }\n    features {\n      code\n    }\n    user {\n      ...UserAvatar_user\n      email\n      id\n      firstName\n      lastName\n      displayName\n      language\n      avatar {\n        initials\n        color\n      }\n    }\n  }\n}\n\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}": typeof types.GetUserDocument,
    "query notebooksPage {\n  notebooksUrl\n}": typeof types.NotebooksPageDocument,
    "\n    fragment WorkspaceRole on WorkspaceMembership {\n      role\n      workspace {\n        name\n        slug\n      }\n    }\n  ": typeof types.WorkspaceRoleFragmentDoc,
    "\nfragment WorkspaceRole on WorkspaceMembership {\n  role\n  workspace {\n    name\n    slug\n  }\n}\n": typeof types.WorkspaceRoleFragmentDoc,
    "\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n": typeof types.OrganizationDatasetsDocument,
    "\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeleteOrganizationInvitationDocument,
    "query OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}": typeof types.OrganizationInvitationsDocument,
    "\nquery OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n": typeof types.OrganizationInvitationsDocument,
    "\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.ResendOrganizationInvitationDocument,
    "\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.InviteOrganizationMemberDocument,
    "\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeleteOrganizationMemberDocument,
    "query OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}": typeof types.OrganizationMembersDocument,
    "\nquery OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n": typeof types.OrganizationMembersDocument,
    "\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n": typeof types.UpdateOrganizationMemberDocument,
    "\n    fragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n      id\n      role\n      workspaceMemberships {\n        id\n        role\n        workspace {\n          slug\n          name\n        }\n      }\n      user {\n        id\n        displayName\n        email\n      }\n    }\n  ": typeof types.UpdateOrganizationMemberDialog_OrganizationMemberFragmentDoc,
    "\n    fragment UpdateOrganizationMemberDialog_workspace on Workspace {\n      slug\n      name\n    }\n  ": typeof types.UpdateOrganizationMemberDialog_WorkspaceFragmentDoc,
    "\nfragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n  id\n  role\n  workspaceMemberships {\n    id\n    role\n    workspace {\n      slug\n      name\n    }\n  }\n  user {\n    id\n    displayName\n    email\n  }\n}\n": typeof types.UpdateOrganizationMemberDialog_OrganizationMemberFragmentDoc,
    "\nfragment UpdateOrganizationMemberDialog_workspace on Workspace {\n  slug\n  name\n}\n": typeof types.UpdateOrganizationMemberDialog_WorkspaceFragmentDoc,
    "query OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation DeleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}": typeof types.OrganizationWorkspaceInvitationsDocument,
    "\nquery OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n": typeof types.OrganizationWorkspaceInvitationsDocument,
    "fragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n\nquery Organizations {\n  organizations {\n    id\n    name\n    workspaces {\n      items {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}": typeof types.Organization_OrganizationFragmentDoc,
    "\nfragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n": typeof types.Organization_OrganizationFragmentDoc,
    "\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n": typeof types.OrganizationDataset_LinkFragmentDoc,
    "\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n": typeof types.OrganizationWorkspace_WorkspaceFragmentDoc,
    "\nmutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n": typeof types.ResetPasswordDocument,
    "\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n": typeof types.SetPasswordDocument,
    "\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.LoginDocument,
    "\nquery notebooksPage {\n  notebooksUrl\n}\n": typeof types.NotebooksPageDocument,
    "\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}\n": typeof types.OrganizationWorkspacesDocument,
    "\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n": typeof types.OrganizationDocument,
    "\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n": typeof types.PipelinePageDocument,
    "\nmutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n": typeof types.UpdatePipelineDocument,
    "\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n": typeof types.PipelineConfigureRunPageDocument,
    "\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n": typeof types.PipelineRunPageDocument,
    "\nquery PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n": typeof types.PipelinesPageDocument,
    "\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}\n": typeof types.RegisterPageDocument,
    "\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.RegisterDocument,
    "\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n": typeof types.JoinWorkspaceDocument,
    "\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n": typeof types.DeclineWorkspaceInvitationDocument,
    "\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n": typeof types.AccountPageDocument,
    "\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n": typeof types.ConnectionPageDocument,
    "\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n": typeof types.UpdateConnectionDocument,
    "\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n": typeof types.ConnectionsPageDocument,
    "\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": typeof types.WorkspaceDatabaseTablePageDocument,
    "\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": typeof types.WorkspaceDatabasesPageDocument,
    "\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n": typeof types.WorkspaceDatasetAccessPageDocument,
    "\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n": typeof types.WorkspaceDatasetFilesPageDocument,
    "\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n": typeof types.WorkspaceDatasetIndexPageDocument,
    "\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n": typeof types.WorkspaceDatasetsPageDocument,
    "\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n": typeof types.WorkspaceFilesPageDocument,
    "\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": typeof types.WorkspacePageDocument,
    "\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n": typeof types.UpdateWorkspaceDocument,
    "\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n": typeof types.WorkspaceNotebooksPageDocument,
    "\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n": typeof types.WorkspacePipelineCodePageDocument,
    "\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n": typeof types.GetPipelineVersionFilesDocument,
    "\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n": typeof types.WorkspacePipelinePageDocument,
    "\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n": typeof types.WorkspacePipelineNotificationsPageDocument,
    "\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n": typeof types.WorkspacePipelineRunPageDocument,
    "\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n": typeof types.WorkspacePipelineRunsPageDocument,
    "\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n": typeof types.WorkspacePipelineVersionsPageDocument,
    "\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n": typeof types.WorkspaceTemplatePageDocument,
    "\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n": typeof types.WorkspaceTemplateVersionsPageDocument,
    "\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n": typeof types.WorkspaceWebappPageDocument,
    "\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n": typeof types.WorkspaceWebappsPageDocument,
    "\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n": typeof types.CheckWorkspaceAvailabilityDocument,
    "\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeletePipelineTemplateDocument,
    "\n    fragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n      id\n      name\n    }\n  ": typeof types.PipelineTemplateDialog_PipelineTemplateFragmentDoc,
    "\nfragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n  id\n  name\n}\n": typeof types.PipelineTemplateDialog_PipelineTemplateFragmentDoc,
    "\n    fragment DownloadPipelineVersion_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n        code\n      }\n    }\n  ": typeof types.DownloadPipelineVersion_VersionFragmentDoc,
    "\nfragment DownloadPipelineVersion_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n    code\n  }\n}\n": typeof types.DownloadPipelineVersion_VersionFragmentDoc,
    "\n    fragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n      id\n    }\n  ": typeof types.DownloadTemplateVersion_VersionFragmentDoc,
    "\nfragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n  id\n}\n": typeof types.DownloadTemplateVersion_VersionFragmentDoc,
    "\n    fragment PipelineMetadataDisplay_pipeline on Pipeline {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  ": typeof types.PipelineMetadataDisplay_PipelineFragmentDoc,
    "\n    fragment PipelineMetadataDisplay_template on PipelineTemplate {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  ": typeof types.PipelineMetadataDisplay_TemplateFragmentDoc,
    "\nfragment PipelineMetadataDisplay_pipeline on Pipeline {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n": typeof types.PipelineMetadataDisplay_PipelineFragmentDoc,
    "\nfragment PipelineMetadataDisplay_template on PipelineTemplate {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n": typeof types.PipelineMetadataDisplay_TemplateFragmentDoc,
    "\n    fragment PipelineRunDataCard_dag on DAG {\n      id\n      externalId\n      label\n      ...PipelineRunReadonlyForm_dag\n    }\n    \n  ": typeof types.PipelineRunDataCard_DagFragmentDoc,
    "\n    fragment PipelineRunDataCard_dagRun on DAGRun {\n      id\n      label\n      externalId\n      externalUrl\n      executionDate\n      triggerMode\n      status\n      config\n      duration\n      outputs {\n        ...PipelineRunOutputEntry_output\n      }\n      user {\n        displayName\n        ...UserProperty_user\n      }\n      progress\n      messages {\n        __typename\n      }\n      ...RunMessages_dagRun\n      ...RunLogs_dagRun\n      ...PipelineRunReadonlyForm_dagRun\n      ...PipelineRunFavoriteTrigger_run\n    }\n    \n    \n    \n    \n    \n    \n  ": typeof types.PipelineRunDataCard_DagRunFragmentDoc,
    "\nfragment PipelineRunDataCard_dag on DAG {\n  id\n  externalId\n  label\n  ...PipelineRunReadonlyForm_dag\n}\n": typeof types.PipelineRunDataCard_DagFragmentDoc,
    "\nfragment PipelineRunDataCard_dagRun on DAGRun {\n  id\n  label\n  externalId\n  externalUrl\n  executionDate\n  triggerMode\n  status\n  config\n  duration\n  outputs {\n    ...PipelineRunOutputEntry_output\n  }\n  user {\n    displayName\n    ...UserProperty_user\n  }\n  progress\n  messages {\n    __typename\n  }\n  ...RunMessages_dagRun\n  ...RunLogs_dagRun\n  ...PipelineRunReadonlyForm_dagRun\n  ...PipelineRunFavoriteTrigger_run\n}\n": typeof types.PipelineRunDataCard_DagRunFragmentDoc,
    "\n    fragment PipelineRunFavoriteIcon_run on DAGRun {\n      isFavorite\n    }\n  ": typeof types.PipelineRunFavoriteIcon_RunFragmentDoc,
    "\nfragment PipelineRunFavoriteIcon_run on DAGRun {\n  isFavorite\n}\n": typeof types.PipelineRunFavoriteIcon_RunFragmentDoc,
    "\n    mutation setFavoriteRun($input: SetDAGRunFavoriteInput!) {\n      setDAGRunFavorite(input: $input) {\n        success\n        errors\n        dagRun {\n          id\n          label\n          isFavorite\n        }\n      }\n    }\n  ": typeof types.SetFavoriteRunDocument,
    "\n    fragment PipelineRunFavoriteTrigger_run on DAGRun {\n      id\n      label\n      isFavorite\n      ...PipelineRunFavoriteIcon_run\n    }\n    \n  ": typeof types.PipelineRunFavoriteTrigger_RunFragmentDoc,
    "\nfragment PipelineRunFavoriteTrigger_run on DAGRun {\n  id\n  label\n  isFavorite\n  ...PipelineRunFavoriteIcon_run\n}\n": typeof types.PipelineRunFavoriteTrigger_RunFragmentDoc,
    "\n    fragment PipelineRunForm_dag on DAG {\n      template {\n        sampleConfig\n      }\n      formCode\n      id\n    }\n  ": typeof types.PipelineRunForm_DagFragmentDoc,
    "\nfragment PipelineRunForm_dag on DAG {\n  template {\n    sampleConfig\n  }\n  formCode\n  id\n}\n": typeof types.PipelineRunForm_DagFragmentDoc,
    "\n    fragment PipelineRunReadonlyForm_dag on DAG {\n      formCode\n      id\n    }\n  ": typeof types.PipelineRunReadonlyForm_DagFragmentDoc,
    "\n    fragment PipelineRunReadonlyForm_dagRun on DAGRun {\n      config\n    }\n  ": typeof types.PipelineRunReadonlyForm_DagRunFragmentDoc,
    "\nfragment PipelineRunReadonlyForm_dag on DAG {\n  formCode\n  id\n}\n": typeof types.PipelineRunReadonlyForm_DagFragmentDoc,
    "\nfragment PipelineRunReadonlyForm_dagRun on DAGRun {\n  config\n}\n": typeof types.PipelineRunReadonlyForm_DagRunFragmentDoc,
    "\n    fragment PipelineRunOutputEntry_output on DAGRunOutput {\n      title\n      uri\n    }\n  ": typeof types.PipelineRunOutputEntry_OutputFragmentDoc,
    "\nfragment PipelineRunOutputEntry_output on DAGRunOutput {\n  title\n  uri\n}\n": typeof types.PipelineRunOutputEntry_OutputFragmentDoc,
    "\n    fragment PipelineRunStatusBadge_run on PipelineRun {\n      id\n      status\n      ...usePipelineRunPoller_run\n    }\n    \n  ": typeof types.PipelineRunStatusBadge_RunFragmentDoc,
    "\nfragment PipelineRunStatusBadge_run on PipelineRun {\n  id\n  status\n  ...usePipelineRunPoller_run\n}\n": typeof types.PipelineRunStatusBadge_RunFragmentDoc,
    "\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n": typeof types.CreatePipelineFromTemplateVersionDocument,
    "\nquery GetPipelineTemplates($page: Int!, $perPage: Int!, $search: String, $currentWorkspaceSlug: String!, $workspaceSlug: String, $tags: [String!], $functionalType: PipelineFunctionalType) {\n  workspace(slug: $currentWorkspaceSlug) {\n    slug\n    pipelineTemplateTags\n  }\n  pipelineTemplates(\n    page: $page\n    perPage: $perPage\n    search: $search\n    workspaceSlug: $workspaceSlug\n    tags: $tags\n    functionalType: $functionalType\n  ) {\n    pageNumber\n    totalPages\n    totalItems\n    items {\n      id\n      description\n      code\n      name\n      functionalType\n      tags {\n        id\n        name\n      }\n      permissions {\n        delete\n      }\n      workspace {\n        slug\n        name\n      }\n      currentVersion {\n        id\n        versionNumber\n        createdAt\n        user {\n          ...User_user\n        }\n        template {\n          sourcePipeline {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n": typeof types.GetPipelineTemplatesDocument,
    "\n  query GetPipelineTemplates(\n    $page: Int!\n    $perPage: Int!\n    $search: String\n    $currentWorkspaceSlug: String!\n    $workspaceSlug: String\n    $tags: [String!]\n    $functionalType: PipelineFunctionalType\n  ) {\n    workspace(slug: $currentWorkspaceSlug) {\n      slug\n      pipelineTemplateTags\n    }\n    pipelineTemplates(\n      page: $page\n      perPage: $perPage\n      search: $search\n      workspaceSlug: $workspaceSlug\n      tags: $tags\n      functionalType: $functionalType\n    ) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        id\n        description\n        code\n        name\n        functionalType\n        tags {\n          id\n          name\n        }\n        permissions {\n          delete\n        }\n        workspace {\n          slug\n          name\n        }\n        currentVersion {\n          id\n          versionNumber\n          createdAt\n          user {\n            ...User_user\n          }\n          template {\n            sourcePipeline {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetPipelineTemplatesDocument,
    "\n    fragment PipelineTemplates_workspace on Workspace {\n      slug\n    }\n  ": typeof types.PipelineTemplates_WorkspaceFragmentDoc,
    "\nfragment PipelineTemplates_workspace on Workspace {\n  slug\n}\n": typeof types.PipelineTemplates_WorkspaceFragmentDoc,
    "\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n": typeof types.UpdatePipelineVersionDocument,
    "\n    fragment PipelineVersionCard_version on PipelineVersion {\n      id\n      versionName\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n      pipeline {\n        id\n        code\n      }\n      templateVersion {\n        id\n        versionNumber\n        template {\n          id\n          name\n        }\n      }\n      ...DownloadPipelineVersion_version\n      ...DeletePipelineVersionTrigger_version\n    }\n    \n    \n  ": typeof types.PipelineVersionCard_VersionFragmentDoc,
    "\nfragment PipelineVersionCard_version on PipelineVersion {\n  id\n  versionName\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n  pipeline {\n    id\n    code\n  }\n  templateVersion {\n    id\n    versionNumber\n    template {\n      id\n      name\n    }\n  }\n  ...DownloadPipelineVersion_version\n  ...DeletePipelineVersionTrigger_version\n}\n": typeof types.PipelineVersionCard_VersionFragmentDoc,
    "\n    fragment PipelineVersionParametersTable_version on PipelineVersion {\n      id\n      parameters {\n        ...ParameterField_parameter\n      }\n      config\n    }\n  ": typeof types.PipelineVersionParametersTable_VersionFragmentDoc,
    "\nfragment PipelineVersionParametersTable_version on PipelineVersion {\n  id\n  parameters {\n    ...ParameterField_parameter\n  }\n  config\n}\n": typeof types.PipelineVersionParametersTable_VersionFragmentDoc,
    "\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n": typeof types.WorkspacePipelinesPageDocument,
    "\n    fragment Pipelines_workspace on Workspace {\n      slug\n    }\n  ": typeof types.Pipelines_WorkspaceFragmentDoc,
    "\nfragment Pipelines_workspace on Workspace {\n  slug\n}\n": typeof types.Pipelines_WorkspaceFragmentDoc,
    "\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n": typeof types.PipelinesPickerDocument,
    "\n    fragment PipelinesPicker_value on DAG {\n      id\n      externalId\n    }\n  ": typeof types.PipelinesPicker_ValueFragmentDoc,
    "\nfragment PipelinesPicker_value on DAG {\n  id\n  externalId\n}\n": typeof types.PipelinesPicker_ValueFragmentDoc,
    "\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n": typeof types.CreatePipelineTemplateVersionDocument,
    "\n    fragment PipelinePublish_pipeline on Pipeline {\n      id\n      name\n      description\n      currentVersion {\n        id\n        versionName\n      }\n      template {\n        id\n        name\n      }\n    }\n  ": typeof types.PipelinePublish_PipelineFragmentDoc,
    "\n    fragment PipelinePublish_workspace on Workspace {\n      slug\n    }\n  ": typeof types.PipelinePublish_WorkspaceFragmentDoc,
    "\nfragment PipelinePublish_pipeline on Pipeline {\n  id\n  name\n  description\n  currentVersion {\n    id\n    versionName\n  }\n  template {\n    id\n    name\n  }\n}\n": typeof types.PipelinePublish_PipelineFragmentDoc,
    "\nfragment PipelinePublish_workspace on Workspace {\n  slug\n}\n": typeof types.PipelinePublish_WorkspaceFragmentDoc,
    "\n    fragment RunLogs_dagRun on DAGRun {\n      id\n      logs\n      status\n    }\n  ": typeof types.RunLogs_DagRunFragmentDoc,
    "\n    fragment RunLogs_run on PipelineRun {\n      id\n      logs\n      status\n    }\n  ": typeof types.RunLogs_RunFragmentDoc,
    "\nfragment RunLogs_dagRun on DAGRun {\n  id\n  logs\n  status\n}\n": typeof types.RunLogs_DagRunFragmentDoc,
    "\nfragment RunLogs_run on PipelineRun {\n  id\n  logs\n  status\n}\n": typeof types.RunLogs_RunFragmentDoc,
    "\n    fragment RunMessages_dagRun on DAGRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  ": typeof types.RunMessages_DagRunFragmentDoc,
    "\n    fragment RunMessages_run on PipelineRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  ": typeof types.RunMessages_RunFragmentDoc,
    "\nfragment RunMessages_dagRun on DAGRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n": typeof types.RunMessages_DagRunFragmentDoc,
    "\nfragment RunMessages_run on PipelineRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n": typeof types.RunMessages_RunFragmentDoc,
    "\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}\n": typeof types.UpdateTemplateVersionDocument,
    "\n    fragment TemplateVersionCard_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      changelog\n      createdAt\n      isLatestVersion\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      template {\n        id\n        code\n      }\n      ...DeleteTemplateVersionTrigger_version\n    }\n    \n  ": typeof types.TemplateVersionCard_VersionFragmentDoc,
    "\nfragment TemplateVersionCard_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  changelog\n  createdAt\n  isLatestVersion\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  template {\n    id\n    code\n  }\n  ...DeleteTemplateVersionTrigger_version\n}\n": typeof types.TemplateVersionCard_VersionFragmentDoc,
    "\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.UpgradePipelineVersionFromTemplateDocument,
    "\n    fragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n      id\n      code\n      newTemplateVersions {\n        id\n        versionNumber\n        changelog\n        createdAt\n      }\n    }\n  ": typeof types.UpgradePipelineFromTemplateDialog_PipelineFragmentDoc,
    "\nfragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n  id\n  code\n  newTemplateVersions {\n    id\n    versionNumber\n    changelog\n    createdAt\n  }\n}\n": typeof types.UpgradePipelineFromTemplateDialog_PipelineFragmentDoc,
    "mutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}": typeof types.UpdatePipelineDocument,
    "query PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}": typeof types.PipelinesPageDocument,
    "\n      mutation RunPipeline($input: RunDAGInput!) {\n        runDAG(input: $input) {\n          success\n          errors\n          dag {\n            id\n          }\n          dagRun {\n            id\n            externalUrl\n            externalId\n          }\n        }\n      }\n    ": typeof types.RunPipelineDocument,
    "\n      query GetPipelineVersion($versionId: UUID!) {\n        pipelineVersion(id: $versionId) {\n          id\n          versionName\n          pipeline {\n            code\n          }\n          zipfile\n        }\n      }\n    ": typeof types.GetPipelineVersionDocument,
    "\n        query GetPipelineRun($runId: UUID!) {\n          dagRun(id: $runId) {\n            config\n            externalUrl\n            externalId\n            status\n            executionDate\n            duration\n          }\n        }\n      ": typeof types.GetPipelineRunDocument,
    "\n      mutation GetRunOutputDownloadURL($input: PrepareDownloadURLInput!) {\n        prepareDownloadURL(input: $input) {\n          success\n          url\n        }\n      }\n    ": typeof types.GetRunOutputDownloadUrlDocument,
    "\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}\n": typeof types.PipelineRunPollerDocument,
    "\n    fragment usePipelineRunPoller_run on PipelineRun {\n      id\n      status\n    }\n  ": typeof types.UsePipelineRunPoller_RunFragmentDoc,
    "\nfragment usePipelineRunPoller_run on PipelineRun {\n  id\n  status\n}\n": typeof types.UsePipelineRunPoller_RunFragmentDoc,
    "\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.RemoveFromFavoritesDocument,
    "\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.AddToFavoritesDocument,
    "\n    fragment FavoriteWebappButton_webapp on Webapp {\n      id\n      isFavorite\n    }\n  ": typeof types.FavoriteWebappButton_WebappFragmentDoc,
    "\nfragment FavoriteWebappButton_webapp on Webapp {\n  id\n  isFavorite\n}\n": typeof types.FavoriteWebappButton_WebappFragmentDoc,
    "\n    fragment WebappCard_webapp on Webapp {\n      id\n      icon\n      name\n      workspace {\n        slug\n        name\n      }\n    }\n  ": typeof types.WebappCard_WebappFragmentDoc,
    "\nfragment WebappCard_webapp on Webapp {\n  id\n  icon\n  name\n  workspace {\n    slug\n    name\n  }\n}\n": typeof types.WebappCard_WebappFragmentDoc,
    "\nmutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.UpdateWebappDocument,
    "\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n": typeof types.CreateWebappDocument,
    "\n    fragment WebappForm_webapp on Webapp {\n      id\n      name\n      description\n      url\n      icon\n      permissions {\n        update\n        delete\n      }\n    }\n  ": typeof types.WebappForm_WebappFragmentDoc,
    "\n    fragment WebappForm_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n    }\n    \n  ": typeof types.WebappForm_WorkspaceFragmentDoc,
    "\nfragment WebappForm_webapp on Webapp {\n  id\n  name\n  description\n  url\n  icon\n  permissions {\n    update\n    delete\n  }\n}\n": typeof types.WebappForm_WebappFragmentDoc,
    "\nfragment WebappForm_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n}\n": typeof types.WebappForm_WorkspaceFragmentDoc,
    "mutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}": typeof types.UpdateWebappDocument,
    "\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.ArchiveWorkspaceDocument,
    "\n    fragment ArchiveWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  ": typeof types.ArchiveWorkspace_WorkspaceFragmentDoc,
    "\nfragment ArchiveWorkspace_workspace on Workspace {\n  slug\n  name\n}\n": typeof types.ArchiveWorkspace_WorkspaceFragmentDoc,
    "\n    fragment BucketExplorer_workspace on Workspace {\n      slug\n      ...DownloadBucketObject_workspace\n      ...DeleteBucketObject_workspace\n    }\n\n    \n    \n  ": typeof types.BucketExplorer_WorkspaceFragmentDoc,
    "\n    fragment BucketExplorer_objects on BucketObjectPage {\n      hasNextPage\n      hasPreviousPage\n      pageNumber\n      items {\n        key\n        name\n        path\n        size\n        updatedAt\n        type\n        ...DownloadBucketObject_object\n        ...DeleteBucketObject_object\n      }\n    }\n    \n    \n  ": typeof types.BucketExplorer_ObjectsFragmentDoc,
    "\nfragment BucketExplorer_workspace on Workspace {\n  slug\n  ...DownloadBucketObject_workspace\n  ...DeleteBucketObject_workspace\n}\n": typeof types.BucketExplorer_WorkspaceFragmentDoc,
    "\nfragment BucketExplorer_objects on BucketObjectPage {\n  hasNextPage\n  hasPreviousPage\n  pageNumber\n  items {\n    key\n    name\n    path\n    size\n    updatedAt\n    type\n    ...DownloadBucketObject_object\n    ...DeleteBucketObject_object\n  }\n}\n": typeof types.BucketExplorer_ObjectsFragmentDoc,
    "\n    query ObjectPicker(\n      $slug: String!\n      $page: Int\n      $perPage: Int\n      $prefix: String\n    ) {\n      workspace(slug: $slug) {\n        slug\n        bucket {\n          objects(page: $page, perPage: $perPage, prefix: $prefix) {\n            items {\n              name\n              key\n              path\n              type\n              updatedAt\n            }\n            pageNumber\n            hasNextPage\n          }\n        }\n      }\n    }\n  ": typeof types.ObjectPickerDocument,
    "\n    fragment BucketObjectPicker_workspace on Workspace {\n      slug\n    }\n  ": typeof types.BucketObjectPicker_WorkspaceFragmentDoc,
    "\nfragment BucketObjectPicker_workspace on Workspace {\n  slug\n}\n": typeof types.BucketObjectPicker_WorkspaceFragmentDoc,
    "\n    fragment ConnectionFieldsSection_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n        value\n        secret\n      }\n      permissions {\n        update\n      }\n      ...UpdateConnectionFieldsDialog_connection\n    }\n    \n  ": typeof types.ConnectionFieldsSection_ConnectionFragmentDoc,
    "\nfragment ConnectionFieldsSection_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n    value\n    secret\n  }\n  permissions {\n    update\n  }\n  ...UpdateConnectionFieldsDialog_connection\n}\n": typeof types.ConnectionFieldsSection_ConnectionFragmentDoc,
    "\n    fragment ConnectionUsageSnippets_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n      }\n    }\n  ": typeof types.ConnectionUsageSnippets_ConnectionFragmentDoc,
    "\nfragment ConnectionUsageSnippets_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n  }\n}\n": typeof types.ConnectionUsageSnippets_ConnectionFragmentDoc,
    "\n    fragment CreateBucketFolderDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n      bucket {\n        name\n      }\n    }\n  ": typeof types.CreateBucketFolderDialog_WorkspaceFragmentDoc,
    "\nfragment CreateBucketFolderDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n  bucket {\n    name\n  }\n}\n": typeof types.CreateBucketFolderDialog_WorkspaceFragmentDoc,
    "\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n": typeof types.CreateConnectionDocument,
    "\n    fragment CreateConnectionDialog_workspace on Workspace {\n      slug\n    }\n  ": typeof types.CreateConnectionDialog_WorkspaceFragmentDoc,
    "\nfragment CreateConnectionDialog_workspace on Workspace {\n  slug\n}\n": typeof types.CreateConnectionDialog_WorkspaceFragmentDoc,
    "\nfragment CreatePipelineDialog_workspace on Workspace {\n  slug\n  ...BucketObjectPicker_workspace\n}\n": typeof types.CreatePipelineDialog_WorkspaceFragmentDoc,
    "\nmutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n": typeof types.CreateWorkspaceDocument,
    "\nquery DatabaseTableDataGrid($workspaceSlug: String!, $tableName: String!, $orderBy: String!, $direction: OrderByDirection!, $page: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    database {\n      table(name: $tableName) {\n        rows(orderBy: $orderBy, direction: $direction, page: $page, perPage: 10) {\n          pageNumber\n          hasNextPage\n          hasPreviousPage\n          items\n        }\n      }\n    }\n  }\n}\n": typeof types.DatabaseTableDataGridDocument,
    "\n      query DatabaseTableDataGrid(\n        $workspaceSlug: String!\n        $tableName: String!\n        $orderBy: String!\n        $direction: OrderByDirection!\n        $page: Int!\n      ) {\n        workspace(slug: $workspaceSlug) {\n          slug\n          database {\n            table(name: $tableName) {\n              rows(\n                orderBy: $orderBy\n                direction: $direction\n                page: $page\n                perPage: 10\n              ) {\n                pageNumber\n                hasNextPage\n                hasPreviousPage\n                items\n              }\n            }\n          }\n        }\n      }\n    ": typeof types.DatabaseTableDataGridDocument,
    "\n    fragment DatabaseTableDataGrid_workspace on Workspace {\n      slug\n    }\n  ": typeof types.DatabaseTableDataGrid_WorkspaceFragmentDoc,
    "\n    fragment DatabaseTableDataGrid_table on DatabaseTable {\n      name\n      columns {\n        name\n      }\n    }\n  ": typeof types.DatabaseTableDataGrid_TableFragmentDoc,
    "\n  fragment DatabaseTableDataGrid_workspace on Workspace {\n    slug\n  }\n": typeof types.DatabaseTableDataGrid_WorkspaceFragmentDoc,
    "\n  fragment DatabaseTableDataGrid_table on DatabaseTable {\n    name\n    columns {\n      name\n    }\n  }\n": typeof types.DatabaseTableDataGrid_TableFragmentDoc,
    "\n    fragment DatabaseVariablesSection_workspace on Workspace {\n      slug\n      database {\n        credentials {\n          dbName\n          username\n          password\n          host\n          port\n          url\n        }\n      }\n    }\n  ": typeof types.DatabaseVariablesSection_WorkspaceFragmentDoc,
    "\nfragment DatabaseVariablesSection_workspace on Workspace {\n  slug\n  database {\n    credentials {\n      dbName\n      username\n      password\n      host\n      port\n      url\n    }\n  }\n}\n": typeof types.DatabaseVariablesSection_WorkspaceFragmentDoc,
    "\n    fragment DeleteBucketObject_workspace on Workspace {\n      slug\n      permissions {\n        deleteObject\n      }\n    }\n  ": typeof types.DeleteBucketObject_WorkspaceFragmentDoc,
    "\n    fragment DeleteBucketObject_object on BucketObject {\n      key\n      name\n      type\n    }\n  ": typeof types.DeleteBucketObject_ObjectFragmentDoc,
    "\nfragment DeleteBucketObject_workspace on Workspace {\n  slug\n  permissions {\n    deleteObject\n  }\n}\n": typeof types.DeleteBucketObject_WorkspaceFragmentDoc,
    "\nfragment DeleteBucketObject_object on BucketObject {\n  key\n  name\n  type\n}\n": typeof types.DeleteBucketObject_ObjectFragmentDoc,
    "\n    fragment DeleteConnectionTrigger_workspace on Workspace {\n      slug\n    }\n  ": typeof types.DeleteConnectionTrigger_WorkspaceFragmentDoc,
    "\n    fragment DeleteConnectionTrigger_connection on Connection {\n      id\n      name\n      permissions {\n        delete\n      }\n    }\n  ": typeof types.DeleteConnectionTrigger_ConnectionFragmentDoc,
    "\nfragment DeleteConnectionTrigger_workspace on Workspace {\n  slug\n}\n": typeof types.DeleteConnectionTrigger_WorkspaceFragmentDoc,
    "\nfragment DeleteConnectionTrigger_connection on Connection {\n  id\n  name\n  permissions {\n    delete\n  }\n}\n": typeof types.DeleteConnectionTrigger_ConnectionFragmentDoc,
    "\n    fragment DatabaseTableDeleteTrigger_workspace on Workspace {\n      slug\n      permissions {\n        deleteDatabaseTable\n      }\n    }\n  ": typeof types.DatabaseTableDeleteTrigger_WorkspaceFragmentDoc,
    "\n    fragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n      name\n    }\n  ": typeof types.DatabaseTableDeleteTrigger_DatabaseFragmentDoc,
    "\nfragment DatabaseTableDeleteTrigger_workspace on Workspace {\n  slug\n  permissions {\n    deleteDatabaseTable\n  }\n}\n": typeof types.DatabaseTableDeleteTrigger_WorkspaceFragmentDoc,
    "\nfragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n  name\n}\n": typeof types.DatabaseTableDeleteTrigger_DatabaseFragmentDoc,
    "\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeletePipelineDocument,
    "\n    fragment PipelineDelete_pipeline on Pipeline {\n      id\n      name\n      code\n    }\n  ": typeof types.PipelineDelete_PipelineFragmentDoc,
    "\n    fragment PipelineDelete_workspace on Workspace {\n      slug\n    }\n  ": typeof types.PipelineDelete_WorkspaceFragmentDoc,
    "\nfragment PipelineDelete_pipeline on Pipeline {\n  id\n  name\n  code\n}\n": typeof types.PipelineDelete_PipelineFragmentDoc,
    "\nfragment PipelineDelete_workspace on Workspace {\n  slug\n}\n": typeof types.PipelineDelete_WorkspaceFragmentDoc,
    "\n    fragment DeletePipelineVersionTrigger_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  ": typeof types.DeletePipelineVersionTrigger_VersionFragmentDoc,
    "\nfragment DeletePipelineVersionTrigger_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n": typeof types.DeletePipelineVersionTrigger_VersionFragmentDoc,
    "\n    fragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      template {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  ": typeof types.DeleteTemplateVersionTrigger_VersionFragmentDoc,
    "\nfragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  template {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n": typeof types.DeleteTemplateVersionTrigger_VersionFragmentDoc,
    "\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeleteWebappDocument,
    "\n    fragment WebappDelete_webapp on Webapp {\n      id\n      name\n    }\n  ": typeof types.WebappDelete_WebappFragmentDoc,
    "\n    fragment WebappDelete_workspace on Workspace {\n      slug\n    }\n  ": typeof types.WebappDelete_WorkspaceFragmentDoc,
    "\nfragment WebappDelete_webapp on Webapp {\n  id\n  name\n}\n": typeof types.WebappDelete_WebappFragmentDoc,
    "\nfragment WebappDelete_workspace on Workspace {\n  slug\n}\n": typeof types.WebappDelete_WorkspaceFragmentDoc,
    "\n    fragment DownloadBucketObject_workspace on Workspace {\n      slug\n    }\n  ": typeof types.DownloadBucketObject_WorkspaceFragmentDoc,
    "\n    fragment DownloadBucketObject_object on BucketObject {\n      key\n    }\n  ": typeof types.DownloadBucketObject_ObjectFragmentDoc,
    "\nfragment DownloadBucketObject_workspace on Workspace {\n  slug\n}\n": typeof types.DownloadBucketObject_WorkspaceFragmentDoc,
    "\nfragment DownloadBucketObject_object on BucketObject {\n  key\n}\n": typeof types.DownloadBucketObject_ObjectFragmentDoc,
    "query FileBrowserDialog($slug: String!, $page: Int, $perPage: Int, $prefix: String, $query: String = \"\", $workspaceSlugs: [String!] = [], $useSearch: Boolean!) {\n  searchResults: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    prefix: $prefix\n  ) @include(if: $useSearch) {\n    totalItems\n    totalPages\n    pageNumber\n    items {\n      file {\n        name\n        key\n        path\n        type\n        updatedAt\n        size\n      }\n      score\n    }\n  }\n  workspace(slug: $slug) @skip(if: $useSearch) {\n    slug\n    bucket {\n      objects(page: $page, perPage: $perPage, prefix: $prefix) {\n        items {\n          ...FileBrowserDialog_bucketObject\n        }\n        pageNumber\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}": typeof types.FileBrowserDialogDocument,
    "\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}\n": typeof types.FileBrowserDialog_BucketObjectFragmentDoc,
    "\n    fragment FilesEditor_file on FileNode {\n      id\n      name\n      path\n      type\n      content\n      parentId\n      autoSelect\n      language\n      lineCount\n    }\n  ": typeof types.FilesEditor_FileFragmentDoc,
    "\nfragment FilesEditor_file on FileNode {\n  id\n  name\n  path\n  type\n  content\n  parentId\n  autoSelect\n  language\n  lineCount\n}\n": typeof types.FilesEditor_FileFragmentDoc,
    "\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}\n": typeof types.UploadPipelineDocument,
    "\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.GenerateNewDatabasePasswordDocument,
    "\n    fragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n      slug\n    }\n  ": typeof types.GenerateWorkspaceDatabasePasswordDialog_WorkspaceFragmentDoc,
    "\nfragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n  slug\n}\n": typeof types.GenerateWorkspaceDatabasePasswordDialog_WorkspaceFragmentDoc,
    "\n    mutation generateWebhookPipelineWebhookUrl(\n      $input: GeneratePipelineWebhookUrlInput!\n    ) {\n      generatePipelineWebhookUrl(input: $input) {\n        success\n        errors\n        pipeline {\n          id\n          code\n          webhookUrl\n        }\n      }\n    }\n  ": typeof types.GenerateWebhookPipelineWebhookUrlDocument,
    "\n    fragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n      id\n      code\n    }\n  ": typeof types.GeneratePipelineWebhookUrlDialog_PipelineFragmentDoc,
    "\nfragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n  id\n  code\n}\n": typeof types.GeneratePipelineWebhookUrlDialog_PipelineFragmentDoc,
    "\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n": typeof types.InviteWorkspaceMemberDocument,
    "\n    fragment InviteMemberWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  ": typeof types.InviteMemberWorkspace_WorkspaceFragmentDoc,
    "\nfragment InviteMemberWorkspace_workspace on Workspace {\n  slug\n  name\n}\n": typeof types.InviteMemberWorkspace_WorkspaceFragmentDoc,
    "\n    fragment PipelineCard_pipeline on Pipeline {\n      id\n      code\n      name\n      schedule\n      description\n      type\n      sourceTemplate {\n        id\n        name\n      }\n      ...PipelineMetadataDisplay_pipeline\n      currentVersion {\n        user {\n          ...User_user\n        }\n        versionName\n        createdAt\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n          executionDate\n          user {\n            ...User_user\n          }\n        }\n      }\n    }\n    \n    \n    \n  ": typeof types.PipelineCard_PipelineFragmentDoc,
    "\n    fragment PipelineCard_workspace on Workspace {\n      slug\n    }\n  ": typeof types.PipelineCard_WorkspaceFragmentDoc,
    "\nfragment PipelineCard_pipeline on Pipeline {\n  id\n  code\n  name\n  schedule\n  description\n  type\n  sourceTemplate {\n    id\n    name\n  }\n  ...PipelineMetadataDisplay_pipeline\n  currentVersion {\n    user {\n      ...User_user\n    }\n    versionName\n    createdAt\n  }\n  lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n    items {\n      ...PipelineRunStatusBadge_run\n      executionDate\n      user {\n        ...User_user\n      }\n    }\n  }\n}\n": typeof types.PipelineCard_PipelineFragmentDoc,
    "\nfragment PipelineCard_workspace on Workspace {\n  slug\n}\n": typeof types.PipelineCard_WorkspaceFragmentDoc,
    "\n    fragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n      id\n      user {\n        displayName\n      }\n    }\n  ": typeof types.DeletePipelineRecipientTrigger_RecipientFragmentDoc,
    "\n    fragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n      permissions {\n        update\n      }\n    }\n  ": typeof types.DeletePipelineRecipientTrigger_PipelineFragmentDoc,
    "\nfragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n  id\n  user {\n    displayName\n  }\n}\n": typeof types.DeletePipelineRecipientTrigger_RecipientFragmentDoc,
    "\nfragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n  permissions {\n    update\n  }\n}\n": typeof types.DeletePipelineRecipientTrigger_PipelineFragmentDoc,
    "\n      query PipelineRecipients($id: UUID!) {\n        pipeline(id: $id) {\n          recipients {\n            id\n            user {\n              id\n              displayName\n            }\n            notificationLevel\n            ...DeletePipelineRecipientTrigger_recipient\n          }\n          workspace {\n            slug\n            members {\n              totalItems\n            }\n          }\n          ...DeletePipelineRecipientTrigger_pipeline\n        }\n      }\n      \n      \n    ": typeof types.PipelineRecipientsDocument,
    "\n    fragment PipelineRecipients_pipeline on Pipeline {\n      id\n      code\n      permissions {\n        update\n      }\n    }\n  ": typeof types.PipelineRecipients_PipelineFragmentDoc,
    "\nfragment PipelineRecipients_pipeline on Pipeline {\n  id\n  code\n  permissions {\n    update\n  }\n}\n": typeof types.PipelineRecipients_PipelineFragmentDoc,
    "\n    mutation UpdatePipelineVersionConfig($input: UpdatePipelineVersionInput!) {\n      updatePipelineVersion(input: $input) {\n        success\n        errors\n        pipelineVersion {\n          id\n          config\n        }\n      }\n    }\n  ": typeof types.UpdatePipelineVersionConfigDocument,
    "\n    fragment PipelineVersionConfigDialog_version on PipelineVersion {\n      id\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      config\n      pipeline {\n        id\n        schedule\n        workspace {\n          slug\n        }\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    \n  ": typeof types.PipelineVersionConfigDialog_VersionFragmentDoc,
    "\nfragment PipelineVersionConfigDialog_version on PipelineVersion {\n  id\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  config\n  pipeline {\n    id\n    schedule\n    workspace {\n      slug\n    }\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n": typeof types.PipelineVersionConfigDialog_VersionFragmentDoc,
    "\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n": typeof types.PipelineVersionPickerDocument,
    "\n    fragment PipelineVersionPicker_pipeline on Pipeline {\n      id\n    }\n  ": typeof types.PipelineVersionPicker_PipelineFragmentDoc,
    "\n    fragment PipelineVersionPicker_version on PipelineVersion {\n      id\n      versionName\n      createdAt\n      config\n      parameters {\n        ...ParameterField_parameter\n      }\n      user {\n        displayName\n      }\n    }\n  ": typeof types.PipelineVersionPicker_VersionFragmentDoc,
    "\nfragment PipelineVersionPicker_pipeline on Pipeline {\n  id\n}\n": typeof types.PipelineVersionPicker_PipelineFragmentDoc,
    "\nfragment PipelineVersionPicker_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  parameters {\n    ...ParameterField_parameter\n  }\n  user {\n    displayName\n  }\n}\n": typeof types.PipelineVersionPicker_VersionFragmentDoc,
    "\n    fragment RunOutputsTable_workspace on Workspace {\n      ...DownloadBucketObject_workspace\n      slug\n      bucket {\n        name\n      }\n    }\n  ": typeof types.RunOutputsTable_WorkspaceFragmentDoc,
    "\n    fragment RunOutputsTable_run on PipelineRun {\n      id\n      outputs {\n        __typename\n        ... on GenericOutput {\n          genericName: name\n          genericType: type\n          genericUri: uri\n        }\n        ... on BucketObject {\n          name\n          key\n          path\n          type\n        }\n\n        ... on DatabaseTable {\n          tableName: name\n        }\n      }\n      datasetVersions {\n        name\n        dataset {\n          slug\n          name\n          workspace {\n            slug\n          }\n        }\n      }\n    }\n  ": typeof types.RunOutputsTable_RunFragmentDoc,
    "\nfragment RunOutputsTable_workspace on Workspace {\n  ...DownloadBucketObject_workspace\n  slug\n  bucket {\n    name\n  }\n}\n": typeof types.RunOutputsTable_WorkspaceFragmentDoc,
    "\nfragment RunOutputsTable_run on PipelineRun {\n  id\n  outputs {\n    __typename\n    ... on GenericOutput {\n      genericName: name\n      genericType: type\n      genericUri: uri\n    }\n    ... on BucketObject {\n      name\n      key\n      path\n      type\n    }\n    ... on DatabaseTable {\n      tableName: name\n    }\n  }\n  datasetVersions {\n    name\n    dataset {\n      slug\n      name\n      workspace {\n        slug\n      }\n    }\n  }\n}\n": typeof types.RunOutputsTable_RunFragmentDoc,
    "query getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}": typeof types.GetConnectionBySlugDhis2Document,
    "\nquery getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n": typeof types.GetConnectionBySlugDhis2Document,
    "query getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}": typeof types.GetConnectionBySlugIasoDocument,
    "\nquery getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n": typeof types.GetConnectionBySlugIasoDocument,
    "\n    fragment ParameterField_parameter on PipelineParameter {\n      code\n      name\n      help\n      type\n      default\n      required\n      choices\n      connection\n      widget\n      multiple\n      directory\n    }\n  ": typeof types.ParameterField_ParameterFragmentDoc,
    "\nfragment ParameterField_parameter on PipelineParameter {\n  code\n  name\n  help\n  type\n  default\n  required\n  choices\n  connection\n  widget\n  multiple\n  directory\n}\n": typeof types.ParameterField_ParameterFragmentDoc,
    "\n  fragment RunPipelineDialog_version on PipelineVersion {\n    id\n    versionName\n    createdAt\n    config\n    user {\n      displayName\n    }\n    parameters {\n      ...ParameterField_parameter\n    }\n  }\n  \n": typeof types.RunPipelineDialog_VersionFragmentDoc,
    "\n      query PipelineCurrentVersion(\n        $workspaceSlug: String!\n        $pipelineCode: String!\n      ) {\n        pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n          currentVersion {\n            id\n            versionName\n            createdAt\n            user {\n              displayName\n            }\n            config\n            parameters {\n              ...ParameterField_parameter\n            }\n          }\n        }\n      }\n      \n    ": typeof types.PipelineCurrentVersionDocument,
    "\n    fragment RunPipelineDialog_pipeline on Pipeline {\n      id\n      workspace {\n        slug\n      }\n      permissions {\n        run\n      }\n      code\n      type\n      currentVersion {\n        id\n      }\n      ...PipelineVersionPicker_pipeline\n    }\n    \n    \n  ": typeof types.RunPipelineDialog_PipelineFragmentDoc,
    "\n    fragment RunPipelineDialog_run on PipelineRun {\n      id\n      config\n      version {\n        id\n        versionName\n        createdAt\n        parameters {\n          ...ParameterField_parameter\n        }\n        user {\n          displayName\n        }\n      }\n    }\n    \n  ": typeof types.RunPipelineDialog_RunFragmentDoc,
    "\nfragment RunPipelineDialog_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  user {\n    displayName\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n": typeof types.RunPipelineDialog_VersionFragmentDoc,
    "\nfragment RunPipelineDialog_pipeline on Pipeline {\n  id\n  workspace {\n    slug\n  }\n  permissions {\n    run\n  }\n  code\n  type\n  currentVersion {\n    id\n  }\n  ...PipelineVersionPicker_pipeline\n}\n": typeof types.RunPipelineDialog_PipelineFragmentDoc,
    "\nfragment RunPipelineDialog_run on PipelineRun {\n  id\n  config\n  version {\n    id\n    versionName\n    createdAt\n    parameters {\n      ...ParameterField_parameter\n    }\n    user {\n      displayName\n    }\n  }\n}\n": typeof types.RunPipelineDialog_RunFragmentDoc,
    "\n      query SidebarMenu($page: Int, $perPage: Int) {\n        pendingWorkspaceInvitations(page: 1, perPage: 1) {\n          totalItems\n        }\n        workspaces(page: $page, perPage: $perPage) {\n          totalItems\n          items {\n            slug\n            name\n            countries {\n              code\n              flag\n            }\n          }\n        }\n      }\n    ": typeof types.SidebarMenuDocument,
    "\n    fragment SidebarMenu_workspace on Workspace {\n      slug\n      name\n      countries {\n        flag\n        code\n      }\n      organization {\n        id\n        name\n        shortName\n        permissions {\n          createWorkspace\n        }\n      }\n    }\n  ": typeof types.SidebarMenu_WorkspaceFragmentDoc,
    "\nfragment SidebarMenu_workspace on Workspace {\n  slug\n  name\n  countries {\n    flag\n    code\n  }\n  organization {\n    id\n    name\n    shortName\n    permissions {\n      createWorkspace\n    }\n  }\n}\n": typeof types.SidebarMenu_WorkspaceFragmentDoc,
    "\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.StopPipelineDocument,
    "\n    fragment StopPipelineDialog_run on PipelineRun {\n      id\n    }\n  ": typeof types.StopPipelineDialog_RunFragmentDoc,
    "\n    fragment StopPipelineDialog_pipeline on Pipeline {\n      code\n    }\n  ": typeof types.StopPipelineDialog_PipelineFragmentDoc,
    "\nfragment StopPipelineDialog_run on PipelineRun {\n  id\n}\n": typeof types.StopPipelineDialog_RunFragmentDoc,
    "\nfragment StopPipelineDialog_pipeline on Pipeline {\n  code\n}\n": typeof types.StopPipelineDialog_PipelineFragmentDoc,
    "\n    fragment TemplateCard_template on PipelineTemplate {\n      id\n      code\n      name\n      description\n      ...PipelineMetadataDisplay_template\n      currentVersion {\n        id\n        createdAt\n        user {\n          ...User_user\n        }\n      }\n    }\n    \n    \n  ": typeof types.TemplateCard_TemplateFragmentDoc,
    "\n    fragment TemplateCard_workspace on Workspace {\n      slug\n    }\n  ": typeof types.TemplateCard_WorkspaceFragmentDoc,
    "\nfragment TemplateCard_template on PipelineTemplate {\n  id\n  code\n  name\n  description\n  ...PipelineMetadataDisplay_template\n  currentVersion {\n    id\n    createdAt\n    user {\n      ...User_user\n    }\n  }\n}\n": typeof types.TemplateCard_TemplateFragmentDoc,
    "\nfragment TemplateCard_workspace on Workspace {\n  slug\n}\n": typeof types.TemplateCard_WorkspaceFragmentDoc,
    "\n    fragment UpdateConnectionFieldsDialog_connection on Connection {\n      id\n      name\n      type\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  ": typeof types.UpdateConnectionFieldsDialog_ConnectionFragmentDoc,
    "\nfragment UpdateConnectionFieldsDialog_connection on Connection {\n  id\n  name\n  type\n  fields {\n    code\n    value\n    secret\n  }\n}\n": typeof types.UpdateConnectionFieldsDialog_ConnectionFragmentDoc,
    "\n    fragment UploadObjectDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n    }\n  ": typeof types.UploadObjectDialog_WorkspaceFragmentDoc,
    "\nfragment UploadObjectDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n}\n": typeof types.UploadObjectDialog_WorkspaceFragmentDoc,
    "query GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}": typeof types.GetUsersDocument,
    "\nquery GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}\n": typeof types.GetUsersDocument,
    "\n    fragment UserPicker_user on User {\n      ...User_user\n    }\n    \n  ": typeof types.UserPicker_UserFragmentDoc,
    "\nfragment UserPicker_user on User {\n  ...User_user\n}\n": typeof types.UserPicker_UserFragmentDoc,
    "\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}\n": typeof types.WorkspaceConnectionPickerDocument,
    "\n    fragment WorkspaceConnectionPicker_workspace on Workspace {\n      slug\n      connections {\n        id\n        name\n        slug\n        type\n      }\n    }\n  ": typeof types.WorkspaceConnectionPicker_WorkspaceFragmentDoc,
    "\nfragment WorkspaceConnectionPicker_workspace on Workspace {\n  slug\n  connections {\n    id\n    name\n    slug\n    type\n  }\n}\n": typeof types.WorkspaceConnectionPicker_WorkspaceFragmentDoc,
    "\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeleteWorkspaceInvitationDocument,
    "\n    fragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  ": typeof types.DeleteWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nfragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n": typeof types.DeleteWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.ResendWorkspaceInvitationDocument,
    "\n    fragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  ": typeof types.ResendWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nfragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n": typeof types.ResendWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\n      query WorkspaceInvitations($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          invitations(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              email\n              status\n              invitedBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    ": typeof types.WorkspaceInvitationsDocument,
    "\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n": typeof types.WorkspaceMemberPickerDocument,
    "\n    fragment WorkspaceMemberPicker_workspace on Workspace {\n      slug\n      members {\n        items {\n          id\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": typeof types.WorkspaceMemberPicker_WorkspaceFragmentDoc,
    "\nfragment WorkspaceMemberPicker_workspace on Workspace {\n  slug\n  members {\n    items {\n      id\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n": typeof types.WorkspaceMemberPicker_WorkspaceFragmentDoc,
    "\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n": typeof types.DeleteWorkspaceMemberDocument,
    "\n    fragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      user {\n        id\n        displayName\n      }\n      organizationMembership {\n        role\n      }\n    }\n  ": typeof types.DeleteWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nfragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  user {\n    id\n    displayName\n  }\n  organizationMembership {\n    role\n  }\n}\n": typeof types.DeleteWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n": typeof types.UpdateWorkspaceMemberDocument,
    "\n    fragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      role\n    }\n  ": typeof types.UpdateWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nfragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  role\n}\n": typeof types.UpdateWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\n      query WorskspaceMembers($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          members(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              user {\n                id\n                displayName\n                email\n              }\n              organizationMembership {\n                role\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    ": typeof types.WorskspaceMembersDocument,
    "\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n": typeof types.WorkspacePickerDocument,
    "\n    fragment WorkspacePicker_value on Workspace {\n      slug\n      name\n    }\n  ": typeof types.WorkspacePicker_ValueFragmentDoc,
    "\nfragment WorkspacePicker_value on Workspace {\n  slug\n  name\n}\n": typeof types.WorkspacePicker_ValueFragmentDoc,
    "mutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation createPipeline($input: CreatePipelineInput!) {\n  createPipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      code\n    }\n  }\n}\n\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineVersion($input: DeletePipelineVersionInput!) {\n  deletePipelineVersion(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n  addPipelineRecipient(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}": typeof types.CreateWorkspaceDocument,
    "query WorkspacesPage {\n  workspaces(page: 1, perPage: 1) {\n    items {\n      slug\n    }\n  }\n}\n\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspacePipelineStartPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n\nquery WorkspaceTemplatesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipelineTemplates(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    items {\n      ...TemplateCard_template\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}": typeof types.WorkspacesPageDocument,
    "query GetTemplateVersionForDownload($versionId: UUID!) {\n  pipelineTemplateVersion(id: $versionId) {\n    id\n    versionNumber\n    template {\n      code\n    }\n    sourcePipelineVersion {\n      zipfile\n    }\n  }\n}": typeof types.GetTemplateVersionForDownloadDocument,
    "\n      mutation GetFileDownloadUrl($input: PrepareObjectDownloadInput!) {\n        prepareObjectDownload(input: $input) {\n          success\n          downloadUrl\n        }\n      }\n    ": typeof types.GetFileDownloadUrlDocument,
    "\n      mutation deleteBucketObject($input: DeleteBucketObjectInput!) {\n        deleteBucketObject(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteBucketObjectDocument,
    "\n      mutation GetBucketUploadUrl($input: PrepareObjectUploadInput!) {\n        prepareObjectUpload(input: $input) {\n          success\n          uploadUrl\n        }\n      }\n    ": typeof types.GetBucketUploadUrlDocument,
    "\n      mutation CreateBucketFolder($input: CreateBucketFolderInput!) {\n        createBucketFolder(input: $input) {\n          success\n          errors\n          folder {\n            key\n            name\n            type\n          }\n        }\n      }\n    ": typeof types.CreateBucketFolderDocument,
    "\n      mutation DeleteConnection($input: DeleteConnectionInput!) {\n        deleteConnection(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteConnectionDocument,
    "\n      mutation deleteWorkspaceDatabaseTable(\n        $input: DeleteWorkspaceDatabaseTableInput!\n      ) {\n        deleteWorkspaceDatabaseTable(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteWorkspaceDatabaseTableDocument,
    "\n      mutation launchNotebookServer($input: LaunchNotebookServerInput!) {\n        launchNotebookServer(input: $input) {\n          success\n          server {\n            name\n            ready\n            url\n          }\n        }\n      }\n    ": typeof types.LaunchNotebookServerDocument,
    "\n      mutation UpdateWorkspacePipeline($input: UpdatePipelineInput!) {\n        updatePipeline(input: $input) {\n          success\n          errors\n          pipeline {\n            id\n            name\n            description\n            schedule\n            config\n            functionalType\n            updatedAt\n            webhookEnabled\n            webhookUrl\n            autoUpdateFromTemplate\n            tags {\n              ...Tag_tag\n            }\n            recipients {\n              user {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n      \n    ": typeof types.UpdateWorkspacePipelineDocument,
    "\n      mutation RunWorkspacePipeline($input: RunPipelineInput!) {\n        runPipeline(input: $input) {\n          success\n          errors\n\n          run {\n            id\n            pipeline {\n              __typename\n              id\n            }\n          }\n        }\n      }\n    ": typeof types.RunWorkspacePipelineDocument,
    "\n                fragment NewRun on PipelineRun {\n                  id\n                }\n              ": typeof types.NewRunFragmentDoc,
    "\n      mutation DeletePipelineVersion($input: DeletePipelineVersionInput!) {\n        deletePipelineVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeletePipelineVersionDocument,
    "\n      mutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n        addPipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.AddPipelineRecipientDocument,
    "\n      mutation updatePipelineRecipient($input: UpdatePipelineRecipientInput!) {\n        updatePipelineRecipient(input: $input) {\n          success\n          errors\n          recipient {\n            id\n            notificationLevel\n          }\n        }\n      }\n    ": typeof types.UpdatePipelineRecipientDocument,
    "\n      mutation deletePipelineRecipient($input: DeletePipelineRecipientInput!) {\n        deletePipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeletePipelineRecipientDocument,
    "\nfragment NewRun on PipelineRun {\n  id\n}\n": typeof types.NewRunFragmentDoc,
    "\n      mutation UpdateWorkspaceTemplate($input: UpdateTemplateInput!) {\n        updatePipelineTemplate(input: $input) {\n          success\n          errors\n          template {\n            id\n            name\n            description\n            config\n            functionalType\n            tags {\n              ...Tag_tag\n            }\n          }\n        }\n      }\n      \n    ": typeof types.UpdateWorkspaceTemplateDocument,
    "\n      mutation DeleteTemplateVersion($input: DeleteTemplateVersionInput!) {\n        deleteTemplateVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    ": typeof types.DeleteTemplateVersionDocument,
    "\n    fragment PipelineLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  ": typeof types.PipelineLayout_WorkspaceFragmentDoc,
    "\n    fragment PipelineLayout_pipeline on Pipeline {\n      id\n      code\n      name\n      permissions {\n        run\n        delete\n        update\n        createTemplateVersion {\n          isAllowed\n          reasons\n        }\n      }\n      template {\n        id\n        name\n        code\n      }\n      currentVersion {\n        id\n        name\n        description\n        config\n        externalLink\n        templateVersion {\n          id\n        }\n        ...PipelineVersionPicker_version\n        ...DownloadPipelineVersion_version\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    \n    \n    \n  ": typeof types.PipelineLayout_PipelineFragmentDoc,
    "\nfragment PipelineLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n": typeof types.PipelineLayout_WorkspaceFragmentDoc,
    "\nfragment PipelineLayout_pipeline on Pipeline {\n  id\n  code\n  name\n  permissions {\n    run\n    delete\n    update\n    createTemplateVersion {\n      isAllowed\n      reasons\n    }\n  }\n  template {\n    id\n    name\n    code\n  }\n  currentVersion {\n    id\n    name\n    description\n    config\n    externalLink\n    templateVersion {\n      id\n    }\n    ...PipelineVersionPicker_version\n    ...DownloadPipelineVersion_version\n  }\n  ...RunPipelineDialog_pipeline\n}\n": typeof types.PipelineLayout_PipelineFragmentDoc,
    "\n    fragment TabLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n    }\n    \n  ": typeof types.TabLayout_WorkspaceFragmentDoc,
    "\nfragment TabLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n}\n": typeof types.TabLayout_WorkspaceFragmentDoc,
    "\n    fragment TemplateLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  ": typeof types.TemplateLayout_WorkspaceFragmentDoc,
    "\n    fragment TemplateLayout_template on PipelineTemplate {\n      id\n      code\n      name\n      permissions {\n        delete\n        update\n      }\n      currentVersion {\n        id\n        ...DownloadTemplateVersion_version\n      }\n    }\n    \n  ": typeof types.TemplateLayout_TemplateFragmentDoc,
    "\nfragment TemplateLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n": typeof types.TemplateLayout_WorkspaceFragmentDoc,
    "\nfragment TemplateLayout_template on PipelineTemplate {\n  id\n  code\n  name\n  permissions {\n    delete\n    update\n  }\n  currentVersion {\n    id\n    ...DownloadTemplateVersion_version\n  }\n}\n": typeof types.TemplateLayout_TemplateFragmentDoc,
    "\n    fragment Sidebar_workspace on Workspace {\n      slug\n      ...SidebarMenu_workspace\n      permissions {\n        manageMembers\n        update\n        launchNotebookServer\n      }\n    }\n    \n  ": typeof types.Sidebar_WorkspaceFragmentDoc,
    "\nfragment Sidebar_workspace on Workspace {\n  slug\n  ...SidebarMenu_workspace\n  permissions {\n    manageMembers\n    update\n    launchNotebookServer\n  }\n}\n": typeof types.Sidebar_WorkspaceFragmentDoc,
    "\n    fragment WorkspaceLayout_workspace on Workspace {\n      slug\n      ...Sidebar_workspace\n    }\n    \n  ": typeof types.WorkspaceLayout_WorkspaceFragmentDoc,
    "\nfragment WorkspaceLayout_workspace on Workspace {\n  slug\n  ...Sidebar_workspace\n}\n": typeof types.WorkspaceLayout_WorkspaceFragmentDoc,
};
const documents: Documents = {
    "\n    fragment UserProperty_user on User {\n      ...User_user\n    }\n    \n  ": types.UserProperty_UserFragmentDoc,
    "\nfragment UserProperty_user on User {\n  ...User_user\n}\n": types.UserProperty_UserFragmentDoc,
    "\n    fragment UserColumn_user on User {\n      ...User_user\n    }\n    \n  ": types.UserColumn_UserFragmentDoc,
    "\nfragment UserColumn_user on User {\n  ...User_user\n}\n": types.UserColumn_UserFragmentDoc,
    "\n    fragment CountryBadge_country on Country {\n      code\n      name\n    }\n  ": types.CountryBadge_CountryFragmentDoc,
    "\nfragment CountryBadge_country on Country {\n  code\n  name\n}\n": types.CountryBadge_CountryFragmentDoc,
    "\nquery CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}\n": types.CountryPickerDocument,
    "\n    fragment CountryPicker_country on Country {\n      code\n      alpha3\n      name\n    }\n  ": types.CountryPicker_CountryFragmentDoc,
    "\nfragment CountryPicker_country on Country {\n  code\n  alpha3\n  name\n}\n": types.CountryPicker_CountryFragmentDoc,
    "\n    fragment DatabaseTablesPage on DatabaseTableResultPage {\n      items {\n        databaseTable {\n          name\n          count\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": types.DatabaseTablesPageFragmentDoc,
    "\nfragment DatabaseTablesPage on DatabaseTableResultPage {\n  items {\n    databaseTable {\n      name\n      count\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": types.DatabaseTablesPageFragmentDoc,
    "\n    fragment DatasetsPage on DatasetResultPage {\n      items {\n        dataset {\n          id\n          slug\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          createdBy {\n            id\n            displayName\n            ...UserAvatar_user\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": types.DatasetsPageFragmentDoc,
    "\nfragment DatasetsPage on DatasetResultPage {\n  items {\n    dataset {\n      id\n      slug\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      createdBy {\n        id\n        displayName\n        ...UserAvatar_user\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": types.DatasetsPageFragmentDoc,
    "\n    fragment FilesPage on FileResultPage {\n      items {\n        file {\n          name\n          path\n          size\n          updatedAt\n          type\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": types.FilesPageFragmentDoc,
    "\nfragment FilesPage on FileResultPage {\n  items {\n    file {\n      name\n      path\n      size\n      updatedAt\n      type\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": types.FilesPageFragmentDoc,
    "\n    fragment PipelinesPage on PipelineResultPage {\n      items {\n        pipeline {\n          id\n          code\n          name\n          description\n          updatedAt\n          functionalType\n          tags {\n            ...Tag_tag\n          }\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n            items {\n              ...PipelineRunStatusBadge_run\n            }\n          }\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n    \n  ": types.PipelinesPageFragmentDoc,
    "\nfragment PipelinesPage on PipelineResultPage {\n  items {\n    pipeline {\n      id\n      code\n      name\n      description\n      updatedAt\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n        }\n      }\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": types.PipelinesPageFragmentDoc,
    "\n    fragment PipelineTemplatesPage on PipelineTemplateResultPage {\n      items {\n        pipelineTemplate {\n          id\n          code\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          currentVersion {\n            id\n            versionNumber\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  ": types.PipelineTemplatesPageFragmentDoc,
    "\nfragment PipelineTemplatesPage on PipelineTemplateResultPage {\n  items {\n    pipelineTemplate {\n      id\n      code\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      currentVersion {\n        id\n        versionNumber\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n": types.PipelineTemplatesPageFragmentDoc,
    "\nquery GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n  workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n    totalItems\n    items {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n}\n": types.GetWorkspacesDocument,
    "\nquery SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  files: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...FilesPage\n  }\n}\n": types.SearchFilesDocument,
    "\nquery SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  pipelineTemplates: searchPipelineTemplates(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...PipelineTemplatesPage\n  }\n}\n": types.SearchPipelineTemplatesDocument,
    "\nquery SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n  pipelines: searchPipelines(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    functionalType: $functionalType\n  ) {\n    __typename\n    ...PipelinesPage\n  }\n}\n": types.SearchPipelinesDocument,
    "\nquery SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  datasets: searchDatasets(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatasetsPage\n  }\n}\n": types.SearchDatasetsDocument,
    "\nquery SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  databaseTables: searchDatabaseTables(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatabaseTablesPage\n  }\n}\n": types.SearchDatabaseTablesDocument,
    "\n    query SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      datasets: searchDatasets(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...DatasetsPage\n      }\n      \n    }\n  ": types.SearchDatasetsDocument,
    "\n    query SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n      pipelines: searchPipelines(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage, functionalType: $functionalType) {\n        __typename\n        ...PipelinesPage\n      }\n      \n    }\n  ": types.SearchPipelinesDocument,
    "\n    query SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      pipelineTemplates: searchPipelineTemplates(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...PipelineTemplatesPage\n      }\n      \n    }\n  ": types.SearchPipelineTemplatesDocument,
    "\n    query SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      databaseTables: searchDatabaseTables(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...DatabaseTablesPage\n      }\n      \n    }\n  ": types.SearchDatabaseTablesDocument,
    "\n    query SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      files: searchFiles(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...FilesPage\n      }\n      \n    }\n  ": types.SearchFilesDocument,
    "\n    query GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n      workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n        totalItems\n        items {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      \n    }\n  ": types.GetWorkspacesDocument,
    "\n    fragment WorkspaceDisplayFragment on Workspace {\n      name\n      countries {\n        code\n      }\n    }\n  ": types.WorkspaceDisplayFragmentFragmentDoc,
    "\nfragment WorkspaceDisplayFragment on Workspace {\n  name\n  countries {\n    code\n  }\n}\n": types.WorkspaceDisplayFragmentFragmentDoc,
    "\n    fragment Tag_tag on Tag {\n      id\n      name\n    }\n  ": types.Tag_TagFragmentDoc,
    "\nfragment Tag_tag on Tag {\n  id\n  name\n}\n": types.Tag_TagFragmentDoc,
    "\n    fragment User_user on User {\n      id\n      email\n      displayName\n      ...UserAvatar_user\n    }\n    \n  ": types.User_UserFragmentDoc,
    "\nfragment User_user on User {\n  id\n  email\n  displayName\n  ...UserAvatar_user\n}\n": types.User_UserFragmentDoc,
    "query CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}": types.CountryPickerDocument,
    "\n    fragment ColumnMetadataDrawer_file on DatasetVersionFile {\n      id\n      targetId\n      attributes {\n        id\n        key\n        value\n        label\n        system\n        __typename\n      }\n      properties\n    }\n  ": types.ColumnMetadataDrawer_FileFragmentDoc,
    "\nfragment ColumnMetadataDrawer_file on DatasetVersionFile {\n  id\n  targetId\n  attributes {\n    id\n    key\n    value\n    label\n    system\n    __typename\n  }\n  properties\n}\n": types.ColumnMetadataDrawer_FileFragmentDoc,
    "\n    mutation CreateDatasetDialog($input: CreateDatasetInput!) {\n      createDataset(input: $input) {\n        dataset {\n          id\n          slug\n          workspace {\n            slug\n          }\n        }\n        link {\n          id\n        }\n        success\n        errors\n      }\n    }\n  ": types.CreateDatasetDialogDocument,
    "\n    fragment CreateDatasetDialog_workspace on Workspace {\n      slug\n      name\n      permissions {\n        createDataset\n      }\n    }\n  ": types.CreateDatasetDialog_WorkspaceFragmentDoc,
    "\nfragment CreateDatasetDialog_workspace on Workspace {\n  slug\n  name\n  permissions {\n    createDataset\n  }\n}\n": types.CreateDatasetDialog_WorkspaceFragmentDoc,
    "\n    fragment DatasetCard_link on DatasetLink {\n      dataset {\n        name\n        slug\n        description\n        updatedAt\n        workspace {\n          slug\n          name\n        }\n      }\n      id\n      workspace {\n        slug\n        name\n      }\n    }\n  ": types.DatasetCard_LinkFragmentDoc,
    "\nfragment DatasetCard_link on DatasetLink {\n  dataset {\n    name\n    slug\n    description\n    updatedAt\n    workspace {\n      slug\n      name\n    }\n  }\n  id\n  workspace {\n    slug\n    name\n  }\n}\n": types.DatasetCard_LinkFragmentDoc,
    "\n    fragment DatasetExplorer_version on DatasetVersion {\n      id\n      files(page: $page, perPage: $perPage) {\n        totalPages\n        pageNumber\n        totalItems\n        items {\n          ...DatasetExplorer_file\n        }\n      }\n      ...DatasetVersionFileSample_version\n      ...DatasetVersionFileColumns_version\n    }\n    \n    \n  ": types.DatasetExplorer_VersionFragmentDoc,
    "\nfragment DatasetExplorer_version on DatasetVersion {\n  id\n  files(page: $page, perPage: $perPage) {\n    totalPages\n    pageNumber\n    totalItems\n    items {\n      ...DatasetExplorer_file\n    }\n  }\n  ...DatasetVersionFileSample_version\n  ...DatasetVersionFileColumns_version\n}\n": types.DatasetExplorer_VersionFragmentDoc,
    "fragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}": types.DatasetExplorer_FileFragmentDoc,
    "\nfragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}\n": types.DatasetExplorer_FileFragmentDoc,
    "\n      query DatasetLinksDataGrid($datasetId: ID!, $page: Int) {\n        dataset(id: $datasetId) {\n          links(page: $page, perPage: 6) {\n            totalItems\n            items {\n              ...DeleteDatasetLinkTrigger_datasetLink\n              permissions {\n                delete\n              }\n              workspace {\n                slug\n                name\n              }\n              createdBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n      \n    ": types.DatasetLinksDataGridDocument,
    "\n    fragment DatasetLinksDataGrid_dataset on Dataset {\n      id\n      name\n    }\n  ": types.DatasetLinksDataGrid_DatasetFragmentDoc,
    "\nfragment DatasetLinksDataGrid_dataset on Dataset {\n  id\n  name\n}\n": types.DatasetLinksDataGrid_DatasetFragmentDoc,
    "\nquery DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n": types.DatasetPickerDocument,
    "\n    fragment DatasetPicker_workspace on Workspace {\n      datasets {\n        items {\n          id\n          dataset {\n            slug\n            name\n          }\n        }\n      }\n    }\n  ": types.DatasetPicker_WorkspaceFragmentDoc,
    "\nfragment DatasetPicker_workspace on Workspace {\n  datasets {\n    items {\n      id\n      dataset {\n        slug\n        name\n      }\n    }\n  }\n}\n": types.DatasetPicker_WorkspaceFragmentDoc,
    "\n    fragment DatasetVersionFileColumns_file on DatasetVersionFile {\n      id\n      filename\n      ...ColumnMetadataDrawer_file\n    }\n    \n  ": types.DatasetVersionFileColumns_FileFragmentDoc,
    "\n    fragment DatasetVersionFileColumns_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        permissions {\n          update\n        }\n        workspace {\n          slug\n        }\n      }\n    }\n  ": types.DatasetVersionFileColumns_VersionFragmentDoc,
    "\nfragment DatasetVersionFileColumns_file on DatasetVersionFile {\n  id\n  filename\n  ...ColumnMetadataDrawer_file\n}\n": types.DatasetVersionFileColumns_FileFragmentDoc,
    "\nfragment DatasetVersionFileColumns_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    permissions {\n      update\n    }\n    workspace {\n      slug\n    }\n  }\n}\n": types.DatasetVersionFileColumns_VersionFragmentDoc,
    "\n  query GetDatasetVersionFileSample($id: ID!) {\n    datasetVersionFile(id: $id) {\n      id\n      properties\n      fileSample {\n        sample\n        status\n        statusReason\n      }\n    }\n  }\n": types.GetDatasetVersionFileSampleDocument,
    "\n    fragment DatasetVersionFileSample_file on DatasetVersionFile {\n      id\n      filename\n      contentType\n      size\n      downloadUrl(attachment: false)\n    }\n  ": types.DatasetVersionFileSample_FileFragmentDoc,
    "\n    fragment DatasetVersionFileSample_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        workspace {\n          slug\n        }\n      }\n    }\n  ": types.DatasetVersionFileSample_VersionFragmentDoc,
    "\nfragment DatasetVersionFileSample_file on DatasetVersionFile {\n  id\n  filename\n  contentType\n  size\n  downloadUrl(attachment: false)\n}\n": types.DatasetVersionFileSample_FileFragmentDoc,
    "\nfragment DatasetVersionFileSample_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    workspace {\n      slug\n    }\n  }\n}\n": types.DatasetVersionFileSample_VersionFragmentDoc,
    "\n      query DatasetVersionFilesDataGrid(\n        $versionId: ID!\n        $page: Int = 1\n        $perPage: Int!\n      ) {\n        datasetVersion(id: $versionId) {\n          id\n          files(page: $page, perPage: $perPage) {\n            items {\n              ...DownloadVersionFile_file\n              id\n              contentType\n              createdAt\n              uri\n              filename\n            }\n            totalPages\n            totalItems\n            pageNumber\n          }\n        }\n      }\n      \n    ": types.DatasetVersionFilesDataGridDocument,
    "\n    fragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n      id\n      name\n      permissions {\n        download\n      }\n    }\n  ": types.DatasetVersionFilesDataGrid_VersionFragmentDoc,
    "\nfragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n  id\n  name\n  permissions {\n    download\n  }\n}\n": types.DatasetVersionFilesDataGrid_VersionFragmentDoc,
    "\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}\n": types.DatasetVersionPickerDocument,
    "\n    fragment DatasetVersionPicker_version on DatasetVersion {\n      id\n      name\n      createdAt\n    }\n  ": types.DatasetVersionPicker_VersionFragmentDoc,
    "\n    fragment DatasetVersionPicker_dataset on Dataset {\n      id\n    }\n  ": types.DatasetVersionPicker_DatasetFragmentDoc,
    "\nfragment DatasetVersionPicker_version on DatasetVersion {\n  id\n  name\n  createdAt\n}\n": types.DatasetVersionPicker_VersionFragmentDoc,
    "\nfragment DatasetVersionPicker_dataset on Dataset {\n  id\n}\n": types.DatasetVersionPicker_DatasetFragmentDoc,
    "\n    fragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n      id\n      dataset {\n        name\n        id\n      }\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  ": types.DeleteDatasetLinkTrigger_DatasetLinkFragmentDoc,
    "\nfragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n  id\n  dataset {\n    name\n    id\n  }\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n": types.DeleteDatasetLinkTrigger_DatasetLinkFragmentDoc,
    "\n    fragment DeleteDatasetTrigger_dataset on Dataset {\n      id\n      name\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  ": types.DeleteDatasetTrigger_DatasetFragmentDoc,
    "\nfragment DeleteDatasetTrigger_dataset on Dataset {\n  id\n  name\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n": types.DeleteDatasetTrigger_DatasetFragmentDoc,
    "\n    fragment DownloadVersionFile_file on DatasetVersionFile {\n      id\n      filename\n    }\n  ": types.DownloadVersionFile_FileFragmentDoc,
    "\nfragment DownloadVersionFile_file on DatasetVersionFile {\n  id\n  filename\n}\n": types.DownloadVersionFile_FileFragmentDoc,
    "\n    mutation LinkDatasetDialog($input: LinkDatasetInput!) {\n      linkDataset(input: $input) {\n        success\n        errors\n        link {\n          workspace {\n            slug\n          }\n          id\n        }\n      }\n    }\n  ": types.LinkDatasetDialogDocument,
    "\n    fragment LinkDatasetDialog_dataset on Dataset {\n      id\n      name\n    }\n  ": types.LinkDatasetDialog_DatasetFragmentDoc,
    "\nfragment LinkDatasetDialog_dataset on Dataset {\n  id\n  name\n}\n": types.LinkDatasetDialog_DatasetFragmentDoc,
    "\n    mutation PinDatasetButton($input: PinDatasetInput!) {\n      pinDataset(input: $input) {\n        link {\n          id\n          isPinned\n        }\n        success\n        errors\n      }\n    }\n  ": types.PinDatasetButtonDocument,
    "\n    fragment PinDatasetButton_link on DatasetLink {\n      id\n      isPinned\n      permissions {\n        pin\n      }\n    }\n  ": types.PinDatasetButton_LinkFragmentDoc,
    "\nfragment PinDatasetButton_link on DatasetLink {\n  id\n  isPinned\n  permissions {\n    pin\n  }\n}\n": types.PinDatasetButton_LinkFragmentDoc,
    "\n    fragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n      id\n      dataset {\n        id\n        name\n        slug\n        workspace {\n          slug\n        }\n      }\n      workspace {\n        slug\n      }\n    }\n  ": types.UploadDatasetVersionDialog_DatasetLinkFragmentDoc,
    "\nfragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n  id\n  dataset {\n    id\n    name\n    slug\n    workspace {\n      slug\n    }\n  }\n  workspace {\n    slug\n  }\n}\n": types.UploadDatasetVersionDialog_DatasetLinkFragmentDoc,
    "query DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}": types.DatasetPickerDocument,
    "\n      mutation UpdateDataset($input: UpdateDatasetInput!) {\n        updateDataset(input: $input) {\n          dataset {\n            id\n            name\n            description\n            sharedWithOrganization\n            updatedAt\n          }\n          success\n          errors\n        }\n      }\n    ": types.UpdateDatasetDocument,
    "\n      mutation UpdateDatasetVersion($input: UpdateDatasetVersionInput!) {\n        updateDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    ": types.UpdateDatasetVersionDocument,
    "\n      mutation CreateDatasetVersion($input: CreateDatasetVersionInput!) {\n        createDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    ": types.CreateDatasetVersionDocument,
    "\n      mutation generateDatasetUploadUrl(\n        $input: GenerateDatasetUploadUrlInput!\n      ) {\n        generateDatasetUploadUrl(input: $input) {\n          success\n          errors\n          uploadUrl\n        }\n      }\n    ": types.GenerateDatasetUploadUrlDocument,
    "\n      mutation PrepareVersionFileDownload(\n        $input: PrepareVersionFileDownloadInput!\n      ) {\n        prepareVersionFileDownload(input: $input) {\n          success\n          downloadUrl\n          errors\n        }\n      }\n    ": types.PrepareVersionFileDownloadDocument,
    "\n      mutation CreateDatasetVersionFile(\n        $input: CreateDatasetVersionFileInput!\n      ) {\n        createDatasetVersionFile(input: $input) {\n          success\n          errors\n          file {\n            id\n            uri\n          }\n        }\n      }\n    ": types.CreateDatasetVersionFileDocument,
    "\n      mutation DeleteDatasetLink($input: DeleteDatasetLinkInput!) {\n        deleteDatasetLink(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteDatasetLinkDocument,
    "\n      mutation DeleteDataset($input: DeleteDatasetInput!) {\n        deleteDataset(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteDatasetDocument,
    "\n      mutation SetMetadataAttribute($input: SetMetadataAttributeInput!) {\n        setMetadataAttribute(input: $input) {\n          success\n          errors\n          attribute {\n            id\n            key\n            label\n            value\n            system\n          }\n        }\n      }\n    ": types.SetMetadataAttributeDocument,
    "\n      mutation DeleteMetadataAttribute($input: DeleteMetadataAttributeInput!) {\n        deleteMetadataAttribute(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteMetadataAttributeDocument,
    "\n      query TabularFileMetadata($fileId: ID!) {\n        datasetVersionFile(id: $fileId) {\n          attributes {\n            id\n            key\n            value\n            label\n            system\n            createdAt\n            updatedAt\n            createdBy {\n              displayName\n            }\n            updatedBy {\n              displayName\n            }\n          }\n          properties\n          id\n          targetId\n        }\n      }\n    ": types.TabularFileMetadataDocument,
    "\n    fragment DatasetLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n      slug\n    }\n    \n  ": types.DatasetLayout_WorkspaceFragmentDoc,
    "\n    fragment DatasetLayout_datasetLink on DatasetLink {\n      ...UploadDatasetVersionDialog_datasetLink\n      ...PinDatasetButton_link\n      dataset {\n        workspace {\n          slug\n        }\n        slug\n        permissions {\n          delete\n          createVersion\n        }\n      }\n    }\n    \n    \n  ": types.DatasetLayout_DatasetLinkFragmentDoc,
    "\n    fragment DatasetLayout_version on DatasetVersion {\n      id\n      name\n      ...DatasetVersionPicker_version\n    }\n    \n  ": types.DatasetLayout_VersionFragmentDoc,
    "\nfragment DatasetLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n  slug\n}\n": types.DatasetLayout_WorkspaceFragmentDoc,
    "\nfragment DatasetLayout_datasetLink on DatasetLink {\n  ...UploadDatasetVersionDialog_datasetLink\n  ...PinDatasetButton_link\n  dataset {\n    workspace {\n      slug\n    }\n    slug\n    permissions {\n      delete\n      createVersion\n    }\n  }\n}\n": types.DatasetLayout_DatasetLinkFragmentDoc,
    "\nfragment DatasetLayout_version on DatasetVersion {\n  id\n  name\n  ...DatasetVersionPicker_version\n}\n": types.DatasetLayout_VersionFragmentDoc,
    "\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}\n": types.UpdateUserDocument,
    "\n    fragment UserAvatar_user on User {\n      displayName\n      avatar {\n        initials\n        color\n      }\n    }\n  ": types.UserAvatar_UserFragmentDoc,
    "\nfragment UserAvatar_user on User {\n  displayName\n  avatar {\n    initials\n    color\n  }\n}\n": types.UserAvatar_UserFragmentDoc,
    "mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation Logout {\n  logout {\n    success\n  }\n}\n\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation GenerateChallenge {\n  generateChallenge {\n    success\n    errors\n  }\n}\n\nmutation VerifyDevice($input: VerifyDeviceInput!) {\n  verifyDevice(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation DisableTwoFactor($input: DisableTwoFactorInput!) {\n  disableTwoFactor(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation EnableTwoFactor {\n  enableTwoFactor {\n    success\n    verified\n    errors\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}": types.ResetPasswordDocument,
    "query GetUser {\n  me {\n    hasTwoFactorEnabled\n    permissions {\n      adminPanel\n      superUser\n      createWorkspace\n    }\n    features {\n      code\n    }\n    user {\n      ...UserAvatar_user\n      email\n      id\n      firstName\n      lastName\n      displayName\n      language\n      avatar {\n        initials\n        color\n      }\n    }\n  }\n}\n\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}": types.GetUserDocument,
    "query notebooksPage {\n  notebooksUrl\n}": types.NotebooksPageDocument,
    "\n    fragment WorkspaceRole on WorkspaceMembership {\n      role\n      workspace {\n        name\n        slug\n      }\n    }\n  ": types.WorkspaceRoleFragmentDoc,
    "\nfragment WorkspaceRole on WorkspaceMembership {\n  role\n  workspace {\n    name\n    slug\n  }\n}\n": types.WorkspaceRoleFragmentDoc,
    "\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n": types.OrganizationDatasetsDocument,
    "\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeleteOrganizationInvitationDocument,
    "query OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}": types.OrganizationInvitationsDocument,
    "\nquery OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n": types.OrganizationInvitationsDocument,
    "\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": types.ResendOrganizationInvitationDocument,
    "\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n": types.InviteOrganizationMemberDocument,
    "\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeleteOrganizationMemberDocument,
    "query OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}": types.OrganizationMembersDocument,
    "\nquery OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n": types.OrganizationMembersDocument,
    "\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n": types.UpdateOrganizationMemberDocument,
    "\n    fragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n      id\n      role\n      workspaceMemberships {\n        id\n        role\n        workspace {\n          slug\n          name\n        }\n      }\n      user {\n        id\n        displayName\n        email\n      }\n    }\n  ": types.UpdateOrganizationMemberDialog_OrganizationMemberFragmentDoc,
    "\n    fragment UpdateOrganizationMemberDialog_workspace on Workspace {\n      slug\n      name\n    }\n  ": types.UpdateOrganizationMemberDialog_WorkspaceFragmentDoc,
    "\nfragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n  id\n  role\n  workspaceMemberships {\n    id\n    role\n    workspace {\n      slug\n      name\n    }\n  }\n  user {\n    id\n    displayName\n    email\n  }\n}\n": types.UpdateOrganizationMemberDialog_OrganizationMemberFragmentDoc,
    "\nfragment UpdateOrganizationMemberDialog_workspace on Workspace {\n  slug\n  name\n}\n": types.UpdateOrganizationMemberDialog_WorkspaceFragmentDoc,
    "query OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation DeleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}": types.OrganizationWorkspaceInvitationsDocument,
    "\nquery OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n": types.OrganizationWorkspaceInvitationsDocument,
    "fragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n\nquery Organizations {\n  organizations {\n    id\n    name\n    workspaces {\n      items {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}": types.Organization_OrganizationFragmentDoc,
    "\nfragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n": types.Organization_OrganizationFragmentDoc,
    "\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n": types.OrganizationDataset_LinkFragmentDoc,
    "\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n": types.OrganizationWorkspace_WorkspaceFragmentDoc,
    "\nmutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n": types.ResetPasswordDocument,
    "\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n": types.SetPasswordDocument,
    "\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n": types.LoginDocument,
    "\nquery notebooksPage {\n  notebooksUrl\n}\n": types.NotebooksPageDocument,
    "\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}\n": types.OrganizationWorkspacesDocument,
    "\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n": types.OrganizationDocument,
    "\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n": types.PipelinePageDocument,
    "\nmutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n": types.UpdatePipelineDocument,
    "\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n": types.PipelineConfigureRunPageDocument,
    "\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n": types.PipelineRunPageDocument,
    "\nquery PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n": types.PipelinesPageDocument,
    "\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}\n": types.RegisterPageDocument,
    "\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n": types.RegisterDocument,
    "\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n": types.JoinWorkspaceDocument,
    "\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n": types.DeclineWorkspaceInvitationDocument,
    "\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n": types.AccountPageDocument,
    "\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n": types.ConnectionPageDocument,
    "\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n": types.UpdateConnectionDocument,
    "\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n": types.ConnectionsPageDocument,
    "\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": types.WorkspaceDatabaseTablePageDocument,
    "\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": types.WorkspaceDatabasesPageDocument,
    "\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n": types.WorkspaceDatasetAccessPageDocument,
    "\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n": types.WorkspaceDatasetFilesPageDocument,
    "\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n": types.WorkspaceDatasetIndexPageDocument,
    "\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n": types.WorkspaceDatasetsPageDocument,
    "\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n": types.WorkspaceFilesPageDocument,
    "\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n": types.WorkspacePageDocument,
    "\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n": types.UpdateWorkspaceDocument,
    "\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n": types.WorkspaceNotebooksPageDocument,
    "\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n": types.WorkspacePipelineCodePageDocument,
    "\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n": types.GetPipelineVersionFilesDocument,
    "\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n": types.WorkspacePipelinePageDocument,
    "\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n": types.WorkspacePipelineNotificationsPageDocument,
    "\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n": types.WorkspacePipelineRunPageDocument,
    "\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n": types.WorkspacePipelineRunsPageDocument,
    "\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n": types.WorkspacePipelineVersionsPageDocument,
    "\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n": types.WorkspaceTemplatePageDocument,
    "\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n": types.WorkspaceTemplateVersionsPageDocument,
    "\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n": types.WorkspaceWebappPageDocument,
    "\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n": types.WorkspaceWebappsPageDocument,
    "\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n": types.CheckWorkspaceAvailabilityDocument,
    "\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeletePipelineTemplateDocument,
    "\n    fragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n      id\n      name\n    }\n  ": types.PipelineTemplateDialog_PipelineTemplateFragmentDoc,
    "\nfragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n  id\n  name\n}\n": types.PipelineTemplateDialog_PipelineTemplateFragmentDoc,
    "\n    fragment DownloadPipelineVersion_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n        code\n      }\n    }\n  ": types.DownloadPipelineVersion_VersionFragmentDoc,
    "\nfragment DownloadPipelineVersion_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n    code\n  }\n}\n": types.DownloadPipelineVersion_VersionFragmentDoc,
    "\n    fragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n      id\n    }\n  ": types.DownloadTemplateVersion_VersionFragmentDoc,
    "\nfragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n  id\n}\n": types.DownloadTemplateVersion_VersionFragmentDoc,
    "\n    fragment PipelineMetadataDisplay_pipeline on Pipeline {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  ": types.PipelineMetadataDisplay_PipelineFragmentDoc,
    "\n    fragment PipelineMetadataDisplay_template on PipelineTemplate {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  ": types.PipelineMetadataDisplay_TemplateFragmentDoc,
    "\nfragment PipelineMetadataDisplay_pipeline on Pipeline {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n": types.PipelineMetadataDisplay_PipelineFragmentDoc,
    "\nfragment PipelineMetadataDisplay_template on PipelineTemplate {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n": types.PipelineMetadataDisplay_TemplateFragmentDoc,
    "\n    fragment PipelineRunDataCard_dag on DAG {\n      id\n      externalId\n      label\n      ...PipelineRunReadonlyForm_dag\n    }\n    \n  ": types.PipelineRunDataCard_DagFragmentDoc,
    "\n    fragment PipelineRunDataCard_dagRun on DAGRun {\n      id\n      label\n      externalId\n      externalUrl\n      executionDate\n      triggerMode\n      status\n      config\n      duration\n      outputs {\n        ...PipelineRunOutputEntry_output\n      }\n      user {\n        displayName\n        ...UserProperty_user\n      }\n      progress\n      messages {\n        __typename\n      }\n      ...RunMessages_dagRun\n      ...RunLogs_dagRun\n      ...PipelineRunReadonlyForm_dagRun\n      ...PipelineRunFavoriteTrigger_run\n    }\n    \n    \n    \n    \n    \n    \n  ": types.PipelineRunDataCard_DagRunFragmentDoc,
    "\nfragment PipelineRunDataCard_dag on DAG {\n  id\n  externalId\n  label\n  ...PipelineRunReadonlyForm_dag\n}\n": types.PipelineRunDataCard_DagFragmentDoc,
    "\nfragment PipelineRunDataCard_dagRun on DAGRun {\n  id\n  label\n  externalId\n  externalUrl\n  executionDate\n  triggerMode\n  status\n  config\n  duration\n  outputs {\n    ...PipelineRunOutputEntry_output\n  }\n  user {\n    displayName\n    ...UserProperty_user\n  }\n  progress\n  messages {\n    __typename\n  }\n  ...RunMessages_dagRun\n  ...RunLogs_dagRun\n  ...PipelineRunReadonlyForm_dagRun\n  ...PipelineRunFavoriteTrigger_run\n}\n": types.PipelineRunDataCard_DagRunFragmentDoc,
    "\n    fragment PipelineRunFavoriteIcon_run on DAGRun {\n      isFavorite\n    }\n  ": types.PipelineRunFavoriteIcon_RunFragmentDoc,
    "\nfragment PipelineRunFavoriteIcon_run on DAGRun {\n  isFavorite\n}\n": types.PipelineRunFavoriteIcon_RunFragmentDoc,
    "\n    mutation setFavoriteRun($input: SetDAGRunFavoriteInput!) {\n      setDAGRunFavorite(input: $input) {\n        success\n        errors\n        dagRun {\n          id\n          label\n          isFavorite\n        }\n      }\n    }\n  ": types.SetFavoriteRunDocument,
    "\n    fragment PipelineRunFavoriteTrigger_run on DAGRun {\n      id\n      label\n      isFavorite\n      ...PipelineRunFavoriteIcon_run\n    }\n    \n  ": types.PipelineRunFavoriteTrigger_RunFragmentDoc,
    "\nfragment PipelineRunFavoriteTrigger_run on DAGRun {\n  id\n  label\n  isFavorite\n  ...PipelineRunFavoriteIcon_run\n}\n": types.PipelineRunFavoriteTrigger_RunFragmentDoc,
    "\n    fragment PipelineRunForm_dag on DAG {\n      template {\n        sampleConfig\n      }\n      formCode\n      id\n    }\n  ": types.PipelineRunForm_DagFragmentDoc,
    "\nfragment PipelineRunForm_dag on DAG {\n  template {\n    sampleConfig\n  }\n  formCode\n  id\n}\n": types.PipelineRunForm_DagFragmentDoc,
    "\n    fragment PipelineRunReadonlyForm_dag on DAG {\n      formCode\n      id\n    }\n  ": types.PipelineRunReadonlyForm_DagFragmentDoc,
    "\n    fragment PipelineRunReadonlyForm_dagRun on DAGRun {\n      config\n    }\n  ": types.PipelineRunReadonlyForm_DagRunFragmentDoc,
    "\nfragment PipelineRunReadonlyForm_dag on DAG {\n  formCode\n  id\n}\n": types.PipelineRunReadonlyForm_DagFragmentDoc,
    "\nfragment PipelineRunReadonlyForm_dagRun on DAGRun {\n  config\n}\n": types.PipelineRunReadonlyForm_DagRunFragmentDoc,
    "\n    fragment PipelineRunOutputEntry_output on DAGRunOutput {\n      title\n      uri\n    }\n  ": types.PipelineRunOutputEntry_OutputFragmentDoc,
    "\nfragment PipelineRunOutputEntry_output on DAGRunOutput {\n  title\n  uri\n}\n": types.PipelineRunOutputEntry_OutputFragmentDoc,
    "\n    fragment PipelineRunStatusBadge_run on PipelineRun {\n      id\n      status\n      ...usePipelineRunPoller_run\n    }\n    \n  ": types.PipelineRunStatusBadge_RunFragmentDoc,
    "\nfragment PipelineRunStatusBadge_run on PipelineRun {\n  id\n  status\n  ...usePipelineRunPoller_run\n}\n": types.PipelineRunStatusBadge_RunFragmentDoc,
    "\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n": types.CreatePipelineFromTemplateVersionDocument,
    "\nquery GetPipelineTemplates($page: Int!, $perPage: Int!, $search: String, $currentWorkspaceSlug: String!, $workspaceSlug: String, $tags: [String!], $functionalType: PipelineFunctionalType) {\n  workspace(slug: $currentWorkspaceSlug) {\n    slug\n    pipelineTemplateTags\n  }\n  pipelineTemplates(\n    page: $page\n    perPage: $perPage\n    search: $search\n    workspaceSlug: $workspaceSlug\n    tags: $tags\n    functionalType: $functionalType\n  ) {\n    pageNumber\n    totalPages\n    totalItems\n    items {\n      id\n      description\n      code\n      name\n      functionalType\n      tags {\n        id\n        name\n      }\n      permissions {\n        delete\n      }\n      workspace {\n        slug\n        name\n      }\n      currentVersion {\n        id\n        versionNumber\n        createdAt\n        user {\n          ...User_user\n        }\n        template {\n          sourcePipeline {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetPipelineTemplatesDocument,
    "\n  query GetPipelineTemplates(\n    $page: Int!\n    $perPage: Int!\n    $search: String\n    $currentWorkspaceSlug: String!\n    $workspaceSlug: String\n    $tags: [String!]\n    $functionalType: PipelineFunctionalType\n  ) {\n    workspace(slug: $currentWorkspaceSlug) {\n      slug\n      pipelineTemplateTags\n    }\n    pipelineTemplates(\n      page: $page\n      perPage: $perPage\n      search: $search\n      workspaceSlug: $workspaceSlug\n      tags: $tags\n      functionalType: $functionalType\n    ) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        id\n        description\n        code\n        name\n        functionalType\n        tags {\n          id\n          name\n        }\n        permissions {\n          delete\n        }\n        workspace {\n          slug\n          name\n        }\n        currentVersion {\n          id\n          versionNumber\n          createdAt\n          user {\n            ...User_user\n          }\n          template {\n            sourcePipeline {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetPipelineTemplatesDocument,
    "\n    fragment PipelineTemplates_workspace on Workspace {\n      slug\n    }\n  ": types.PipelineTemplates_WorkspaceFragmentDoc,
    "\nfragment PipelineTemplates_workspace on Workspace {\n  slug\n}\n": types.PipelineTemplates_WorkspaceFragmentDoc,
    "\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n": types.UpdatePipelineVersionDocument,
    "\n    fragment PipelineVersionCard_version on PipelineVersion {\n      id\n      versionName\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n      pipeline {\n        id\n        code\n      }\n      templateVersion {\n        id\n        versionNumber\n        template {\n          id\n          name\n        }\n      }\n      ...DownloadPipelineVersion_version\n      ...DeletePipelineVersionTrigger_version\n    }\n    \n    \n  ": types.PipelineVersionCard_VersionFragmentDoc,
    "\nfragment PipelineVersionCard_version on PipelineVersion {\n  id\n  versionName\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n  pipeline {\n    id\n    code\n  }\n  templateVersion {\n    id\n    versionNumber\n    template {\n      id\n      name\n    }\n  }\n  ...DownloadPipelineVersion_version\n  ...DeletePipelineVersionTrigger_version\n}\n": types.PipelineVersionCard_VersionFragmentDoc,
    "\n    fragment PipelineVersionParametersTable_version on PipelineVersion {\n      id\n      parameters {\n        ...ParameterField_parameter\n      }\n      config\n    }\n  ": types.PipelineVersionParametersTable_VersionFragmentDoc,
    "\nfragment PipelineVersionParametersTable_version on PipelineVersion {\n  id\n  parameters {\n    ...ParameterField_parameter\n  }\n  config\n}\n": types.PipelineVersionParametersTable_VersionFragmentDoc,
    "\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n": types.WorkspacePipelinesPageDocument,
    "\n    fragment Pipelines_workspace on Workspace {\n      slug\n    }\n  ": types.Pipelines_WorkspaceFragmentDoc,
    "\nfragment Pipelines_workspace on Workspace {\n  slug\n}\n": types.Pipelines_WorkspaceFragmentDoc,
    "\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n": types.PipelinesPickerDocument,
    "\n    fragment PipelinesPicker_value on DAG {\n      id\n      externalId\n    }\n  ": types.PipelinesPicker_ValueFragmentDoc,
    "\nfragment PipelinesPicker_value on DAG {\n  id\n  externalId\n}\n": types.PipelinesPicker_ValueFragmentDoc,
    "\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n": types.CreatePipelineTemplateVersionDocument,
    "\n    fragment PipelinePublish_pipeline on Pipeline {\n      id\n      name\n      description\n      currentVersion {\n        id\n        versionName\n      }\n      template {\n        id\n        name\n      }\n    }\n  ": types.PipelinePublish_PipelineFragmentDoc,
    "\n    fragment PipelinePublish_workspace on Workspace {\n      slug\n    }\n  ": types.PipelinePublish_WorkspaceFragmentDoc,
    "\nfragment PipelinePublish_pipeline on Pipeline {\n  id\n  name\n  description\n  currentVersion {\n    id\n    versionName\n  }\n  template {\n    id\n    name\n  }\n}\n": types.PipelinePublish_PipelineFragmentDoc,
    "\nfragment PipelinePublish_workspace on Workspace {\n  slug\n}\n": types.PipelinePublish_WorkspaceFragmentDoc,
    "\n    fragment RunLogs_dagRun on DAGRun {\n      id\n      logs\n      status\n    }\n  ": types.RunLogs_DagRunFragmentDoc,
    "\n    fragment RunLogs_run on PipelineRun {\n      id\n      logs\n      status\n    }\n  ": types.RunLogs_RunFragmentDoc,
    "\nfragment RunLogs_dagRun on DAGRun {\n  id\n  logs\n  status\n}\n": types.RunLogs_DagRunFragmentDoc,
    "\nfragment RunLogs_run on PipelineRun {\n  id\n  logs\n  status\n}\n": types.RunLogs_RunFragmentDoc,
    "\n    fragment RunMessages_dagRun on DAGRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  ": types.RunMessages_DagRunFragmentDoc,
    "\n    fragment RunMessages_run on PipelineRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  ": types.RunMessages_RunFragmentDoc,
    "\nfragment RunMessages_dagRun on DAGRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n": types.RunMessages_DagRunFragmentDoc,
    "\nfragment RunMessages_run on PipelineRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n": types.RunMessages_RunFragmentDoc,
    "\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}\n": types.UpdateTemplateVersionDocument,
    "\n    fragment TemplateVersionCard_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      changelog\n      createdAt\n      isLatestVersion\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      template {\n        id\n        code\n      }\n      ...DeleteTemplateVersionTrigger_version\n    }\n    \n  ": types.TemplateVersionCard_VersionFragmentDoc,
    "\nfragment TemplateVersionCard_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  changelog\n  createdAt\n  isLatestVersion\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  template {\n    id\n    code\n  }\n  ...DeleteTemplateVersionTrigger_version\n}\n": types.TemplateVersionCard_VersionFragmentDoc,
    "\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n": types.UpgradePipelineVersionFromTemplateDocument,
    "\n    fragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n      id\n      code\n      newTemplateVersions {\n        id\n        versionNumber\n        changelog\n        createdAt\n      }\n    }\n  ": types.UpgradePipelineFromTemplateDialog_PipelineFragmentDoc,
    "\nfragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n  id\n  code\n  newTemplateVersions {\n    id\n    versionNumber\n    changelog\n    createdAt\n  }\n}\n": types.UpgradePipelineFromTemplateDialog_PipelineFragmentDoc,
    "mutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}": types.UpdatePipelineDocument,
    "query PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}": types.PipelinesPageDocument,
    "\n      mutation RunPipeline($input: RunDAGInput!) {\n        runDAG(input: $input) {\n          success\n          errors\n          dag {\n            id\n          }\n          dagRun {\n            id\n            externalUrl\n            externalId\n          }\n        }\n      }\n    ": types.RunPipelineDocument,
    "\n      query GetPipelineVersion($versionId: UUID!) {\n        pipelineVersion(id: $versionId) {\n          id\n          versionName\n          pipeline {\n            code\n          }\n          zipfile\n        }\n      }\n    ": types.GetPipelineVersionDocument,
    "\n        query GetPipelineRun($runId: UUID!) {\n          dagRun(id: $runId) {\n            config\n            externalUrl\n            externalId\n            status\n            executionDate\n            duration\n          }\n        }\n      ": types.GetPipelineRunDocument,
    "\n      mutation GetRunOutputDownloadURL($input: PrepareDownloadURLInput!) {\n        prepareDownloadURL(input: $input) {\n          success\n          url\n        }\n      }\n    ": types.GetRunOutputDownloadUrlDocument,
    "\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}\n": types.PipelineRunPollerDocument,
    "\n    fragment usePipelineRunPoller_run on PipelineRun {\n      id\n      status\n    }\n  ": types.UsePipelineRunPoller_RunFragmentDoc,
    "\nfragment usePipelineRunPoller_run on PipelineRun {\n  id\n  status\n}\n": types.UsePipelineRunPoller_RunFragmentDoc,
    "\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}\n": types.RemoveFromFavoritesDocument,
    "\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n": types.AddToFavoritesDocument,
    "\n    fragment FavoriteWebappButton_webapp on Webapp {\n      id\n      isFavorite\n    }\n  ": types.FavoriteWebappButton_WebappFragmentDoc,
    "\nfragment FavoriteWebappButton_webapp on Webapp {\n  id\n  isFavorite\n}\n": types.FavoriteWebappButton_WebappFragmentDoc,
    "\n    fragment WebappCard_webapp on Webapp {\n      id\n      icon\n      name\n      workspace {\n        slug\n        name\n      }\n    }\n  ": types.WebappCard_WebappFragmentDoc,
    "\nfragment WebappCard_webapp on Webapp {\n  id\n  icon\n  name\n  workspace {\n    slug\n    name\n  }\n}\n": types.WebappCard_WebappFragmentDoc,
    "\nmutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n": types.UpdateWebappDocument,
    "\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n": types.CreateWebappDocument,
    "\n    fragment WebappForm_webapp on Webapp {\n      id\n      name\n      description\n      url\n      icon\n      permissions {\n        update\n        delete\n      }\n    }\n  ": types.WebappForm_WebappFragmentDoc,
    "\n    fragment WebappForm_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n    }\n    \n  ": types.WebappForm_WorkspaceFragmentDoc,
    "\nfragment WebappForm_webapp on Webapp {\n  id\n  name\n  description\n  url\n  icon\n  permissions {\n    update\n    delete\n  }\n}\n": types.WebappForm_WebappFragmentDoc,
    "\nfragment WebappForm_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n}\n": types.WebappForm_WorkspaceFragmentDoc,
    "mutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}": types.UpdateWebappDocument,
    "\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n": types.ArchiveWorkspaceDocument,
    "\n    fragment ArchiveWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  ": types.ArchiveWorkspace_WorkspaceFragmentDoc,
    "\nfragment ArchiveWorkspace_workspace on Workspace {\n  slug\n  name\n}\n": types.ArchiveWorkspace_WorkspaceFragmentDoc,
    "\n    fragment BucketExplorer_workspace on Workspace {\n      slug\n      ...DownloadBucketObject_workspace\n      ...DeleteBucketObject_workspace\n    }\n\n    \n    \n  ": types.BucketExplorer_WorkspaceFragmentDoc,
    "\n    fragment BucketExplorer_objects on BucketObjectPage {\n      hasNextPage\n      hasPreviousPage\n      pageNumber\n      items {\n        key\n        name\n        path\n        size\n        updatedAt\n        type\n        ...DownloadBucketObject_object\n        ...DeleteBucketObject_object\n      }\n    }\n    \n    \n  ": types.BucketExplorer_ObjectsFragmentDoc,
    "\nfragment BucketExplorer_workspace on Workspace {\n  slug\n  ...DownloadBucketObject_workspace\n  ...DeleteBucketObject_workspace\n}\n": types.BucketExplorer_WorkspaceFragmentDoc,
    "\nfragment BucketExplorer_objects on BucketObjectPage {\n  hasNextPage\n  hasPreviousPage\n  pageNumber\n  items {\n    key\n    name\n    path\n    size\n    updatedAt\n    type\n    ...DownloadBucketObject_object\n    ...DeleteBucketObject_object\n  }\n}\n": types.BucketExplorer_ObjectsFragmentDoc,
    "\n    query ObjectPicker(\n      $slug: String!\n      $page: Int\n      $perPage: Int\n      $prefix: String\n    ) {\n      workspace(slug: $slug) {\n        slug\n        bucket {\n          objects(page: $page, perPage: $perPage, prefix: $prefix) {\n            items {\n              name\n              key\n              path\n              type\n              updatedAt\n            }\n            pageNumber\n            hasNextPage\n          }\n        }\n      }\n    }\n  ": types.ObjectPickerDocument,
    "\n    fragment BucketObjectPicker_workspace on Workspace {\n      slug\n    }\n  ": types.BucketObjectPicker_WorkspaceFragmentDoc,
    "\nfragment BucketObjectPicker_workspace on Workspace {\n  slug\n}\n": types.BucketObjectPicker_WorkspaceFragmentDoc,
    "\n    fragment ConnectionFieldsSection_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n        value\n        secret\n      }\n      permissions {\n        update\n      }\n      ...UpdateConnectionFieldsDialog_connection\n    }\n    \n  ": types.ConnectionFieldsSection_ConnectionFragmentDoc,
    "\nfragment ConnectionFieldsSection_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n    value\n    secret\n  }\n  permissions {\n    update\n  }\n  ...UpdateConnectionFieldsDialog_connection\n}\n": types.ConnectionFieldsSection_ConnectionFragmentDoc,
    "\n    fragment ConnectionUsageSnippets_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n      }\n    }\n  ": types.ConnectionUsageSnippets_ConnectionFragmentDoc,
    "\nfragment ConnectionUsageSnippets_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n  }\n}\n": types.ConnectionUsageSnippets_ConnectionFragmentDoc,
    "\n    fragment CreateBucketFolderDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n      bucket {\n        name\n      }\n    }\n  ": types.CreateBucketFolderDialog_WorkspaceFragmentDoc,
    "\nfragment CreateBucketFolderDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n  bucket {\n    name\n  }\n}\n": types.CreateBucketFolderDialog_WorkspaceFragmentDoc,
    "\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n": types.CreateConnectionDocument,
    "\n    fragment CreateConnectionDialog_workspace on Workspace {\n      slug\n    }\n  ": types.CreateConnectionDialog_WorkspaceFragmentDoc,
    "\nfragment CreateConnectionDialog_workspace on Workspace {\n  slug\n}\n": types.CreateConnectionDialog_WorkspaceFragmentDoc,
    "\nfragment CreatePipelineDialog_workspace on Workspace {\n  slug\n  ...BucketObjectPicker_workspace\n}\n": types.CreatePipelineDialog_WorkspaceFragmentDoc,
    "\nmutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n": types.CreateWorkspaceDocument,
    "\nquery DatabaseTableDataGrid($workspaceSlug: String!, $tableName: String!, $orderBy: String!, $direction: OrderByDirection!, $page: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    database {\n      table(name: $tableName) {\n        rows(orderBy: $orderBy, direction: $direction, page: $page, perPage: 10) {\n          pageNumber\n          hasNextPage\n          hasPreviousPage\n          items\n        }\n      }\n    }\n  }\n}\n": types.DatabaseTableDataGridDocument,
    "\n      query DatabaseTableDataGrid(\n        $workspaceSlug: String!\n        $tableName: String!\n        $orderBy: String!\n        $direction: OrderByDirection!\n        $page: Int!\n      ) {\n        workspace(slug: $workspaceSlug) {\n          slug\n          database {\n            table(name: $tableName) {\n              rows(\n                orderBy: $orderBy\n                direction: $direction\n                page: $page\n                perPage: 10\n              ) {\n                pageNumber\n                hasNextPage\n                hasPreviousPage\n                items\n              }\n            }\n          }\n        }\n      }\n    ": types.DatabaseTableDataGridDocument,
    "\n    fragment DatabaseTableDataGrid_workspace on Workspace {\n      slug\n    }\n  ": types.DatabaseTableDataGrid_WorkspaceFragmentDoc,
    "\n    fragment DatabaseTableDataGrid_table on DatabaseTable {\n      name\n      columns {\n        name\n      }\n    }\n  ": types.DatabaseTableDataGrid_TableFragmentDoc,
    "\n  fragment DatabaseTableDataGrid_workspace on Workspace {\n    slug\n  }\n": types.DatabaseTableDataGrid_WorkspaceFragmentDoc,
    "\n  fragment DatabaseTableDataGrid_table on DatabaseTable {\n    name\n    columns {\n      name\n    }\n  }\n": types.DatabaseTableDataGrid_TableFragmentDoc,
    "\n    fragment DatabaseVariablesSection_workspace on Workspace {\n      slug\n      database {\n        credentials {\n          dbName\n          username\n          password\n          host\n          port\n          url\n        }\n      }\n    }\n  ": types.DatabaseVariablesSection_WorkspaceFragmentDoc,
    "\nfragment DatabaseVariablesSection_workspace on Workspace {\n  slug\n  database {\n    credentials {\n      dbName\n      username\n      password\n      host\n      port\n      url\n    }\n  }\n}\n": types.DatabaseVariablesSection_WorkspaceFragmentDoc,
    "\n    fragment DeleteBucketObject_workspace on Workspace {\n      slug\n      permissions {\n        deleteObject\n      }\n    }\n  ": types.DeleteBucketObject_WorkspaceFragmentDoc,
    "\n    fragment DeleteBucketObject_object on BucketObject {\n      key\n      name\n      type\n    }\n  ": types.DeleteBucketObject_ObjectFragmentDoc,
    "\nfragment DeleteBucketObject_workspace on Workspace {\n  slug\n  permissions {\n    deleteObject\n  }\n}\n": types.DeleteBucketObject_WorkspaceFragmentDoc,
    "\nfragment DeleteBucketObject_object on BucketObject {\n  key\n  name\n  type\n}\n": types.DeleteBucketObject_ObjectFragmentDoc,
    "\n    fragment DeleteConnectionTrigger_workspace on Workspace {\n      slug\n    }\n  ": types.DeleteConnectionTrigger_WorkspaceFragmentDoc,
    "\n    fragment DeleteConnectionTrigger_connection on Connection {\n      id\n      name\n      permissions {\n        delete\n      }\n    }\n  ": types.DeleteConnectionTrigger_ConnectionFragmentDoc,
    "\nfragment DeleteConnectionTrigger_workspace on Workspace {\n  slug\n}\n": types.DeleteConnectionTrigger_WorkspaceFragmentDoc,
    "\nfragment DeleteConnectionTrigger_connection on Connection {\n  id\n  name\n  permissions {\n    delete\n  }\n}\n": types.DeleteConnectionTrigger_ConnectionFragmentDoc,
    "\n    fragment DatabaseTableDeleteTrigger_workspace on Workspace {\n      slug\n      permissions {\n        deleteDatabaseTable\n      }\n    }\n  ": types.DatabaseTableDeleteTrigger_WorkspaceFragmentDoc,
    "\n    fragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n      name\n    }\n  ": types.DatabaseTableDeleteTrigger_DatabaseFragmentDoc,
    "\nfragment DatabaseTableDeleteTrigger_workspace on Workspace {\n  slug\n  permissions {\n    deleteDatabaseTable\n  }\n}\n": types.DatabaseTableDeleteTrigger_WorkspaceFragmentDoc,
    "\nfragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n  name\n}\n": types.DatabaseTableDeleteTrigger_DatabaseFragmentDoc,
    "\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeletePipelineDocument,
    "\n    fragment PipelineDelete_pipeline on Pipeline {\n      id\n      name\n      code\n    }\n  ": types.PipelineDelete_PipelineFragmentDoc,
    "\n    fragment PipelineDelete_workspace on Workspace {\n      slug\n    }\n  ": types.PipelineDelete_WorkspaceFragmentDoc,
    "\nfragment PipelineDelete_pipeline on Pipeline {\n  id\n  name\n  code\n}\n": types.PipelineDelete_PipelineFragmentDoc,
    "\nfragment PipelineDelete_workspace on Workspace {\n  slug\n}\n": types.PipelineDelete_WorkspaceFragmentDoc,
    "\n    fragment DeletePipelineVersionTrigger_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  ": types.DeletePipelineVersionTrigger_VersionFragmentDoc,
    "\nfragment DeletePipelineVersionTrigger_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n": types.DeletePipelineVersionTrigger_VersionFragmentDoc,
    "\n    fragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      template {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  ": types.DeleteTemplateVersionTrigger_VersionFragmentDoc,
    "\nfragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  template {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n": types.DeleteTemplateVersionTrigger_VersionFragmentDoc,
    "\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeleteWebappDocument,
    "\n    fragment WebappDelete_webapp on Webapp {\n      id\n      name\n    }\n  ": types.WebappDelete_WebappFragmentDoc,
    "\n    fragment WebappDelete_workspace on Workspace {\n      slug\n    }\n  ": types.WebappDelete_WorkspaceFragmentDoc,
    "\nfragment WebappDelete_webapp on Webapp {\n  id\n  name\n}\n": types.WebappDelete_WebappFragmentDoc,
    "\nfragment WebappDelete_workspace on Workspace {\n  slug\n}\n": types.WebappDelete_WorkspaceFragmentDoc,
    "\n    fragment DownloadBucketObject_workspace on Workspace {\n      slug\n    }\n  ": types.DownloadBucketObject_WorkspaceFragmentDoc,
    "\n    fragment DownloadBucketObject_object on BucketObject {\n      key\n    }\n  ": types.DownloadBucketObject_ObjectFragmentDoc,
    "\nfragment DownloadBucketObject_workspace on Workspace {\n  slug\n}\n": types.DownloadBucketObject_WorkspaceFragmentDoc,
    "\nfragment DownloadBucketObject_object on BucketObject {\n  key\n}\n": types.DownloadBucketObject_ObjectFragmentDoc,
    "query FileBrowserDialog($slug: String!, $page: Int, $perPage: Int, $prefix: String, $query: String = \"\", $workspaceSlugs: [String!] = [], $useSearch: Boolean!) {\n  searchResults: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    prefix: $prefix\n  ) @include(if: $useSearch) {\n    totalItems\n    totalPages\n    pageNumber\n    items {\n      file {\n        name\n        key\n        path\n        type\n        updatedAt\n        size\n      }\n      score\n    }\n  }\n  workspace(slug: $slug) @skip(if: $useSearch) {\n    slug\n    bucket {\n      objects(page: $page, perPage: $perPage, prefix: $prefix) {\n        items {\n          ...FileBrowserDialog_bucketObject\n        }\n        pageNumber\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}": types.FileBrowserDialogDocument,
    "\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}\n": types.FileBrowserDialog_BucketObjectFragmentDoc,
    "\n    fragment FilesEditor_file on FileNode {\n      id\n      name\n      path\n      type\n      content\n      parentId\n      autoSelect\n      language\n      lineCount\n    }\n  ": types.FilesEditor_FileFragmentDoc,
    "\nfragment FilesEditor_file on FileNode {\n  id\n  name\n  path\n  type\n  content\n  parentId\n  autoSelect\n  language\n  lineCount\n}\n": types.FilesEditor_FileFragmentDoc,
    "\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}\n": types.UploadPipelineDocument,
    "\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n": types.GenerateNewDatabasePasswordDocument,
    "\n    fragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n      slug\n    }\n  ": types.GenerateWorkspaceDatabasePasswordDialog_WorkspaceFragmentDoc,
    "\nfragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n  slug\n}\n": types.GenerateWorkspaceDatabasePasswordDialog_WorkspaceFragmentDoc,
    "\n    mutation generateWebhookPipelineWebhookUrl(\n      $input: GeneratePipelineWebhookUrlInput!\n    ) {\n      generatePipelineWebhookUrl(input: $input) {\n        success\n        errors\n        pipeline {\n          id\n          code\n          webhookUrl\n        }\n      }\n    }\n  ": types.GenerateWebhookPipelineWebhookUrlDocument,
    "\n    fragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n      id\n      code\n    }\n  ": types.GeneratePipelineWebhookUrlDialog_PipelineFragmentDoc,
    "\nfragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n  id\n  code\n}\n": types.GeneratePipelineWebhookUrlDialog_PipelineFragmentDoc,
    "\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n": types.InviteWorkspaceMemberDocument,
    "\n    fragment InviteMemberWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  ": types.InviteMemberWorkspace_WorkspaceFragmentDoc,
    "\nfragment InviteMemberWorkspace_workspace on Workspace {\n  slug\n  name\n}\n": types.InviteMemberWorkspace_WorkspaceFragmentDoc,
    "\n    fragment PipelineCard_pipeline on Pipeline {\n      id\n      code\n      name\n      schedule\n      description\n      type\n      sourceTemplate {\n        id\n        name\n      }\n      ...PipelineMetadataDisplay_pipeline\n      currentVersion {\n        user {\n          ...User_user\n        }\n        versionName\n        createdAt\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n          executionDate\n          user {\n            ...User_user\n          }\n        }\n      }\n    }\n    \n    \n    \n  ": types.PipelineCard_PipelineFragmentDoc,
    "\n    fragment PipelineCard_workspace on Workspace {\n      slug\n    }\n  ": types.PipelineCard_WorkspaceFragmentDoc,
    "\nfragment PipelineCard_pipeline on Pipeline {\n  id\n  code\n  name\n  schedule\n  description\n  type\n  sourceTemplate {\n    id\n    name\n  }\n  ...PipelineMetadataDisplay_pipeline\n  currentVersion {\n    user {\n      ...User_user\n    }\n    versionName\n    createdAt\n  }\n  lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n    items {\n      ...PipelineRunStatusBadge_run\n      executionDate\n      user {\n        ...User_user\n      }\n    }\n  }\n}\n": types.PipelineCard_PipelineFragmentDoc,
    "\nfragment PipelineCard_workspace on Workspace {\n  slug\n}\n": types.PipelineCard_WorkspaceFragmentDoc,
    "\n    fragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n      id\n      user {\n        displayName\n      }\n    }\n  ": types.DeletePipelineRecipientTrigger_RecipientFragmentDoc,
    "\n    fragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n      permissions {\n        update\n      }\n    }\n  ": types.DeletePipelineRecipientTrigger_PipelineFragmentDoc,
    "\nfragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n  id\n  user {\n    displayName\n  }\n}\n": types.DeletePipelineRecipientTrigger_RecipientFragmentDoc,
    "\nfragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n  permissions {\n    update\n  }\n}\n": types.DeletePipelineRecipientTrigger_PipelineFragmentDoc,
    "\n      query PipelineRecipients($id: UUID!) {\n        pipeline(id: $id) {\n          recipients {\n            id\n            user {\n              id\n              displayName\n            }\n            notificationLevel\n            ...DeletePipelineRecipientTrigger_recipient\n          }\n          workspace {\n            slug\n            members {\n              totalItems\n            }\n          }\n          ...DeletePipelineRecipientTrigger_pipeline\n        }\n      }\n      \n      \n    ": types.PipelineRecipientsDocument,
    "\n    fragment PipelineRecipients_pipeline on Pipeline {\n      id\n      code\n      permissions {\n        update\n      }\n    }\n  ": types.PipelineRecipients_PipelineFragmentDoc,
    "\nfragment PipelineRecipients_pipeline on Pipeline {\n  id\n  code\n  permissions {\n    update\n  }\n}\n": types.PipelineRecipients_PipelineFragmentDoc,
    "\n    mutation UpdatePipelineVersionConfig($input: UpdatePipelineVersionInput!) {\n      updatePipelineVersion(input: $input) {\n        success\n        errors\n        pipelineVersion {\n          id\n          config\n        }\n      }\n    }\n  ": types.UpdatePipelineVersionConfigDocument,
    "\n    fragment PipelineVersionConfigDialog_version on PipelineVersion {\n      id\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      config\n      pipeline {\n        id\n        schedule\n        workspace {\n          slug\n        }\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    \n  ": types.PipelineVersionConfigDialog_VersionFragmentDoc,
    "\nfragment PipelineVersionConfigDialog_version on PipelineVersion {\n  id\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  config\n  pipeline {\n    id\n    schedule\n    workspace {\n      slug\n    }\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n": types.PipelineVersionConfigDialog_VersionFragmentDoc,
    "\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n": types.PipelineVersionPickerDocument,
    "\n    fragment PipelineVersionPicker_pipeline on Pipeline {\n      id\n    }\n  ": types.PipelineVersionPicker_PipelineFragmentDoc,
    "\n    fragment PipelineVersionPicker_version on PipelineVersion {\n      id\n      versionName\n      createdAt\n      config\n      parameters {\n        ...ParameterField_parameter\n      }\n      user {\n        displayName\n      }\n    }\n  ": types.PipelineVersionPicker_VersionFragmentDoc,
    "\nfragment PipelineVersionPicker_pipeline on Pipeline {\n  id\n}\n": types.PipelineVersionPicker_PipelineFragmentDoc,
    "\nfragment PipelineVersionPicker_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  parameters {\n    ...ParameterField_parameter\n  }\n  user {\n    displayName\n  }\n}\n": types.PipelineVersionPicker_VersionFragmentDoc,
    "\n    fragment RunOutputsTable_workspace on Workspace {\n      ...DownloadBucketObject_workspace\n      slug\n      bucket {\n        name\n      }\n    }\n  ": types.RunOutputsTable_WorkspaceFragmentDoc,
    "\n    fragment RunOutputsTable_run on PipelineRun {\n      id\n      outputs {\n        __typename\n        ... on GenericOutput {\n          genericName: name\n          genericType: type\n          genericUri: uri\n        }\n        ... on BucketObject {\n          name\n          key\n          path\n          type\n        }\n\n        ... on DatabaseTable {\n          tableName: name\n        }\n      }\n      datasetVersions {\n        name\n        dataset {\n          slug\n          name\n          workspace {\n            slug\n          }\n        }\n      }\n    }\n  ": types.RunOutputsTable_RunFragmentDoc,
    "\nfragment RunOutputsTable_workspace on Workspace {\n  ...DownloadBucketObject_workspace\n  slug\n  bucket {\n    name\n  }\n}\n": types.RunOutputsTable_WorkspaceFragmentDoc,
    "\nfragment RunOutputsTable_run on PipelineRun {\n  id\n  outputs {\n    __typename\n    ... on GenericOutput {\n      genericName: name\n      genericType: type\n      genericUri: uri\n    }\n    ... on BucketObject {\n      name\n      key\n      path\n      type\n    }\n    ... on DatabaseTable {\n      tableName: name\n    }\n  }\n  datasetVersions {\n    name\n    dataset {\n      slug\n      name\n      workspace {\n        slug\n      }\n    }\n  }\n}\n": types.RunOutputsTable_RunFragmentDoc,
    "query getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}": types.GetConnectionBySlugDhis2Document,
    "\nquery getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n": types.GetConnectionBySlugDhis2Document,
    "query getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}": types.GetConnectionBySlugIasoDocument,
    "\nquery getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n": types.GetConnectionBySlugIasoDocument,
    "\n    fragment ParameterField_parameter on PipelineParameter {\n      code\n      name\n      help\n      type\n      default\n      required\n      choices\n      connection\n      widget\n      multiple\n      directory\n    }\n  ": types.ParameterField_ParameterFragmentDoc,
    "\nfragment ParameterField_parameter on PipelineParameter {\n  code\n  name\n  help\n  type\n  default\n  required\n  choices\n  connection\n  widget\n  multiple\n  directory\n}\n": types.ParameterField_ParameterFragmentDoc,
    "\n  fragment RunPipelineDialog_version on PipelineVersion {\n    id\n    versionName\n    createdAt\n    config\n    user {\n      displayName\n    }\n    parameters {\n      ...ParameterField_parameter\n    }\n  }\n  \n": types.RunPipelineDialog_VersionFragmentDoc,
    "\n      query PipelineCurrentVersion(\n        $workspaceSlug: String!\n        $pipelineCode: String!\n      ) {\n        pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n          currentVersion {\n            id\n            versionName\n            createdAt\n            user {\n              displayName\n            }\n            config\n            parameters {\n              ...ParameterField_parameter\n            }\n          }\n        }\n      }\n      \n    ": types.PipelineCurrentVersionDocument,
    "\n    fragment RunPipelineDialog_pipeline on Pipeline {\n      id\n      workspace {\n        slug\n      }\n      permissions {\n        run\n      }\n      code\n      type\n      currentVersion {\n        id\n      }\n      ...PipelineVersionPicker_pipeline\n    }\n    \n    \n  ": types.RunPipelineDialog_PipelineFragmentDoc,
    "\n    fragment RunPipelineDialog_run on PipelineRun {\n      id\n      config\n      version {\n        id\n        versionName\n        createdAt\n        parameters {\n          ...ParameterField_parameter\n        }\n        user {\n          displayName\n        }\n      }\n    }\n    \n  ": types.RunPipelineDialog_RunFragmentDoc,
    "\nfragment RunPipelineDialog_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  user {\n    displayName\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n": types.RunPipelineDialog_VersionFragmentDoc,
    "\nfragment RunPipelineDialog_pipeline on Pipeline {\n  id\n  workspace {\n    slug\n  }\n  permissions {\n    run\n  }\n  code\n  type\n  currentVersion {\n    id\n  }\n  ...PipelineVersionPicker_pipeline\n}\n": types.RunPipelineDialog_PipelineFragmentDoc,
    "\nfragment RunPipelineDialog_run on PipelineRun {\n  id\n  config\n  version {\n    id\n    versionName\n    createdAt\n    parameters {\n      ...ParameterField_parameter\n    }\n    user {\n      displayName\n    }\n  }\n}\n": types.RunPipelineDialog_RunFragmentDoc,
    "\n      query SidebarMenu($page: Int, $perPage: Int) {\n        pendingWorkspaceInvitations(page: 1, perPage: 1) {\n          totalItems\n        }\n        workspaces(page: $page, perPage: $perPage) {\n          totalItems\n          items {\n            slug\n            name\n            countries {\n              code\n              flag\n            }\n          }\n        }\n      }\n    ": types.SidebarMenuDocument,
    "\n    fragment SidebarMenu_workspace on Workspace {\n      slug\n      name\n      countries {\n        flag\n        code\n      }\n      organization {\n        id\n        name\n        shortName\n        permissions {\n          createWorkspace\n        }\n      }\n    }\n  ": types.SidebarMenu_WorkspaceFragmentDoc,
    "\nfragment SidebarMenu_workspace on Workspace {\n  slug\n  name\n  countries {\n    flag\n    code\n  }\n  organization {\n    id\n    name\n    shortName\n    permissions {\n      createWorkspace\n    }\n  }\n}\n": types.SidebarMenu_WorkspaceFragmentDoc,
    "\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n": types.StopPipelineDocument,
    "\n    fragment StopPipelineDialog_run on PipelineRun {\n      id\n    }\n  ": types.StopPipelineDialog_RunFragmentDoc,
    "\n    fragment StopPipelineDialog_pipeline on Pipeline {\n      code\n    }\n  ": types.StopPipelineDialog_PipelineFragmentDoc,
    "\nfragment StopPipelineDialog_run on PipelineRun {\n  id\n}\n": types.StopPipelineDialog_RunFragmentDoc,
    "\nfragment StopPipelineDialog_pipeline on Pipeline {\n  code\n}\n": types.StopPipelineDialog_PipelineFragmentDoc,
    "\n    fragment TemplateCard_template on PipelineTemplate {\n      id\n      code\n      name\n      description\n      ...PipelineMetadataDisplay_template\n      currentVersion {\n        id\n        createdAt\n        user {\n          ...User_user\n        }\n      }\n    }\n    \n    \n  ": types.TemplateCard_TemplateFragmentDoc,
    "\n    fragment TemplateCard_workspace on Workspace {\n      slug\n    }\n  ": types.TemplateCard_WorkspaceFragmentDoc,
    "\nfragment TemplateCard_template on PipelineTemplate {\n  id\n  code\n  name\n  description\n  ...PipelineMetadataDisplay_template\n  currentVersion {\n    id\n    createdAt\n    user {\n      ...User_user\n    }\n  }\n}\n": types.TemplateCard_TemplateFragmentDoc,
    "\nfragment TemplateCard_workspace on Workspace {\n  slug\n}\n": types.TemplateCard_WorkspaceFragmentDoc,
    "\n    fragment UpdateConnectionFieldsDialog_connection on Connection {\n      id\n      name\n      type\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  ": types.UpdateConnectionFieldsDialog_ConnectionFragmentDoc,
    "\nfragment UpdateConnectionFieldsDialog_connection on Connection {\n  id\n  name\n  type\n  fields {\n    code\n    value\n    secret\n  }\n}\n": types.UpdateConnectionFieldsDialog_ConnectionFragmentDoc,
    "\n    fragment UploadObjectDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n    }\n  ": types.UploadObjectDialog_WorkspaceFragmentDoc,
    "\nfragment UploadObjectDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n}\n": types.UploadObjectDialog_WorkspaceFragmentDoc,
    "query GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}": types.GetUsersDocument,
    "\nquery GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}\n": types.GetUsersDocument,
    "\n    fragment UserPicker_user on User {\n      ...User_user\n    }\n    \n  ": types.UserPicker_UserFragmentDoc,
    "\nfragment UserPicker_user on User {\n  ...User_user\n}\n": types.UserPicker_UserFragmentDoc,
    "\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}\n": types.WorkspaceConnectionPickerDocument,
    "\n    fragment WorkspaceConnectionPicker_workspace on Workspace {\n      slug\n      connections {\n        id\n        name\n        slug\n        type\n      }\n    }\n  ": types.WorkspaceConnectionPicker_WorkspaceFragmentDoc,
    "\nfragment WorkspaceConnectionPicker_workspace on Workspace {\n  slug\n  connections {\n    id\n    name\n    slug\n    type\n  }\n}\n": types.WorkspaceConnectionPicker_WorkspaceFragmentDoc,
    "\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeleteWorkspaceInvitationDocument,
    "\n    fragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  ": types.DeleteWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nfragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n": types.DeleteWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n": types.ResendWorkspaceInvitationDocument,
    "\n    fragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  ": types.ResendWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\nfragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n": types.ResendWorkspaceInvitation_WorkspaceInvitationFragmentDoc,
    "\n      query WorkspaceInvitations($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          invitations(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              email\n              status\n              invitedBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    ": types.WorkspaceInvitationsDocument,
    "\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n": types.WorkspaceMemberPickerDocument,
    "\n    fragment WorkspaceMemberPicker_workspace on Workspace {\n      slug\n      members {\n        items {\n          id\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": types.WorkspaceMemberPicker_WorkspaceFragmentDoc,
    "\nfragment WorkspaceMemberPicker_workspace on Workspace {\n  slug\n  members {\n    items {\n      id\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n": types.WorkspaceMemberPicker_WorkspaceFragmentDoc,
    "\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n": types.DeleteWorkspaceMemberDocument,
    "\n    fragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      user {\n        id\n        displayName\n      }\n      organizationMembership {\n        role\n      }\n    }\n  ": types.DeleteWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nfragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  user {\n    id\n    displayName\n  }\n  organizationMembership {\n    role\n  }\n}\n": types.DeleteWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n": types.UpdateWorkspaceMemberDocument,
    "\n    fragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      role\n    }\n  ": types.UpdateWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\nfragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  role\n}\n": types.UpdateWorkspaceMember_WorkspaceMemberFragmentDoc,
    "\n      query WorskspaceMembers($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          members(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              user {\n                id\n                displayName\n                email\n              }\n              organizationMembership {\n                role\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    ": types.WorskspaceMembersDocument,
    "\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n": types.WorkspacePickerDocument,
    "\n    fragment WorkspacePicker_value on Workspace {\n      slug\n      name\n    }\n  ": types.WorkspacePicker_ValueFragmentDoc,
    "\nfragment WorkspacePicker_value on Workspace {\n  slug\n  name\n}\n": types.WorkspacePicker_ValueFragmentDoc,
    "mutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation createPipeline($input: CreatePipelineInput!) {\n  createPipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      code\n    }\n  }\n}\n\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineVersion($input: DeletePipelineVersionInput!) {\n  deletePipelineVersion(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n  addPipelineRecipient(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}": types.CreateWorkspaceDocument,
    "query WorkspacesPage {\n  workspaces(page: 1, perPage: 1) {\n    items {\n      slug\n    }\n  }\n}\n\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspacePipelineStartPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n\nquery WorkspaceTemplatesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipelineTemplates(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    items {\n      ...TemplateCard_template\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}": types.WorkspacesPageDocument,
    "query GetTemplateVersionForDownload($versionId: UUID!) {\n  pipelineTemplateVersion(id: $versionId) {\n    id\n    versionNumber\n    template {\n      code\n    }\n    sourcePipelineVersion {\n      zipfile\n    }\n  }\n}": types.GetTemplateVersionForDownloadDocument,
    "\n      mutation GetFileDownloadUrl($input: PrepareObjectDownloadInput!) {\n        prepareObjectDownload(input: $input) {\n          success\n          downloadUrl\n        }\n      }\n    ": types.GetFileDownloadUrlDocument,
    "\n      mutation deleteBucketObject($input: DeleteBucketObjectInput!) {\n        deleteBucketObject(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteBucketObjectDocument,
    "\n      mutation GetBucketUploadUrl($input: PrepareObjectUploadInput!) {\n        prepareObjectUpload(input: $input) {\n          success\n          uploadUrl\n        }\n      }\n    ": types.GetBucketUploadUrlDocument,
    "\n      mutation CreateBucketFolder($input: CreateBucketFolderInput!) {\n        createBucketFolder(input: $input) {\n          success\n          errors\n          folder {\n            key\n            name\n            type\n          }\n        }\n      }\n    ": types.CreateBucketFolderDocument,
    "\n      mutation DeleteConnection($input: DeleteConnectionInput!) {\n        deleteConnection(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteConnectionDocument,
    "\n      mutation deleteWorkspaceDatabaseTable(\n        $input: DeleteWorkspaceDatabaseTableInput!\n      ) {\n        deleteWorkspaceDatabaseTable(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteWorkspaceDatabaseTableDocument,
    "\n      mutation launchNotebookServer($input: LaunchNotebookServerInput!) {\n        launchNotebookServer(input: $input) {\n          success\n          server {\n            name\n            ready\n            url\n          }\n        }\n      }\n    ": types.LaunchNotebookServerDocument,
    "\n      mutation UpdateWorkspacePipeline($input: UpdatePipelineInput!) {\n        updatePipeline(input: $input) {\n          success\n          errors\n          pipeline {\n            id\n            name\n            description\n            schedule\n            config\n            functionalType\n            updatedAt\n            webhookEnabled\n            webhookUrl\n            autoUpdateFromTemplate\n            tags {\n              ...Tag_tag\n            }\n            recipients {\n              user {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n      \n    ": types.UpdateWorkspacePipelineDocument,
    "\n      mutation RunWorkspacePipeline($input: RunPipelineInput!) {\n        runPipeline(input: $input) {\n          success\n          errors\n\n          run {\n            id\n            pipeline {\n              __typename\n              id\n            }\n          }\n        }\n      }\n    ": types.RunWorkspacePipelineDocument,
    "\n                fragment NewRun on PipelineRun {\n                  id\n                }\n              ": types.NewRunFragmentDoc,
    "\n      mutation DeletePipelineVersion($input: DeletePipelineVersionInput!) {\n        deletePipelineVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeletePipelineVersionDocument,
    "\n      mutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n        addPipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.AddPipelineRecipientDocument,
    "\n      mutation updatePipelineRecipient($input: UpdatePipelineRecipientInput!) {\n        updatePipelineRecipient(input: $input) {\n          success\n          errors\n          recipient {\n            id\n            notificationLevel\n          }\n        }\n      }\n    ": types.UpdatePipelineRecipientDocument,
    "\n      mutation deletePipelineRecipient($input: DeletePipelineRecipientInput!) {\n        deletePipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeletePipelineRecipientDocument,
    "\nfragment NewRun on PipelineRun {\n  id\n}\n": types.NewRunFragmentDoc,
    "\n      mutation UpdateWorkspaceTemplate($input: UpdateTemplateInput!) {\n        updatePipelineTemplate(input: $input) {\n          success\n          errors\n          template {\n            id\n            name\n            description\n            config\n            functionalType\n            tags {\n              ...Tag_tag\n            }\n          }\n        }\n      }\n      \n    ": types.UpdateWorkspaceTemplateDocument,
    "\n      mutation DeleteTemplateVersion($input: DeleteTemplateVersionInput!) {\n        deleteTemplateVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    ": types.DeleteTemplateVersionDocument,
    "\n    fragment PipelineLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  ": types.PipelineLayout_WorkspaceFragmentDoc,
    "\n    fragment PipelineLayout_pipeline on Pipeline {\n      id\n      code\n      name\n      permissions {\n        run\n        delete\n        update\n        createTemplateVersion {\n          isAllowed\n          reasons\n        }\n      }\n      template {\n        id\n        name\n        code\n      }\n      currentVersion {\n        id\n        name\n        description\n        config\n        externalLink\n        templateVersion {\n          id\n        }\n        ...PipelineVersionPicker_version\n        ...DownloadPipelineVersion_version\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    \n    \n    \n  ": types.PipelineLayout_PipelineFragmentDoc,
    "\nfragment PipelineLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n": types.PipelineLayout_WorkspaceFragmentDoc,
    "\nfragment PipelineLayout_pipeline on Pipeline {\n  id\n  code\n  name\n  permissions {\n    run\n    delete\n    update\n    createTemplateVersion {\n      isAllowed\n      reasons\n    }\n  }\n  template {\n    id\n    name\n    code\n  }\n  currentVersion {\n    id\n    name\n    description\n    config\n    externalLink\n    templateVersion {\n      id\n    }\n    ...PipelineVersionPicker_version\n    ...DownloadPipelineVersion_version\n  }\n  ...RunPipelineDialog_pipeline\n}\n": types.PipelineLayout_PipelineFragmentDoc,
    "\n    fragment TabLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n    }\n    \n  ": types.TabLayout_WorkspaceFragmentDoc,
    "\nfragment TabLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n}\n": types.TabLayout_WorkspaceFragmentDoc,
    "\n    fragment TemplateLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  ": types.TemplateLayout_WorkspaceFragmentDoc,
    "\n    fragment TemplateLayout_template on PipelineTemplate {\n      id\n      code\n      name\n      permissions {\n        delete\n        update\n      }\n      currentVersion {\n        id\n        ...DownloadTemplateVersion_version\n      }\n    }\n    \n  ": types.TemplateLayout_TemplateFragmentDoc,
    "\nfragment TemplateLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n": types.TemplateLayout_WorkspaceFragmentDoc,
    "\nfragment TemplateLayout_template on PipelineTemplate {\n  id\n  code\n  name\n  permissions {\n    delete\n    update\n  }\n  currentVersion {\n    id\n    ...DownloadTemplateVersion_version\n  }\n}\n": types.TemplateLayout_TemplateFragmentDoc,
    "\n    fragment Sidebar_workspace on Workspace {\n      slug\n      ...SidebarMenu_workspace\n      permissions {\n        manageMembers\n        update\n        launchNotebookServer\n      }\n    }\n    \n  ": types.Sidebar_WorkspaceFragmentDoc,
    "\nfragment Sidebar_workspace on Workspace {\n  slug\n  ...SidebarMenu_workspace\n  permissions {\n    manageMembers\n    update\n    launchNotebookServer\n  }\n}\n": types.Sidebar_WorkspaceFragmentDoc,
    "\n    fragment WorkspaceLayout_workspace on Workspace {\n      slug\n      ...Sidebar_workspace\n    }\n    \n  ": types.WorkspaceLayout_WorkspaceFragmentDoc,
    "\nfragment WorkspaceLayout_workspace on Workspace {\n  slug\n  ...Sidebar_workspace\n}\n": types.WorkspaceLayout_WorkspaceFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProperty_user on User {\n      ...User_user\n    }\n    \n  "): (typeof documents)["\n    fragment UserProperty_user on User {\n      ...User_user\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UserProperty_user on User {\n  ...User_user\n}\n"): (typeof documents)["\nfragment UserProperty_user on User {\n  ...User_user\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserColumn_user on User {\n      ...User_user\n    }\n    \n  "): (typeof documents)["\n    fragment UserColumn_user on User {\n      ...User_user\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UserColumn_user on User {\n  ...User_user\n}\n"): (typeof documents)["\nfragment UserColumn_user on User {\n  ...User_user\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CountryBadge_country on Country {\n      code\n      name\n    }\n  "): (typeof documents)["\n    fragment CountryBadge_country on Country {\n      code\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CountryBadge_country on Country {\n  code\n  name\n}\n"): (typeof documents)["\nfragment CountryBadge_country on Country {\n  code\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}\n"): (typeof documents)["\nquery CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CountryPicker_country on Country {\n      code\n      alpha3\n      name\n    }\n  "): (typeof documents)["\n    fragment CountryPicker_country on Country {\n      code\n      alpha3\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CountryPicker_country on Country {\n  code\n  alpha3\n  name\n}\n"): (typeof documents)["\nfragment CountryPicker_country on Country {\n  code\n  alpha3\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseTablesPage on DatabaseTableResultPage {\n      items {\n        databaseTable {\n          name\n          count\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "): (typeof documents)["\n    fragment DatabaseTablesPage on DatabaseTableResultPage {\n      items {\n        databaseTable {\n          name\n          count\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatabaseTablesPage on DatabaseTableResultPage {\n  items {\n    databaseTable {\n      name\n      count\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"): (typeof documents)["\nfragment DatabaseTablesPage on DatabaseTableResultPage {\n  items {\n    databaseTable {\n      name\n      count\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetsPage on DatasetResultPage {\n      items {\n        dataset {\n          id\n          slug\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          createdBy {\n            id\n            displayName\n            ...UserAvatar_user\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "): (typeof documents)["\n    fragment DatasetsPage on DatasetResultPage {\n      items {\n        dataset {\n          id\n          slug\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          createdBy {\n            id\n            displayName\n            ...UserAvatar_user\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetsPage on DatasetResultPage {\n  items {\n    dataset {\n      id\n      slug\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      createdBy {\n        id\n        displayName\n        ...UserAvatar_user\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"): (typeof documents)["\nfragment DatasetsPage on DatasetResultPage {\n  items {\n    dataset {\n      id\n      slug\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      createdBy {\n        id\n        displayName\n        ...UserAvatar_user\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FilesPage on FileResultPage {\n      items {\n        file {\n          name\n          path\n          size\n          updatedAt\n          type\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "): (typeof documents)["\n    fragment FilesPage on FileResultPage {\n      items {\n        file {\n          name\n          path\n          size\n          updatedAt\n          type\n        }\n        score\n        workspace {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment FilesPage on FileResultPage {\n  items {\n    file {\n      name\n      path\n      size\n      updatedAt\n      type\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"): (typeof documents)["\nfragment FilesPage on FileResultPage {\n  items {\n    file {\n      name\n      path\n      size\n      updatedAt\n      type\n    }\n    score\n    workspace {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelinesPage on PipelineResultPage {\n      items {\n        pipeline {\n          id\n          code\n          name\n          description\n          updatedAt\n          functionalType\n          tags {\n            ...Tag_tag\n          }\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n            items {\n              ...PipelineRunStatusBadge_run\n            }\n          }\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n    \n  "): (typeof documents)["\n    fragment PipelinesPage on PipelineResultPage {\n      items {\n        pipeline {\n          id\n          code\n          name\n          description\n          updatedAt\n          functionalType\n          tags {\n            ...Tag_tag\n          }\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n            items {\n              ...PipelineRunStatusBadge_run\n            }\n          }\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelinesPage on PipelineResultPage {\n  items {\n    pipeline {\n      id\n      code\n      name\n      description\n      updatedAt\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n        }\n      }\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"): (typeof documents)["\nfragment PipelinesPage on PipelineResultPage {\n  items {\n    pipeline {\n      id\n      code\n      name\n      description\n      updatedAt\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n        }\n      }\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineTemplatesPage on PipelineTemplateResultPage {\n      items {\n        pipelineTemplate {\n          id\n          code\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          currentVersion {\n            id\n            versionNumber\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "): (typeof documents)["\n    fragment PipelineTemplatesPage on PipelineTemplateResultPage {\n      items {\n        pipelineTemplate {\n          id\n          code\n          name\n          description\n          workspace {\n            slug\n            ...WorkspaceDisplayFragment\n          }\n          currentVersion {\n            id\n            versionNumber\n          }\n          updatedAt\n        }\n        score\n      }\n      totalItems\n      pageNumber\n      totalPages\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineTemplatesPage on PipelineTemplateResultPage {\n  items {\n    pipelineTemplate {\n      id\n      code\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      currentVersion {\n        id\n        versionNumber\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"): (typeof documents)["\nfragment PipelineTemplatesPage on PipelineTemplateResultPage {\n  items {\n    pipelineTemplate {\n      id\n      code\n      name\n      description\n      workspace {\n        slug\n        ...WorkspaceDisplayFragment\n      }\n      currentVersion {\n        id\n        versionNumber\n      }\n      updatedAt\n    }\n    score\n  }\n  totalItems\n  pageNumber\n  totalPages\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n  workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n    totalItems\n    items {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n}\n"): (typeof documents)["\nquery GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n  workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n    totalItems\n    items {\n      slug\n      ...WorkspaceDisplayFragment\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  files: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...FilesPage\n  }\n}\n"): (typeof documents)["\nquery SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  files: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...FilesPage\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  pipelineTemplates: searchPipelineTemplates(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...PipelineTemplatesPage\n  }\n}\n"): (typeof documents)["\nquery SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  pipelineTemplates: searchPipelineTemplates(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...PipelineTemplatesPage\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n  pipelines: searchPipelines(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    functionalType: $functionalType\n  ) {\n    __typename\n    ...PipelinesPage\n  }\n}\n"): (typeof documents)["\nquery SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n  pipelines: searchPipelines(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    functionalType: $functionalType\n  ) {\n    __typename\n    ...PipelinesPage\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  datasets: searchDatasets(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatasetsPage\n  }\n}\n"): (typeof documents)["\nquery SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  datasets: searchDatasets(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatasetsPage\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  databaseTables: searchDatabaseTables(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatabaseTablesPage\n  }\n}\n"): (typeof documents)["\nquery SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n  databaseTables: searchDatabaseTables(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n  ) {\n    __typename\n    ...DatabaseTablesPage\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      datasets: searchDatasets(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...DatasetsPage\n      }\n      \n    }\n  "): (typeof documents)["\n    query SearchDatasets($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      datasets: searchDatasets(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...DatasetsPage\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n      pipelines: searchPipelines(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage, functionalType: $functionalType) {\n        __typename\n        ...PipelinesPage\n      }\n      \n    }\n  "): (typeof documents)["\n    query SearchPipelines($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int, $functionalType: PipelineFunctionalType) {\n      pipelines: searchPipelines(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage, functionalType: $functionalType) {\n        __typename\n        ...PipelinesPage\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      pipelineTemplates: searchPipelineTemplates(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...PipelineTemplatesPage\n      }\n      \n    }\n  "): (typeof documents)["\n    query SearchPipelineTemplates($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      pipelineTemplates: searchPipelineTemplates(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...PipelineTemplatesPage\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      databaseTables: searchDatabaseTables(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...DatabaseTablesPage\n      }\n      \n    }\n  "): (typeof documents)["\n    query SearchDatabaseTables($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      databaseTables: searchDatabaseTables(\n        query: $query\n        workspaceSlugs: $workspaceSlugs\n          page: $page\n          perPage: $perPage\n      ) {\n        __typename\n        ...DatabaseTablesPage\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      files: searchFiles(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...FilesPage\n      }\n      \n    }\n  "): (typeof documents)["\n    query SearchFiles($query: String!, $workspaceSlugs: [String]!, $page: Int, $perPage: Int) {\n      files: searchFiles(query: $query, workspaceSlugs: $workspaceSlugs, page: $page, perPage: $perPage) {\n        __typename\n        ...FilesPage\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n      workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n        totalItems\n        items {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      \n    }\n  "): (typeof documents)["\n    query GetWorkspaces($organizationId: UUID, $page: Int, $perPage: Int) {\n      workspaces(organizationId: $organizationId, page: $page, perPage: $perPage) {\n        totalItems\n        items {\n          slug\n          ...WorkspaceDisplayFragment\n        }\n      }\n      \n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspaceDisplayFragment on Workspace {\n      name\n      countries {\n        code\n      }\n    }\n  "): (typeof documents)["\n    fragment WorkspaceDisplayFragment on Workspace {\n      name\n      countries {\n        code\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspaceDisplayFragment on Workspace {\n  name\n  countries {\n    code\n  }\n}\n"): (typeof documents)["\nfragment WorkspaceDisplayFragment on Workspace {\n  name\n  countries {\n    code\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Tag_tag on Tag {\n      id\n      name\n    }\n  "): (typeof documents)["\n    fragment Tag_tag on Tag {\n      id\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment Tag_tag on Tag {\n  id\n  name\n}\n"): (typeof documents)["\nfragment Tag_tag on Tag {\n  id\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment User_user on User {\n      id\n      email\n      displayName\n      ...UserAvatar_user\n    }\n    \n  "): (typeof documents)["\n    fragment User_user on User {\n      id\n      email\n      displayName\n      ...UserAvatar_user\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment User_user on User {\n  id\n  email\n  displayName\n  ...UserAvatar_user\n}\n"): (typeof documents)["\nfragment User_user on User {\n  id\n  email\n  displayName\n  ...UserAvatar_user\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}"): (typeof documents)["query CountryPicker {\n  countries {\n    ...CountryPicker_country\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ColumnMetadataDrawer_file on DatasetVersionFile {\n      id\n      targetId\n      attributes {\n        id\n        key\n        value\n        label\n        system\n        __typename\n      }\n      properties\n    }\n  "): (typeof documents)["\n    fragment ColumnMetadataDrawer_file on DatasetVersionFile {\n      id\n      targetId\n      attributes {\n        id\n        key\n        value\n        label\n        system\n        __typename\n      }\n      properties\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ColumnMetadataDrawer_file on DatasetVersionFile {\n  id\n  targetId\n  attributes {\n    id\n    key\n    value\n    label\n    system\n    __typename\n  }\n  properties\n}\n"): (typeof documents)["\nfragment ColumnMetadataDrawer_file on DatasetVersionFile {\n  id\n  targetId\n  attributes {\n    id\n    key\n    value\n    label\n    system\n    __typename\n  }\n  properties\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateDatasetDialog($input: CreateDatasetInput!) {\n      createDataset(input: $input) {\n        dataset {\n          id\n          slug\n          workspace {\n            slug\n          }\n        }\n        link {\n          id\n        }\n        success\n        errors\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateDatasetDialog($input: CreateDatasetInput!) {\n      createDataset(input: $input) {\n        dataset {\n          id\n          slug\n          workspace {\n            slug\n          }\n        }\n        link {\n          id\n        }\n        success\n        errors\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CreateDatasetDialog_workspace on Workspace {\n      slug\n      name\n      permissions {\n        createDataset\n      }\n    }\n  "): (typeof documents)["\n    fragment CreateDatasetDialog_workspace on Workspace {\n      slug\n      name\n      permissions {\n        createDataset\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CreateDatasetDialog_workspace on Workspace {\n  slug\n  name\n  permissions {\n    createDataset\n  }\n}\n"): (typeof documents)["\nfragment CreateDatasetDialog_workspace on Workspace {\n  slug\n  name\n  permissions {\n    createDataset\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetCard_link on DatasetLink {\n      dataset {\n        name\n        slug\n        description\n        updatedAt\n        workspace {\n          slug\n          name\n        }\n      }\n      id\n      workspace {\n        slug\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment DatasetCard_link on DatasetLink {\n      dataset {\n        name\n        slug\n        description\n        updatedAt\n        workspace {\n          slug\n          name\n        }\n      }\n      id\n      workspace {\n        slug\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetCard_link on DatasetLink {\n  dataset {\n    name\n    slug\n    description\n    updatedAt\n    workspace {\n      slug\n      name\n    }\n  }\n  id\n  workspace {\n    slug\n    name\n  }\n}\n"): (typeof documents)["\nfragment DatasetCard_link on DatasetLink {\n  dataset {\n    name\n    slug\n    description\n    updatedAt\n    workspace {\n      slug\n      name\n    }\n  }\n  id\n  workspace {\n    slug\n    name\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetExplorer_version on DatasetVersion {\n      id\n      files(page: $page, perPage: $perPage) {\n        totalPages\n        pageNumber\n        totalItems\n        items {\n          ...DatasetExplorer_file\n        }\n      }\n      ...DatasetVersionFileSample_version\n      ...DatasetVersionFileColumns_version\n    }\n    \n    \n  "): (typeof documents)["\n    fragment DatasetExplorer_version on DatasetVersion {\n      id\n      files(page: $page, perPage: $perPage) {\n        totalPages\n        pageNumber\n        totalItems\n        items {\n          ...DatasetExplorer_file\n        }\n      }\n      ...DatasetVersionFileSample_version\n      ...DatasetVersionFileColumns_version\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetExplorer_version on DatasetVersion {\n  id\n  files(page: $page, perPage: $perPage) {\n    totalPages\n    pageNumber\n    totalItems\n    items {\n      ...DatasetExplorer_file\n    }\n  }\n  ...DatasetVersionFileSample_version\n  ...DatasetVersionFileColumns_version\n}\n"): (typeof documents)["\nfragment DatasetExplorer_version on DatasetVersion {\n  id\n  files(page: $page, perPage: $perPage) {\n    totalPages\n    pageNumber\n    totalItems\n    items {\n      ...DatasetExplorer_file\n    }\n  }\n  ...DatasetVersionFileSample_version\n  ...DatasetVersionFileColumns_version\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}"): (typeof documents)["fragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}\n"): (typeof documents)["\nfragment DatasetExplorer_file on DatasetVersionFile {\n  id\n  filename\n  createdAt\n  createdBy {\n    displayName\n  }\n  ...DownloadVersionFile_file\n  ...DatasetVersionFileSample_file\n  ...DatasetVersionFileColumns_file\n  contentType\n  size\n  uri\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query DatasetLinksDataGrid($datasetId: ID!, $page: Int) {\n        dataset(id: $datasetId) {\n          links(page: $page, perPage: 6) {\n            totalItems\n            items {\n              ...DeleteDatasetLinkTrigger_datasetLink\n              permissions {\n                delete\n              }\n              workspace {\n                slug\n                name\n              }\n              createdBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query DatasetLinksDataGrid($datasetId: ID!, $page: Int) {\n        dataset(id: $datasetId) {\n          links(page: $page, perPage: 6) {\n            totalItems\n            items {\n              ...DeleteDatasetLinkTrigger_datasetLink\n              permissions {\n                delete\n              }\n              workspace {\n                slug\n                name\n              }\n              createdBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetLinksDataGrid_dataset on Dataset {\n      id\n      name\n    }\n  "): (typeof documents)["\n    fragment DatasetLinksDataGrid_dataset on Dataset {\n      id\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetLinksDataGrid_dataset on Dataset {\n  id\n  name\n}\n"): (typeof documents)["\nfragment DatasetLinksDataGrid_dataset on Dataset {\n  id\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n"): (typeof documents)["\nquery DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetPicker_workspace on Workspace {\n      datasets {\n        items {\n          id\n          dataset {\n            slug\n            name\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment DatasetPicker_workspace on Workspace {\n      datasets {\n        items {\n          id\n          dataset {\n            slug\n            name\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetPicker_workspace on Workspace {\n  datasets {\n    items {\n      id\n      dataset {\n        slug\n        name\n      }\n    }\n  }\n}\n"): (typeof documents)["\nfragment DatasetPicker_workspace on Workspace {\n  datasets {\n    items {\n      id\n      dataset {\n        slug\n        name\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionFileColumns_file on DatasetVersionFile {\n      id\n      filename\n      ...ColumnMetadataDrawer_file\n    }\n    \n  "): (typeof documents)["\n    fragment DatasetVersionFileColumns_file on DatasetVersionFile {\n      id\n      filename\n      ...ColumnMetadataDrawer_file\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionFileColumns_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        permissions {\n          update\n        }\n        workspace {\n          slug\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionFileColumns_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        permissions {\n          update\n        }\n        workspace {\n          slug\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionFileColumns_file on DatasetVersionFile {\n  id\n  filename\n  ...ColumnMetadataDrawer_file\n}\n"): (typeof documents)["\nfragment DatasetVersionFileColumns_file on DatasetVersionFile {\n  id\n  filename\n  ...ColumnMetadataDrawer_file\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionFileColumns_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    permissions {\n      update\n    }\n    workspace {\n      slug\n    }\n  }\n}\n"): (typeof documents)["\nfragment DatasetVersionFileColumns_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    permissions {\n      update\n    }\n    workspace {\n      slug\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDatasetVersionFileSample($id: ID!) {\n    datasetVersionFile(id: $id) {\n      id\n      properties\n      fileSample {\n        sample\n        status\n        statusReason\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDatasetVersionFileSample($id: ID!) {\n    datasetVersionFile(id: $id) {\n      id\n      properties\n      fileSample {\n        sample\n        status\n        statusReason\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionFileSample_file on DatasetVersionFile {\n      id\n      filename\n      contentType\n      size\n      downloadUrl(attachment: false)\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionFileSample_file on DatasetVersionFile {\n      id\n      filename\n      contentType\n      size\n      downloadUrl(attachment: false)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionFileSample_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        workspace {\n          slug\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionFileSample_version on DatasetVersion {\n      name\n      dataset {\n        slug\n        workspace {\n          slug\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionFileSample_file on DatasetVersionFile {\n  id\n  filename\n  contentType\n  size\n  downloadUrl(attachment: false)\n}\n"): (typeof documents)["\nfragment DatasetVersionFileSample_file on DatasetVersionFile {\n  id\n  filename\n  contentType\n  size\n  downloadUrl(attachment: false)\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionFileSample_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    workspace {\n      slug\n    }\n  }\n}\n"): (typeof documents)["\nfragment DatasetVersionFileSample_version on DatasetVersion {\n  name\n  dataset {\n    slug\n    workspace {\n      slug\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query DatasetVersionFilesDataGrid(\n        $versionId: ID!\n        $page: Int = 1\n        $perPage: Int!\n      ) {\n        datasetVersion(id: $versionId) {\n          id\n          files(page: $page, perPage: $perPage) {\n            items {\n              ...DownloadVersionFile_file\n              id\n              contentType\n              createdAt\n              uri\n              filename\n            }\n            totalPages\n            totalItems\n            pageNumber\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query DatasetVersionFilesDataGrid(\n        $versionId: ID!\n        $page: Int = 1\n        $perPage: Int!\n      ) {\n        datasetVersion(id: $versionId) {\n          id\n          files(page: $page, perPage: $perPage) {\n            items {\n              ...DownloadVersionFile_file\n              id\n              contentType\n              createdAt\n              uri\n              filename\n            }\n            totalPages\n            totalItems\n            pageNumber\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n      id\n      name\n      permissions {\n        download\n      }\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n      id\n      name\n      permissions {\n        download\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n  id\n  name\n  permissions {\n    download\n  }\n}\n"): (typeof documents)["\nfragment DatasetVersionFilesDataGrid_version on DatasetVersion {\n  id\n  name\n  permissions {\n    download\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionPicker_version on DatasetVersion {\n      id\n      name\n      createdAt\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionPicker_version on DatasetVersion {\n      id\n      name\n      createdAt\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetVersionPicker_dataset on Dataset {\n      id\n    }\n  "): (typeof documents)["\n    fragment DatasetVersionPicker_dataset on Dataset {\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionPicker_version on DatasetVersion {\n  id\n  name\n  createdAt\n}\n"): (typeof documents)["\nfragment DatasetVersionPicker_version on DatasetVersion {\n  id\n  name\n  createdAt\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetVersionPicker_dataset on Dataset {\n  id\n}\n"): (typeof documents)["\nfragment DatasetVersionPicker_dataset on Dataset {\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n      id\n      dataset {\n        name\n        id\n      }\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n      id\n      dataset {\n        name\n        id\n      }\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n  id\n  dataset {\n    name\n    id\n  }\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n"): (typeof documents)["\nfragment DeleteDatasetLinkTrigger_datasetLink on DatasetLink {\n  id\n  dataset {\n    name\n    id\n  }\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteDatasetTrigger_dataset on Dataset {\n      id\n      name\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteDatasetTrigger_dataset on Dataset {\n      id\n      name\n      workspace {\n        slug\n      }\n      permissions {\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteDatasetTrigger_dataset on Dataset {\n  id\n  name\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n"): (typeof documents)["\nfragment DeleteDatasetTrigger_dataset on Dataset {\n  id\n  name\n  workspace {\n    slug\n  }\n  permissions {\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DownloadVersionFile_file on DatasetVersionFile {\n      id\n      filename\n    }\n  "): (typeof documents)["\n    fragment DownloadVersionFile_file on DatasetVersionFile {\n      id\n      filename\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DownloadVersionFile_file on DatasetVersionFile {\n  id\n  filename\n}\n"): (typeof documents)["\nfragment DownloadVersionFile_file on DatasetVersionFile {\n  id\n  filename\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LinkDatasetDialog($input: LinkDatasetInput!) {\n      linkDataset(input: $input) {\n        success\n        errors\n        link {\n          workspace {\n            slug\n          }\n          id\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation LinkDatasetDialog($input: LinkDatasetInput!) {\n      linkDataset(input: $input) {\n        success\n        errors\n        link {\n          workspace {\n            slug\n          }\n          id\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LinkDatasetDialog_dataset on Dataset {\n      id\n      name\n    }\n  "): (typeof documents)["\n    fragment LinkDatasetDialog_dataset on Dataset {\n      id\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment LinkDatasetDialog_dataset on Dataset {\n  id\n  name\n}\n"): (typeof documents)["\nfragment LinkDatasetDialog_dataset on Dataset {\n  id\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PinDatasetButton($input: PinDatasetInput!) {\n      pinDataset(input: $input) {\n        link {\n          id\n          isPinned\n        }\n        success\n        errors\n      }\n    }\n  "): (typeof documents)["\n    mutation PinDatasetButton($input: PinDatasetInput!) {\n      pinDataset(input: $input) {\n        link {\n          id\n          isPinned\n        }\n        success\n        errors\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PinDatasetButton_link on DatasetLink {\n      id\n      isPinned\n      permissions {\n        pin\n      }\n    }\n  "): (typeof documents)["\n    fragment PinDatasetButton_link on DatasetLink {\n      id\n      isPinned\n      permissions {\n        pin\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PinDatasetButton_link on DatasetLink {\n  id\n  isPinned\n  permissions {\n    pin\n  }\n}\n"): (typeof documents)["\nfragment PinDatasetButton_link on DatasetLink {\n  id\n  isPinned\n  permissions {\n    pin\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n      id\n      dataset {\n        id\n        name\n        slug\n        workspace {\n          slug\n        }\n      }\n      workspace {\n        slug\n      }\n    }\n  "): (typeof documents)["\n    fragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n      id\n      dataset {\n        id\n        name\n        slug\n        workspace {\n          slug\n        }\n      }\n      workspace {\n        slug\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n  id\n  dataset {\n    id\n    name\n    slug\n    workspace {\n      slug\n    }\n  }\n  workspace {\n    slug\n  }\n}\n"): (typeof documents)["\nfragment UploadDatasetVersionDialog_datasetLink on DatasetLink {\n  id\n  dataset {\n    id\n    name\n    slug\n    workspace {\n      slug\n    }\n  }\n  workspace {\n    slug\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}"): (typeof documents)["query DatasetPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...DatasetPicker_workspace\n  }\n}\n\nquery DatasetVersionPicker($datasetId: ID!, $perPage: Int!) {\n  dataset(id: $datasetId) {\n    versions(perPage: $perPage) {\n      totalItems\n      items {\n        ...DatasetVersionPicker_version\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UpdateDataset($input: UpdateDatasetInput!) {\n        updateDataset(input: $input) {\n          dataset {\n            id\n            name\n            description\n            sharedWithOrganization\n            updatedAt\n          }\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation UpdateDataset($input: UpdateDatasetInput!) {\n        updateDataset(input: $input) {\n          dataset {\n            id\n            name\n            description\n            sharedWithOrganization\n            updatedAt\n          }\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UpdateDatasetVersion($input: UpdateDatasetVersionInput!) {\n        updateDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation UpdateDatasetVersion($input: UpdateDatasetVersionInput!) {\n        updateDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation CreateDatasetVersion($input: CreateDatasetVersionInput!) {\n        createDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation CreateDatasetVersion($input: CreateDatasetVersionInput!) {\n        createDatasetVersion(input: $input) {\n          version {\n            id\n            name\n            changelog\n          }\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation generateDatasetUploadUrl(\n        $input: GenerateDatasetUploadUrlInput!\n      ) {\n        generateDatasetUploadUrl(input: $input) {\n          success\n          errors\n          uploadUrl\n        }\n      }\n    "): (typeof documents)["\n      mutation generateDatasetUploadUrl(\n        $input: GenerateDatasetUploadUrlInput!\n      ) {\n        generateDatasetUploadUrl(input: $input) {\n          success\n          errors\n          uploadUrl\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation PrepareVersionFileDownload(\n        $input: PrepareVersionFileDownloadInput!\n      ) {\n        prepareVersionFileDownload(input: $input) {\n          success\n          downloadUrl\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation PrepareVersionFileDownload(\n        $input: PrepareVersionFileDownloadInput!\n      ) {\n        prepareVersionFileDownload(input: $input) {\n          success\n          downloadUrl\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation CreateDatasetVersionFile(\n        $input: CreateDatasetVersionFileInput!\n      ) {\n        createDatasetVersionFile(input: $input) {\n          success\n          errors\n          file {\n            id\n            uri\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation CreateDatasetVersionFile(\n        $input: CreateDatasetVersionFileInput!\n      ) {\n        createDatasetVersionFile(input: $input) {\n          success\n          errors\n          file {\n            id\n            uri\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeleteDatasetLink($input: DeleteDatasetLinkInput!) {\n        deleteDatasetLink(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteDatasetLink($input: DeleteDatasetLinkInput!) {\n        deleteDatasetLink(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeleteDataset($input: DeleteDatasetInput!) {\n        deleteDataset(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteDataset($input: DeleteDatasetInput!) {\n        deleteDataset(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation SetMetadataAttribute($input: SetMetadataAttributeInput!) {\n        setMetadataAttribute(input: $input) {\n          success\n          errors\n          attribute {\n            id\n            key\n            label\n            value\n            system\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation SetMetadataAttribute($input: SetMetadataAttributeInput!) {\n        setMetadataAttribute(input: $input) {\n          success\n          errors\n          attribute {\n            id\n            key\n            label\n            value\n            system\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeleteMetadataAttribute($input: DeleteMetadataAttributeInput!) {\n        deleteMetadataAttribute(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteMetadataAttribute($input: DeleteMetadataAttributeInput!) {\n        deleteMetadataAttribute(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query TabularFileMetadata($fileId: ID!) {\n        datasetVersionFile(id: $fileId) {\n          attributes {\n            id\n            key\n            value\n            label\n            system\n            createdAt\n            updatedAt\n            createdBy {\n              displayName\n            }\n            updatedBy {\n              displayName\n            }\n          }\n          properties\n          id\n          targetId\n        }\n      }\n    "): (typeof documents)["\n      query TabularFileMetadata($fileId: ID!) {\n        datasetVersionFile(id: $fileId) {\n          attributes {\n            id\n            key\n            value\n            label\n            system\n            createdAt\n            updatedAt\n            createdBy {\n              displayName\n            }\n            updatedBy {\n              displayName\n            }\n          }\n          properties\n          id\n          targetId\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n      slug\n    }\n    \n  "): (typeof documents)["\n    fragment DatasetLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n      slug\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetLayout_datasetLink on DatasetLink {\n      ...UploadDatasetVersionDialog_datasetLink\n      ...PinDatasetButton_link\n      dataset {\n        workspace {\n          slug\n        }\n        slug\n        permissions {\n          delete\n          createVersion\n        }\n      }\n    }\n    \n    \n  "): (typeof documents)["\n    fragment DatasetLayout_datasetLink on DatasetLink {\n      ...UploadDatasetVersionDialog_datasetLink\n      ...PinDatasetButton_link\n      dataset {\n        workspace {\n          slug\n        }\n        slug\n        permissions {\n          delete\n          createVersion\n        }\n      }\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatasetLayout_version on DatasetVersion {\n      id\n      name\n      ...DatasetVersionPicker_version\n    }\n    \n  "): (typeof documents)["\n    fragment DatasetLayout_version on DatasetVersion {\n      id\n      name\n      ...DatasetVersionPicker_version\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n  slug\n}\n"): (typeof documents)["\nfragment DatasetLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetLayout_datasetLink on DatasetLink {\n  ...UploadDatasetVersionDialog_datasetLink\n  ...PinDatasetButton_link\n  dataset {\n    workspace {\n      slug\n    }\n    slug\n    permissions {\n      delete\n      createVersion\n    }\n  }\n}\n"): (typeof documents)["\nfragment DatasetLayout_datasetLink on DatasetLink {\n  ...UploadDatasetVersionDialog_datasetLink\n  ...PinDatasetButton_link\n  dataset {\n    workspace {\n      slug\n    }\n    slug\n    permissions {\n      delete\n      createVersion\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatasetLayout_version on DatasetVersion {\n  id\n  name\n  ...DatasetVersionPicker_version\n}\n"): (typeof documents)["\nfragment DatasetLayout_version on DatasetVersion {\n  id\n  name\n  ...DatasetVersionPicker_version\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}\n"): (typeof documents)["\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserAvatar_user on User {\n      displayName\n      avatar {\n        initials\n        color\n      }\n    }\n  "): (typeof documents)["\n    fragment UserAvatar_user on User {\n      displayName\n      avatar {\n        initials\n        color\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UserAvatar_user on User {\n  displayName\n  avatar {\n    initials\n    color\n  }\n}\n"): (typeof documents)["\nfragment UserAvatar_user on User {\n  displayName\n  avatar {\n    initials\n    color\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation Logout {\n  logout {\n    success\n  }\n}\n\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation GenerateChallenge {\n  generateChallenge {\n    success\n    errors\n  }\n}\n\nmutation VerifyDevice($input: VerifyDeviceInput!) {\n  verifyDevice(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation DisableTwoFactor($input: DisableTwoFactorInput!) {\n  disableTwoFactor(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation EnableTwoFactor {\n  enableTwoFactor {\n    success\n    verified\n    errors\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}"): (typeof documents)["mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation Logout {\n  logout {\n    success\n  }\n}\n\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation GenerateChallenge {\n  generateChallenge {\n    success\n    errors\n  }\n}\n\nmutation VerifyDevice($input: VerifyDeviceInput!) {\n  verifyDevice(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation DisableTwoFactor($input: DisableTwoFactorInput!) {\n  disableTwoFactor(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation EnableTwoFactor {\n  enableTwoFactor {\n    success\n    verified\n    errors\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    success\n    errors\n    user {\n      id\n      language\n      firstName\n      lastName\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUser {\n  me {\n    hasTwoFactorEnabled\n    permissions {\n      adminPanel\n      superUser\n      createWorkspace\n    }\n    features {\n      code\n    }\n    user {\n      ...UserAvatar_user\n      email\n      id\n      firstName\n      lastName\n      displayName\n      language\n      avatar {\n        initials\n        color\n      }\n    }\n  }\n}\n\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}"): (typeof documents)["query GetUser {\n  me {\n    hasTwoFactorEnabled\n    permissions {\n      adminPanel\n      superUser\n      createWorkspace\n    }\n    features {\n      code\n    }\n    user {\n      ...UserAvatar_user\n      email\n      id\n      firstName\n      lastName\n      displayName\n      language\n      avatar {\n        initials\n        color\n      }\n    }\n  }\n}\n\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query notebooksPage {\n  notebooksUrl\n}"): (typeof documents)["query notebooksPage {\n  notebooksUrl\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspaceRole on WorkspaceMembership {\n      role\n      workspace {\n        name\n        slug\n      }\n    }\n  "): (typeof documents)["\n    fragment WorkspaceRole on WorkspaceMembership {\n      role\n      workspace {\n        name\n        slug\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspaceRole on WorkspaceMembership {\n  role\n  workspace {\n    name\n    slug\n  }\n}\n"): (typeof documents)["\nfragment WorkspaceRole on WorkspaceMembership {\n  role\n  workspace {\n    name\n    slug\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}"): (typeof documents)["query OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteOrganizationInvitation($input: DeleteOrganizationInvitationInput!) {\n  deleteOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery OrganizationInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    invitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        role\n        email\n        status\n        invitedBy {\n          displayName\n        }\n        createdAt\n        workspaceInvitations {\n          workspace {\n            name\n            slug\n          }\n          role\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation ResendOrganizationInvitation($input: ResendOrganizationInvitationInput!) {\n  resendOrganizationInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}"): (typeof documents)["query OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n\nmutation DeleteOrganizationMember($input: DeleteOrganizationMemberInput!) {\n  deleteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation InviteOrganizationMember($input: InviteOrganizationMemberInput!) {\n  inviteOrganizationMember(input: $input) {\n    success\n    errors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery OrganizationMembers($id: UUID!, $page: Int, $perPage: Int, $term: String, $role: OrganizationMembershipRole) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n      manageOwners\n    }\n    workspaces(perPage: 1000, page: 1) {\n      items {\n        slug\n        name\n      }\n    }\n    members(page: $page, perPage: $perPage, term: $term, role: $role) {\n      totalItems\n      items {\n        id\n        role\n        workspaceMemberships {\n          ...WorkspaceRole\n          id\n          role\n          workspace {\n            slug\n            name\n          }\n        }\n        user {\n          ...User_user\n        }\n        createdAt\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n"): (typeof documents)["\nmutation UpdateOrganizationMember($input: UpdateOrganizationMemberInput!) {\n  updateOrganizationMember(input: $input) {\n    success\n    errors\n    membership {\n      id\n      role\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n      id\n      role\n      workspaceMemberships {\n        id\n        role\n        workspace {\n          slug\n          name\n        }\n      }\n      user {\n        id\n        displayName\n        email\n      }\n    }\n  "): (typeof documents)["\n    fragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n      id\n      role\n      workspaceMemberships {\n        id\n        role\n        workspace {\n          slug\n          name\n        }\n      }\n      user {\n        id\n        displayName\n        email\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateOrganizationMemberDialog_workspace on Workspace {\n      slug\n      name\n    }\n  "): (typeof documents)["\n    fragment UpdateOrganizationMemberDialog_workspace on Workspace {\n      slug\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n  id\n  role\n  workspaceMemberships {\n    id\n    role\n    workspace {\n      slug\n      name\n    }\n  }\n  user {\n    id\n    displayName\n    email\n  }\n}\n"): (typeof documents)["\nfragment UpdateOrganizationMemberDialog_organizationMember on OrganizationMembership {\n  id\n  role\n  workspaceMemberships {\n    id\n    role\n    workspace {\n      slug\n      name\n    }\n  }\n  user {\n    id\n    displayName\n    email\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UpdateOrganizationMemberDialog_workspace on Workspace {\n  slug\n  name\n}\n"): (typeof documents)["\nfragment UpdateOrganizationMemberDialog_workspace on Workspace {\n  slug\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation DeleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}"): (typeof documents)["query OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nmutation DeleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation ResendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery OrganizationWorkspaceInvitations($id: UUID!, $page: Int, $perPage: Int) {\n  organization(id: $id) {\n    id\n    permissions {\n      manageMembers\n    }\n    pendingWorkspaceInvitations(page: $page, perPage: $perPage) {\n      totalItems\n      items {\n        id\n        email\n        role\n        status\n        workspace {\n          name\n          slug\n        }\n        invitedBy {\n          displayName\n        }\n        createdAt\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n\nquery Organizations {\n  organizations {\n    id\n    name\n    workspaces {\n      items {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}"): (typeof documents)["fragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n\nquery Organizations {\n  organizations {\n    id\n    name\n    workspaces {\n      items {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n\nquery OrganizationDatasets($id: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $id) {\n    ...Organization_organization\n    datasetLinks(page: $page, perPage: $perPage, query: $query) {\n      totalItems\n      pageNumber\n      totalPages\n      items {\n        ...OrganizationDataset_link\n      }\n    }\n  }\n}\n\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n"): (typeof documents)["\nfragment Organization_organization on Organization {\n  id\n  name\n  shortName\n  workspaces {\n    totalItems\n    items {\n      slug\n      name\n      countries {\n        code\n      }\n    }\n  }\n  permissions {\n    createWorkspace\n    archiveWorkspace\n    manageMembers\n    manageOwners\n  }\n  members {\n    totalItems\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nfragment OrganizationDataset_link on DatasetLink {\n  id\n  workspace {\n    slug\n    name\n  }\n  dataset {\n    id\n    slug\n    name\n    description\n    updatedAt\n    sharedWithOrganization\n    workspace {\n      slug\n      name\n    }\n    links(page: 1, perPage: 50) {\n      items {\n        workspace {\n          slug\n          name\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n"): (typeof documents)["\nfragment OrganizationWorkspace_workspace on Workspace {\n  slug\n  name\n  createdAt\n  updatedAt\n  countries {\n    code\n  }\n  createdBy {\n    ...UserAvatar_user\n  }\n  members {\n    totalItems\n  }\n  permissions {\n    manageMembers\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n"): (typeof documents)["\nmutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    success\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n"): (typeof documents)["\nmutation SetPassword($input: SetPasswordInput!) {\n  setPassword(input: $input) {\n    success\n    error\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation Login($input: LoginInput!) {\n  login(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery notebooksPage {\n  notebooksUrl\n}\n"): (typeof documents)["\nquery notebooksPage {\n  notebooksUrl\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}\n"): (typeof documents)["\nquery OrganizationWorkspaces($organizationId: UUID!, $page: Int = 1, $perPage: Int = 10, $query: String) {\n  organization(id: $organizationId) {\n    ...Organization_organization\n  }\n  workspaces(\n    organizationId: $organizationId\n    page: $page\n    perPage: $perPage\n    query: $query\n  ) {\n    totalItems\n    pageNumber\n    totalPages\n    items {\n      ...OrganizationWorkspace_workspace\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n"): (typeof documents)["\nquery Organization($id: UUID!) {\n  organization(id: $id) {\n    ...Organization_organization\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n"): (typeof documents)["\nmutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n"): (typeof documents)["\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n"): (typeof documents)["\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}\n"): (typeof documents)["\nquery RegisterPage {\n  config {\n    passwordRequirements\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation Register($input: RegisterInput!) {\n  register(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n"): (typeof documents)["\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n"): (typeof documents)["\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n"): (typeof documents)["\nquery AccountPage {\n  me {\n    hasTwoFactorEnabled\n    user {\n      firstName\n      lastName\n      dateJoined\n      displayName\n      id\n      email\n      language\n      ...User_user\n    }\n  }\n  pendingWorkspaceInvitations {\n    totalItems\n    items {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n"): (typeof documents)["\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n"): (typeof documents)["\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n"): (typeof documents)["\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n"): (typeof documents)["\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n"): (typeof documents)["\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n"): (typeof documents)["\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n"): (typeof documents)["\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n      id\n      name\n    }\n  "): (typeof documents)["\n    fragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n      id\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n  id\n  name\n}\n"): (typeof documents)["\nfragment PipelineTemplateDialog_pipelineTemplate on PipelineTemplate {\n  id\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DownloadPipelineVersion_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n        code\n      }\n    }\n  "): (typeof documents)["\n    fragment DownloadPipelineVersion_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n        code\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DownloadPipelineVersion_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n    code\n  }\n}\n"): (typeof documents)["\nfragment DownloadPipelineVersion_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n    code\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n      id\n    }\n  "): (typeof documents)["\n    fragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n  id\n}\n"): (typeof documents)["\nfragment DownloadTemplateVersion_version on PipelineTemplateVersion {\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineMetadataDisplay_pipeline on Pipeline {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineMetadataDisplay_pipeline on Pipeline {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineMetadataDisplay_template on PipelineTemplate {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineMetadataDisplay_template on PipelineTemplate {\n      functionalType\n      tags {\n        ...Tag_tag\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineMetadataDisplay_pipeline on Pipeline {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n"): (typeof documents)["\nfragment PipelineMetadataDisplay_pipeline on Pipeline {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineMetadataDisplay_template on PipelineTemplate {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n"): (typeof documents)["\nfragment PipelineMetadataDisplay_template on PipelineTemplate {\n  functionalType\n  tags {\n    ...Tag_tag\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunDataCard_dag on DAG {\n      id\n      externalId\n      label\n      ...PipelineRunReadonlyForm_dag\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineRunDataCard_dag on DAG {\n      id\n      externalId\n      label\n      ...PipelineRunReadonlyForm_dag\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunDataCard_dagRun on DAGRun {\n      id\n      label\n      externalId\n      externalUrl\n      executionDate\n      triggerMode\n      status\n      config\n      duration\n      outputs {\n        ...PipelineRunOutputEntry_output\n      }\n      user {\n        displayName\n        ...UserProperty_user\n      }\n      progress\n      messages {\n        __typename\n      }\n      ...RunMessages_dagRun\n      ...RunLogs_dagRun\n      ...PipelineRunReadonlyForm_dagRun\n      ...PipelineRunFavoriteTrigger_run\n    }\n    \n    \n    \n    \n    \n    \n  "): (typeof documents)["\n    fragment PipelineRunDataCard_dagRun on DAGRun {\n      id\n      label\n      externalId\n      externalUrl\n      executionDate\n      triggerMode\n      status\n      config\n      duration\n      outputs {\n        ...PipelineRunOutputEntry_output\n      }\n      user {\n        displayName\n        ...UserProperty_user\n      }\n      progress\n      messages {\n        __typename\n      }\n      ...RunMessages_dagRun\n      ...RunLogs_dagRun\n      ...PipelineRunReadonlyForm_dagRun\n      ...PipelineRunFavoriteTrigger_run\n    }\n    \n    \n    \n    \n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunDataCard_dag on DAG {\n  id\n  externalId\n  label\n  ...PipelineRunReadonlyForm_dag\n}\n"): (typeof documents)["\nfragment PipelineRunDataCard_dag on DAG {\n  id\n  externalId\n  label\n  ...PipelineRunReadonlyForm_dag\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunDataCard_dagRun on DAGRun {\n  id\n  label\n  externalId\n  externalUrl\n  executionDate\n  triggerMode\n  status\n  config\n  duration\n  outputs {\n    ...PipelineRunOutputEntry_output\n  }\n  user {\n    displayName\n    ...UserProperty_user\n  }\n  progress\n  messages {\n    __typename\n  }\n  ...RunMessages_dagRun\n  ...RunLogs_dagRun\n  ...PipelineRunReadonlyForm_dagRun\n  ...PipelineRunFavoriteTrigger_run\n}\n"): (typeof documents)["\nfragment PipelineRunDataCard_dagRun on DAGRun {\n  id\n  label\n  externalId\n  externalUrl\n  executionDate\n  triggerMode\n  status\n  config\n  duration\n  outputs {\n    ...PipelineRunOutputEntry_output\n  }\n  user {\n    displayName\n    ...UserProperty_user\n  }\n  progress\n  messages {\n    __typename\n  }\n  ...RunMessages_dagRun\n  ...RunLogs_dagRun\n  ...PipelineRunReadonlyForm_dagRun\n  ...PipelineRunFavoriteTrigger_run\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunFavoriteIcon_run on DAGRun {\n      isFavorite\n    }\n  "): (typeof documents)["\n    fragment PipelineRunFavoriteIcon_run on DAGRun {\n      isFavorite\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunFavoriteIcon_run on DAGRun {\n  isFavorite\n}\n"): (typeof documents)["\nfragment PipelineRunFavoriteIcon_run on DAGRun {\n  isFavorite\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation setFavoriteRun($input: SetDAGRunFavoriteInput!) {\n      setDAGRunFavorite(input: $input) {\n        success\n        errors\n        dagRun {\n          id\n          label\n          isFavorite\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation setFavoriteRun($input: SetDAGRunFavoriteInput!) {\n      setDAGRunFavorite(input: $input) {\n        success\n        errors\n        dagRun {\n          id\n          label\n          isFavorite\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunFavoriteTrigger_run on DAGRun {\n      id\n      label\n      isFavorite\n      ...PipelineRunFavoriteIcon_run\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineRunFavoriteTrigger_run on DAGRun {\n      id\n      label\n      isFavorite\n      ...PipelineRunFavoriteIcon_run\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunFavoriteTrigger_run on DAGRun {\n  id\n  label\n  isFavorite\n  ...PipelineRunFavoriteIcon_run\n}\n"): (typeof documents)["\nfragment PipelineRunFavoriteTrigger_run on DAGRun {\n  id\n  label\n  isFavorite\n  ...PipelineRunFavoriteIcon_run\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunForm_dag on DAG {\n      template {\n        sampleConfig\n      }\n      formCode\n      id\n    }\n  "): (typeof documents)["\n    fragment PipelineRunForm_dag on DAG {\n      template {\n        sampleConfig\n      }\n      formCode\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunForm_dag on DAG {\n  template {\n    sampleConfig\n  }\n  formCode\n  id\n}\n"): (typeof documents)["\nfragment PipelineRunForm_dag on DAG {\n  template {\n    sampleConfig\n  }\n  formCode\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunReadonlyForm_dag on DAG {\n      formCode\n      id\n    }\n  "): (typeof documents)["\n    fragment PipelineRunReadonlyForm_dag on DAG {\n      formCode\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunReadonlyForm_dagRun on DAGRun {\n      config\n    }\n  "): (typeof documents)["\n    fragment PipelineRunReadonlyForm_dagRun on DAGRun {\n      config\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunReadonlyForm_dag on DAG {\n  formCode\n  id\n}\n"): (typeof documents)["\nfragment PipelineRunReadonlyForm_dag on DAG {\n  formCode\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunReadonlyForm_dagRun on DAGRun {\n  config\n}\n"): (typeof documents)["\nfragment PipelineRunReadonlyForm_dagRun on DAGRun {\n  config\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunOutputEntry_output on DAGRunOutput {\n      title\n      uri\n    }\n  "): (typeof documents)["\n    fragment PipelineRunOutputEntry_output on DAGRunOutput {\n      title\n      uri\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunOutputEntry_output on DAGRunOutput {\n  title\n  uri\n}\n"): (typeof documents)["\nfragment PipelineRunOutputEntry_output on DAGRunOutput {\n  title\n  uri\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRunStatusBadge_run on PipelineRun {\n      id\n      status\n      ...usePipelineRunPoller_run\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineRunStatusBadge_run on PipelineRun {\n      id\n      status\n      ...usePipelineRunPoller_run\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRunStatusBadge_run on PipelineRun {\n  id\n  status\n  ...usePipelineRunPoller_run\n}\n"): (typeof documents)["\nfragment PipelineRunStatusBadge_run on PipelineRun {\n  id\n  status\n  ...usePipelineRunPoller_run\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetPipelineTemplates($page: Int!, $perPage: Int!, $search: String, $currentWorkspaceSlug: String!, $workspaceSlug: String, $tags: [String!], $functionalType: PipelineFunctionalType) {\n  workspace(slug: $currentWorkspaceSlug) {\n    slug\n    pipelineTemplateTags\n  }\n  pipelineTemplates(\n    page: $page\n    perPage: $perPage\n    search: $search\n    workspaceSlug: $workspaceSlug\n    tags: $tags\n    functionalType: $functionalType\n  ) {\n    pageNumber\n    totalPages\n    totalItems\n    items {\n      id\n      description\n      code\n      name\n      functionalType\n      tags {\n        id\n        name\n      }\n      permissions {\n        delete\n      }\n      workspace {\n        slug\n        name\n      }\n      currentVersion {\n        id\n        versionNumber\n        createdAt\n        user {\n          ...User_user\n        }\n        template {\n          sourcePipeline {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetPipelineTemplates($page: Int!, $perPage: Int!, $search: String, $currentWorkspaceSlug: String!, $workspaceSlug: String, $tags: [String!], $functionalType: PipelineFunctionalType) {\n  workspace(slug: $currentWorkspaceSlug) {\n    slug\n    pipelineTemplateTags\n  }\n  pipelineTemplates(\n    page: $page\n    perPage: $perPage\n    search: $search\n    workspaceSlug: $workspaceSlug\n    tags: $tags\n    functionalType: $functionalType\n  ) {\n    pageNumber\n    totalPages\n    totalItems\n    items {\n      id\n      description\n      code\n      name\n      functionalType\n      tags {\n        id\n        name\n      }\n      permissions {\n        delete\n      }\n      workspace {\n        slug\n        name\n      }\n      currentVersion {\n        id\n        versionNumber\n        createdAt\n        user {\n          ...User_user\n        }\n        template {\n          sourcePipeline {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPipelineTemplates(\n    $page: Int!\n    $perPage: Int!\n    $search: String\n    $currentWorkspaceSlug: String!\n    $workspaceSlug: String\n    $tags: [String!]\n    $functionalType: PipelineFunctionalType\n  ) {\n    workspace(slug: $currentWorkspaceSlug) {\n      slug\n      pipelineTemplateTags\n    }\n    pipelineTemplates(\n      page: $page\n      perPage: $perPage\n      search: $search\n      workspaceSlug: $workspaceSlug\n      tags: $tags\n      functionalType: $functionalType\n    ) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        id\n        description\n        code\n        name\n        functionalType\n        tags {\n          id\n          name\n        }\n        permissions {\n          delete\n        }\n        workspace {\n          slug\n          name\n        }\n        currentVersion {\n          id\n          versionNumber\n          createdAt\n          user {\n            ...User_user\n          }\n          template {\n            sourcePipeline {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPipelineTemplates(\n    $page: Int!\n    $perPage: Int!\n    $search: String\n    $currentWorkspaceSlug: String!\n    $workspaceSlug: String\n    $tags: [String!]\n    $functionalType: PipelineFunctionalType\n  ) {\n    workspace(slug: $currentWorkspaceSlug) {\n      slug\n      pipelineTemplateTags\n    }\n    pipelineTemplates(\n      page: $page\n      perPage: $perPage\n      search: $search\n      workspaceSlug: $workspaceSlug\n      tags: $tags\n      functionalType: $functionalType\n    ) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        id\n        description\n        code\n        name\n        functionalType\n        tags {\n          id\n          name\n        }\n        permissions {\n          delete\n        }\n        workspace {\n          slug\n          name\n        }\n        currentVersion {\n          id\n          versionNumber\n          createdAt\n          user {\n            ...User_user\n          }\n          template {\n            sourcePipeline {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineTemplates_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment PipelineTemplates_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineTemplates_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment PipelineTemplates_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n"): (typeof documents)["\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineVersionCard_version on PipelineVersion {\n      id\n      versionName\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n      pipeline {\n        id\n        code\n      }\n      templateVersion {\n        id\n        versionNumber\n        template {\n          id\n          name\n        }\n      }\n      ...DownloadPipelineVersion_version\n      ...DeletePipelineVersionTrigger_version\n    }\n    \n    \n  "): (typeof documents)["\n    fragment PipelineVersionCard_version on PipelineVersion {\n      id\n      versionName\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n      pipeline {\n        id\n        code\n      }\n      templateVersion {\n        id\n        versionNumber\n        template {\n          id\n          name\n        }\n      }\n      ...DownloadPipelineVersion_version\n      ...DeletePipelineVersionTrigger_version\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineVersionCard_version on PipelineVersion {\n  id\n  versionName\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n  pipeline {\n    id\n    code\n  }\n  templateVersion {\n    id\n    versionNumber\n    template {\n      id\n      name\n    }\n  }\n  ...DownloadPipelineVersion_version\n  ...DeletePipelineVersionTrigger_version\n}\n"): (typeof documents)["\nfragment PipelineVersionCard_version on PipelineVersion {\n  id\n  versionName\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n  pipeline {\n    id\n    code\n  }\n  templateVersion {\n    id\n    versionNumber\n    template {\n      id\n      name\n    }\n  }\n  ...DownloadPipelineVersion_version\n  ...DeletePipelineVersionTrigger_version\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineVersionParametersTable_version on PipelineVersion {\n      id\n      parameters {\n        ...ParameterField_parameter\n      }\n      config\n    }\n  "): (typeof documents)["\n    fragment PipelineVersionParametersTable_version on PipelineVersion {\n      id\n      parameters {\n        ...ParameterField_parameter\n      }\n      config\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineVersionParametersTable_version on PipelineVersion {\n  id\n  parameters {\n    ...ParameterField_parameter\n  }\n  config\n}\n"): (typeof documents)["\nfragment PipelineVersionParametersTable_version on PipelineVersion {\n  id\n  parameters {\n    ...ParameterField_parameter\n  }\n  config\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n"): (typeof documents)["\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Pipelines_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment Pipelines_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment Pipelines_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment Pipelines_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n"): (typeof documents)["\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelinesPicker_value on DAG {\n      id\n      externalId\n    }\n  "): (typeof documents)["\n    fragment PipelinesPicker_value on DAG {\n      id\n      externalId\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelinesPicker_value on DAG {\n  id\n  externalId\n}\n"): (typeof documents)["\nfragment PipelinesPicker_value on DAG {\n  id\n  externalId\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelinePublish_pipeline on Pipeline {\n      id\n      name\n      description\n      currentVersion {\n        id\n        versionName\n      }\n      template {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment PipelinePublish_pipeline on Pipeline {\n      id\n      name\n      description\n      currentVersion {\n        id\n        versionName\n      }\n      template {\n        id\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelinePublish_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment PipelinePublish_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelinePublish_pipeline on Pipeline {\n  id\n  name\n  description\n  currentVersion {\n    id\n    versionName\n  }\n  template {\n    id\n    name\n  }\n}\n"): (typeof documents)["\nfragment PipelinePublish_pipeline on Pipeline {\n  id\n  name\n  description\n  currentVersion {\n    id\n    versionName\n  }\n  template {\n    id\n    name\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelinePublish_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment PipelinePublish_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunLogs_dagRun on DAGRun {\n      id\n      logs\n      status\n    }\n  "): (typeof documents)["\n    fragment RunLogs_dagRun on DAGRun {\n      id\n      logs\n      status\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunLogs_run on PipelineRun {\n      id\n      logs\n      status\n    }\n  "): (typeof documents)["\n    fragment RunLogs_run on PipelineRun {\n      id\n      logs\n      status\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunLogs_dagRun on DAGRun {\n  id\n  logs\n  status\n}\n"): (typeof documents)["\nfragment RunLogs_dagRun on DAGRun {\n  id\n  logs\n  status\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunLogs_run on PipelineRun {\n  id\n  logs\n  status\n}\n"): (typeof documents)["\nfragment RunLogs_run on PipelineRun {\n  id\n  logs\n  status\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunMessages_dagRun on DAGRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  "): (typeof documents)["\n    fragment RunMessages_dagRun on DAGRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunMessages_run on PipelineRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  "): (typeof documents)["\n    fragment RunMessages_run on PipelineRun {\n      id\n      status\n      messages {\n        message\n        timestamp\n        priority\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunMessages_dagRun on DAGRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n"): (typeof documents)["\nfragment RunMessages_dagRun on DAGRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunMessages_run on PipelineRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n"): (typeof documents)["\nfragment RunMessages_run on PipelineRun {\n  id\n  status\n  messages {\n    message\n    timestamp\n    priority\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}\n"): (typeof documents)["\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TemplateVersionCard_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      changelog\n      createdAt\n      isLatestVersion\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      template {\n        id\n        code\n      }\n      ...DeleteTemplateVersionTrigger_version\n    }\n    \n  "): (typeof documents)["\n    fragment TemplateVersionCard_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      changelog\n      createdAt\n      isLatestVersion\n      user {\n        displayName\n      }\n      permissions {\n        update\n      }\n      template {\n        id\n        code\n      }\n      ...DeleteTemplateVersionTrigger_version\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TemplateVersionCard_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  changelog\n  createdAt\n  isLatestVersion\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  template {\n    id\n    code\n  }\n  ...DeleteTemplateVersionTrigger_version\n}\n"): (typeof documents)["\nfragment TemplateVersionCard_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  changelog\n  createdAt\n  isLatestVersion\n  user {\n    displayName\n  }\n  permissions {\n    update\n  }\n  template {\n    id\n    code\n  }\n  ...DeleteTemplateVersionTrigger_version\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n      id\n      code\n      newTemplateVersions {\n        id\n        versionNumber\n        changelog\n        createdAt\n      }\n    }\n  "): (typeof documents)["\n    fragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n      id\n      code\n      newTemplateVersions {\n        id\n        versionNumber\n        changelog\n        createdAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n  id\n  code\n  newTemplateVersions {\n    id\n    versionNumber\n    changelog\n    createdAt\n  }\n}\n"): (typeof documents)["\nfragment UpgradePipelineFromTemplateDialog_pipeline on Pipeline {\n  id\n  code\n  newTemplateVersions {\n    id\n    versionNumber\n    changelog\n    createdAt\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}"): (typeof documents)["mutation UpdatePipeline($input: UpdatePipelineInput!) {\n  updatePipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      code\n      name\n      description\n      schedule\n      webhookEnabled\n      autoUpdateFromTemplate\n    }\n  }\n}\n\nmutation CreatePipelineTemplateVersion($input: CreatePipelineTemplateVersionInput!) {\n  createPipelineTemplateVersion(input: $input) {\n    success\n    errors\n    pipelineTemplate {\n      name\n      code\n    }\n  }\n}\n\nmutation CreatePipelineFromTemplateVersion($input: CreatePipelineFromTemplateVersionInput!) {\n  createPipelineFromTemplateVersion(input: $input) {\n    success\n    errors\n    pipeline {\n      id\n      name\n      code\n    }\n  }\n}\n\nmutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {\n  upgradePipelineVersionFromTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation UpdatePipelineVersion($input: UpdatePipelineVersionInput!) {\n  updatePipelineVersion(input: $input) {\n    success\n    errors\n    pipelineVersion {\n      ...PipelineVersionCard_version\n    }\n  }\n}\n\nmutation UpdateTemplateVersion($input: UpdateTemplateVersionInput!) {\n  updateTemplateVersion(input: $input) {\n    success\n    errors\n    templateVersion {\n      ...TemplateVersionCard_version\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}"): (typeof documents)["query PipelinesPage($page: Int, $perPage: Int = 15) {\n  dags(page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      label\n      countries {\n        ...CountryBadge_country\n      }\n      tags {\n        ...Tag_tag\n      }\n      id\n      externalId\n      runs(orderBy: EXECUTION_DATE_DESC, perPage: 1) {\n        items {\n          id\n          status\n          executionDate\n        }\n      }\n    }\n  }\n}\n\nquery PipelinePage($id: UUID!, $page: Int, $perPage: Int) {\n  dag(id: $id) {\n    id\n    label\n    countries {\n      ...CountryBadge_country\n    }\n    tags {\n      ...Tag_tag\n    }\n    externalId\n    schedule\n    externalUrl\n    template {\n      code\n      description\n      sampleConfig\n    }\n    description\n    schedule\n    user {\n      ...UserProperty_user\n    }\n    runs(page: $page, perPage: $perPage) {\n      totalItems\n      totalPages\n      items {\n        id\n        label\n        triggerMode\n        externalId\n        externalUrl\n        user {\n          ...UserColumn_user\n        }\n        status\n        executionDate\n        lastRefreshedAt\n        duration\n        ...PipelineRunFavoriteTrigger_run\n      }\n    }\n  }\n}\n\nquery PipelineRunPage($pipelineId: UUID!, $runId: UUID!) {\n  dagRun(id: $runId) {\n    id\n    label\n    triggerMode\n    user {\n      displayName\n    }\n    ...PipelineRunDataCard_dagRun\n  }\n  dag(id: $pipelineId) {\n    id\n    externalId\n    label\n    ...PipelineRunDataCard_dag\n  }\n}\n\nquery PipelineConfigureRunPage($pipelineId: UUID!) {\n  dag(id: $pipelineId) {\n    id\n    label\n    externalId\n    template {\n      sampleConfig\n      description\n    }\n    description\n    ...PipelineRunForm_dag\n  }\n}\n\nquery PipelinesPicker {\n  dags {\n    items {\n      ...PipelinesPicker_value\n    }\n  }\n}\n\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation RunPipeline($input: RunDAGInput!) {\n        runDAG(input: $input) {\n          success\n          errors\n          dag {\n            id\n          }\n          dagRun {\n            id\n            externalUrl\n            externalId\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation RunPipeline($input: RunDAGInput!) {\n        runDAG(input: $input) {\n          success\n          errors\n          dag {\n            id\n          }\n          dagRun {\n            id\n            externalUrl\n            externalId\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query GetPipelineVersion($versionId: UUID!) {\n        pipelineVersion(id: $versionId) {\n          id\n          versionName\n          pipeline {\n            code\n          }\n          zipfile\n        }\n      }\n    "): (typeof documents)["\n      query GetPipelineVersion($versionId: UUID!) {\n        pipelineVersion(id: $versionId) {\n          id\n          versionName\n          pipeline {\n            code\n          }\n          zipfile\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query GetPipelineRun($runId: UUID!) {\n          dagRun(id: $runId) {\n            config\n            externalUrl\n            externalId\n            status\n            executionDate\n            duration\n          }\n        }\n      "): (typeof documents)["\n        query GetPipelineRun($runId: UUID!) {\n          dagRun(id: $runId) {\n            config\n            externalUrl\n            externalId\n            status\n            executionDate\n            duration\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation GetRunOutputDownloadURL($input: PrepareDownloadURLInput!) {\n        prepareDownloadURL(input: $input) {\n          success\n          url\n        }\n      }\n    "): (typeof documents)["\n      mutation GetRunOutputDownloadURL($input: PrepareDownloadURLInput!) {\n        prepareDownloadURL(input: $input) {\n          success\n          url\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}\n"): (typeof documents)["\nquery PipelineRunPoller($runId: UUID!) {\n  run: pipelineRun(id: $runId) {\n    ...usePipelineRunPoller_run\n    duration\n    progress\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment usePipelineRunPoller_run on PipelineRun {\n      id\n      status\n    }\n  "): (typeof documents)["\n    fragment usePipelineRunPoller_run on PipelineRun {\n      id\n      status\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment usePipelineRunPoller_run on PipelineRun {\n  id\n  status\n}\n"): (typeof documents)["\nfragment usePipelineRunPoller_run on PipelineRun {\n  id\n  status\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FavoriteWebappButton_webapp on Webapp {\n      id\n      isFavorite\n    }\n  "): (typeof documents)["\n    fragment FavoriteWebappButton_webapp on Webapp {\n      id\n      isFavorite\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment FavoriteWebappButton_webapp on Webapp {\n  id\n  isFavorite\n}\n"): (typeof documents)["\nfragment FavoriteWebappButton_webapp on Webapp {\n  id\n  isFavorite\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WebappCard_webapp on Webapp {\n      id\n      icon\n      name\n      workspace {\n        slug\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment WebappCard_webapp on Webapp {\n      id\n      icon\n      name\n      workspace {\n        slug\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WebappCard_webapp on Webapp {\n  id\n  icon\n  name\n  workspace {\n    slug\n    name\n  }\n}\n"): (typeof documents)["\nfragment WebappCard_webapp on Webapp {\n  id\n  icon\n  name\n  workspace {\n    slug\n    name\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WebappForm_webapp on Webapp {\n      id\n      name\n      description\n      url\n      icon\n      permissions {\n        update\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment WebappForm_webapp on Webapp {\n      id\n      name\n      description\n      url\n      icon\n      permissions {\n        update\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WebappForm_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n    }\n    \n  "): (typeof documents)["\n    fragment WebappForm_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WebappForm_webapp on Webapp {\n  id\n  name\n  description\n  url\n  icon\n  permissions {\n    update\n    delete\n  }\n}\n"): (typeof documents)["\nfragment WebappForm_webapp on Webapp {\n  id\n  name\n  description\n  url\n  icon\n  permissions {\n    update\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WebappForm_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n}\n"): (typeof documents)["\nfragment WebappForm_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}"): (typeof documents)["mutation UpdateWebapp($input: UpdateWebappInput!) {\n  updateWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation CreateWebapp($input: CreateWebappInput!) {\n  createWebapp(input: $input) {\n    success\n    errors\n    webapp {\n      id\n    }\n  }\n}\n\nmutation AddToFavorites($input: AddToFavoritesInput!) {\n  addToFavorites(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n  removeFromFavorites(input: $input) {\n    success\n    errors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArchiveWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  "): (typeof documents)["\n    fragment ArchiveWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ArchiveWorkspace_workspace on Workspace {\n  slug\n  name\n}\n"): (typeof documents)["\nfragment ArchiveWorkspace_workspace on Workspace {\n  slug\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BucketExplorer_workspace on Workspace {\n      slug\n      ...DownloadBucketObject_workspace\n      ...DeleteBucketObject_workspace\n    }\n\n    \n    \n  "): (typeof documents)["\n    fragment BucketExplorer_workspace on Workspace {\n      slug\n      ...DownloadBucketObject_workspace\n      ...DeleteBucketObject_workspace\n    }\n\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BucketExplorer_objects on BucketObjectPage {\n      hasNextPage\n      hasPreviousPage\n      pageNumber\n      items {\n        key\n        name\n        path\n        size\n        updatedAt\n        type\n        ...DownloadBucketObject_object\n        ...DeleteBucketObject_object\n      }\n    }\n    \n    \n  "): (typeof documents)["\n    fragment BucketExplorer_objects on BucketObjectPage {\n      hasNextPage\n      hasPreviousPage\n      pageNumber\n      items {\n        key\n        name\n        path\n        size\n        updatedAt\n        type\n        ...DownloadBucketObject_object\n        ...DeleteBucketObject_object\n      }\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment BucketExplorer_workspace on Workspace {\n  slug\n  ...DownloadBucketObject_workspace\n  ...DeleteBucketObject_workspace\n}\n"): (typeof documents)["\nfragment BucketExplorer_workspace on Workspace {\n  slug\n  ...DownloadBucketObject_workspace\n  ...DeleteBucketObject_workspace\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment BucketExplorer_objects on BucketObjectPage {\n  hasNextPage\n  hasPreviousPage\n  pageNumber\n  items {\n    key\n    name\n    path\n    size\n    updatedAt\n    type\n    ...DownloadBucketObject_object\n    ...DeleteBucketObject_object\n  }\n}\n"): (typeof documents)["\nfragment BucketExplorer_objects on BucketObjectPage {\n  hasNextPage\n  hasPreviousPage\n  pageNumber\n  items {\n    key\n    name\n    path\n    size\n    updatedAt\n    type\n    ...DownloadBucketObject_object\n    ...DeleteBucketObject_object\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ObjectPicker(\n      $slug: String!\n      $page: Int\n      $perPage: Int\n      $prefix: String\n    ) {\n      workspace(slug: $slug) {\n        slug\n        bucket {\n          objects(page: $page, perPage: $perPage, prefix: $prefix) {\n            items {\n              name\n              key\n              path\n              type\n              updatedAt\n            }\n            pageNumber\n            hasNextPage\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ObjectPicker(\n      $slug: String!\n      $page: Int\n      $perPage: Int\n      $prefix: String\n    ) {\n      workspace(slug: $slug) {\n        slug\n        bucket {\n          objects(page: $page, perPage: $perPage, prefix: $prefix) {\n            items {\n              name\n              key\n              path\n              type\n              updatedAt\n            }\n            pageNumber\n            hasNextPage\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BucketObjectPicker_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment BucketObjectPicker_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment BucketObjectPicker_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment BucketObjectPicker_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ConnectionFieldsSection_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n        value\n        secret\n      }\n      permissions {\n        update\n      }\n      ...UpdateConnectionFieldsDialog_connection\n    }\n    \n  "): (typeof documents)["\n    fragment ConnectionFieldsSection_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n        value\n        secret\n      }\n      permissions {\n        update\n      }\n      ...UpdateConnectionFieldsDialog_connection\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ConnectionFieldsSection_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n    value\n    secret\n  }\n  permissions {\n    update\n  }\n  ...UpdateConnectionFieldsDialog_connection\n}\n"): (typeof documents)["\nfragment ConnectionFieldsSection_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n    value\n    secret\n  }\n  permissions {\n    update\n  }\n  ...UpdateConnectionFieldsDialog_connection\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ConnectionUsageSnippets_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n      }\n    }\n  "): (typeof documents)["\n    fragment ConnectionUsageSnippets_connection on Connection {\n      id\n      type\n      slug\n      fields {\n        code\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ConnectionUsageSnippets_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n  }\n}\n"): (typeof documents)["\nfragment ConnectionUsageSnippets_connection on Connection {\n  id\n  type\n  slug\n  fields {\n    code\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CreateBucketFolderDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n      bucket {\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment CreateBucketFolderDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n      bucket {\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CreateBucketFolderDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n  bucket {\n    name\n  }\n}\n"): (typeof documents)["\nfragment CreateBucketFolderDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n  bucket {\n    name\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n"): (typeof documents)["\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CreateConnectionDialog_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment CreateConnectionDialog_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CreateConnectionDialog_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment CreateConnectionDialog_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment CreatePipelineDialog_workspace on Workspace {\n  slug\n  ...BucketObjectPicker_workspace\n}\n"): (typeof documents)["\nfragment CreatePipelineDialog_workspace on Workspace {\n  slug\n  ...BucketObjectPicker_workspace\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n"): (typeof documents)["\nmutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery DatabaseTableDataGrid($workspaceSlug: String!, $tableName: String!, $orderBy: String!, $direction: OrderByDirection!, $page: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    database {\n      table(name: $tableName) {\n        rows(orderBy: $orderBy, direction: $direction, page: $page, perPage: 10) {\n          pageNumber\n          hasNextPage\n          hasPreviousPage\n          items\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery DatabaseTableDataGrid($workspaceSlug: String!, $tableName: String!, $orderBy: String!, $direction: OrderByDirection!, $page: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    database {\n      table(name: $tableName) {\n        rows(orderBy: $orderBy, direction: $direction, page: $page, perPage: 10) {\n          pageNumber\n          hasNextPage\n          hasPreviousPage\n          items\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query DatabaseTableDataGrid(\n        $workspaceSlug: String!\n        $tableName: String!\n        $orderBy: String!\n        $direction: OrderByDirection!\n        $page: Int!\n      ) {\n        workspace(slug: $workspaceSlug) {\n          slug\n          database {\n            table(name: $tableName) {\n              rows(\n                orderBy: $orderBy\n                direction: $direction\n                page: $page\n                perPage: 10\n              ) {\n                pageNumber\n                hasNextPage\n                hasPreviousPage\n                items\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query DatabaseTableDataGrid(\n        $workspaceSlug: String!\n        $tableName: String!\n        $orderBy: String!\n        $direction: OrderByDirection!\n        $page: Int!\n      ) {\n        workspace(slug: $workspaceSlug) {\n          slug\n          database {\n            table(name: $tableName) {\n              rows(\n                orderBy: $orderBy\n                direction: $direction\n                page: $page\n                perPage: 10\n              ) {\n                pageNumber\n                hasNextPage\n                hasPreviousPage\n                items\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseTableDataGrid_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment DatabaseTableDataGrid_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseTableDataGrid_table on DatabaseTable {\n      name\n      columns {\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment DatabaseTableDataGrid_table on DatabaseTable {\n      name\n      columns {\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatabaseTableDataGrid_workspace on Workspace {\n    slug\n  }\n"): (typeof documents)["\n  fragment DatabaseTableDataGrid_workspace on Workspace {\n    slug\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatabaseTableDataGrid_table on DatabaseTable {\n    name\n    columns {\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment DatabaseTableDataGrid_table on DatabaseTable {\n    name\n    columns {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseVariablesSection_workspace on Workspace {\n      slug\n      database {\n        credentials {\n          dbName\n          username\n          password\n          host\n          port\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment DatabaseVariablesSection_workspace on Workspace {\n      slug\n      database {\n        credentials {\n          dbName\n          username\n          password\n          host\n          port\n          url\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatabaseVariablesSection_workspace on Workspace {\n  slug\n  database {\n    credentials {\n      dbName\n      username\n      password\n      host\n      port\n      url\n    }\n  }\n}\n"): (typeof documents)["\nfragment DatabaseVariablesSection_workspace on Workspace {\n  slug\n  database {\n    credentials {\n      dbName\n      username\n      password\n      host\n      port\n      url\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteBucketObject_workspace on Workspace {\n      slug\n      permissions {\n        deleteObject\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteBucketObject_workspace on Workspace {\n      slug\n      permissions {\n        deleteObject\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteBucketObject_object on BucketObject {\n      key\n      name\n      type\n    }\n  "): (typeof documents)["\n    fragment DeleteBucketObject_object on BucketObject {\n      key\n      name\n      type\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteBucketObject_workspace on Workspace {\n  slug\n  permissions {\n    deleteObject\n  }\n}\n"): (typeof documents)["\nfragment DeleteBucketObject_workspace on Workspace {\n  slug\n  permissions {\n    deleteObject\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteBucketObject_object on BucketObject {\n  key\n  name\n  type\n}\n"): (typeof documents)["\nfragment DeleteBucketObject_object on BucketObject {\n  key\n  name\n  type\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteConnectionTrigger_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment DeleteConnectionTrigger_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteConnectionTrigger_connection on Connection {\n      id\n      name\n      permissions {\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteConnectionTrigger_connection on Connection {\n      id\n      name\n      permissions {\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteConnectionTrigger_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment DeleteConnectionTrigger_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteConnectionTrigger_connection on Connection {\n  id\n  name\n  permissions {\n    delete\n  }\n}\n"): (typeof documents)["\nfragment DeleteConnectionTrigger_connection on Connection {\n  id\n  name\n  permissions {\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseTableDeleteTrigger_workspace on Workspace {\n      slug\n      permissions {\n        deleteDatabaseTable\n      }\n    }\n  "): (typeof documents)["\n    fragment DatabaseTableDeleteTrigger_workspace on Workspace {\n      slug\n      permissions {\n        deleteDatabaseTable\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n      name\n    }\n  "): (typeof documents)["\n    fragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatabaseTableDeleteTrigger_workspace on Workspace {\n  slug\n  permissions {\n    deleteDatabaseTable\n  }\n}\n"): (typeof documents)["\nfragment DatabaseTableDeleteTrigger_workspace on Workspace {\n  slug\n  permissions {\n    deleteDatabaseTable\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n  name\n}\n"): (typeof documents)["\nfragment DatabaseTableDeleteTrigger_database on DatabaseTable {\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineDelete_pipeline on Pipeline {\n      id\n      name\n      code\n    }\n  "): (typeof documents)["\n    fragment PipelineDelete_pipeline on Pipeline {\n      id\n      name\n      code\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineDelete_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment PipelineDelete_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineDelete_pipeline on Pipeline {\n  id\n  name\n  code\n}\n"): (typeof documents)["\nfragment PipelineDelete_pipeline on Pipeline {\n  id\n  name\n  code\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineDelete_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment PipelineDelete_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeletePipelineVersionTrigger_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment DeletePipelineVersionTrigger_version on PipelineVersion {\n      id\n      name\n      pipeline {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeletePipelineVersionTrigger_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n"): (typeof documents)["\nfragment DeletePipelineVersionTrigger_version on PipelineVersion {\n  id\n  name\n  pipeline {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      template {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n      id\n      versionNumber\n      template {\n        id\n      }\n      permissions {\n        delete\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  template {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n"): (typeof documents)["\nfragment DeleteTemplateVersionTrigger_version on PipelineTemplateVersion {\n  id\n  versionNumber\n  template {\n    id\n  }\n  permissions {\n    delete\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WebappDelete_webapp on Webapp {\n      id\n      name\n    }\n  "): (typeof documents)["\n    fragment WebappDelete_webapp on Webapp {\n      id\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WebappDelete_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment WebappDelete_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WebappDelete_webapp on Webapp {\n  id\n  name\n}\n"): (typeof documents)["\nfragment WebappDelete_webapp on Webapp {\n  id\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WebappDelete_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment WebappDelete_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DownloadBucketObject_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment DownloadBucketObject_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DownloadBucketObject_object on BucketObject {\n      key\n    }\n  "): (typeof documents)["\n    fragment DownloadBucketObject_object on BucketObject {\n      key\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DownloadBucketObject_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment DownloadBucketObject_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DownloadBucketObject_object on BucketObject {\n  key\n}\n"): (typeof documents)["\nfragment DownloadBucketObject_object on BucketObject {\n  key\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FileBrowserDialog($slug: String!, $page: Int, $perPage: Int, $prefix: String, $query: String = \"\", $workspaceSlugs: [String!] = [], $useSearch: Boolean!) {\n  searchResults: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    prefix: $prefix\n  ) @include(if: $useSearch) {\n    totalItems\n    totalPages\n    pageNumber\n    items {\n      file {\n        name\n        key\n        path\n        type\n        updatedAt\n        size\n      }\n      score\n    }\n  }\n  workspace(slug: $slug) @skip(if: $useSearch) {\n    slug\n    bucket {\n      objects(page: $page, perPage: $perPage, prefix: $prefix) {\n        items {\n          ...FileBrowserDialog_bucketObject\n        }\n        pageNumber\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}"): (typeof documents)["query FileBrowserDialog($slug: String!, $page: Int, $perPage: Int, $prefix: String, $query: String = \"\", $workspaceSlugs: [String!] = [], $useSearch: Boolean!) {\n  searchResults: searchFiles(\n    query: $query\n    workspaceSlugs: $workspaceSlugs\n    page: $page\n    perPage: $perPage\n    prefix: $prefix\n  ) @include(if: $useSearch) {\n    totalItems\n    totalPages\n    pageNumber\n    items {\n      file {\n        name\n        key\n        path\n        type\n        updatedAt\n        size\n      }\n      score\n    }\n  }\n  workspace(slug: $slug) @skip(if: $useSearch) {\n    slug\n    bucket {\n      objects(page: $page, perPage: $perPage, prefix: $prefix) {\n        items {\n          ...FileBrowserDialog_bucketObject\n        }\n        pageNumber\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}\n"): (typeof documents)["\nfragment FileBrowserDialog_bucketObject on BucketObject {\n  key\n  name\n  path\n  size\n  updatedAt\n  type\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FilesEditor_file on FileNode {\n      id\n      name\n      path\n      type\n      content\n      parentId\n      autoSelect\n      language\n      lineCount\n    }\n  "): (typeof documents)["\n    fragment FilesEditor_file on FileNode {\n      id\n      name\n      path\n      type\n      content\n      parentId\n      autoSelect\n      language\n      lineCount\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment FilesEditor_file on FileNode {\n  id\n  name\n  path\n  type\n  content\n  parentId\n  autoSelect\n  language\n  lineCount\n}\n"): (typeof documents)["\nfragment FilesEditor_file on FileNode {\n  id\n  name\n  path\n  type\n  content\n  parentId\n  autoSelect\n  language\n  lineCount\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}\n"): (typeof documents)["\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment GenerateWorkspaceDatabasePasswordDialog_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation generateWebhookPipelineWebhookUrl(\n      $input: GeneratePipelineWebhookUrlInput!\n    ) {\n      generatePipelineWebhookUrl(input: $input) {\n        success\n        errors\n        pipeline {\n          id\n          code\n          webhookUrl\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation generateWebhookPipelineWebhookUrl(\n      $input: GeneratePipelineWebhookUrlInput!\n    ) {\n      generatePipelineWebhookUrl(input: $input) {\n        success\n        errors\n        pipeline {\n          id\n          code\n          webhookUrl\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n      id\n      code\n    }\n  "): (typeof documents)["\n    fragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n      id\n      code\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n  id\n  code\n}\n"): (typeof documents)["\nfragment GeneratePipelineWebhookUrlDialog_pipeline on Pipeline {\n  id\n  code\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n"): (typeof documents)["\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment InviteMemberWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  "): (typeof documents)["\n    fragment InviteMemberWorkspace_workspace on Workspace {\n      slug\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment InviteMemberWorkspace_workspace on Workspace {\n  slug\n  name\n}\n"): (typeof documents)["\nfragment InviteMemberWorkspace_workspace on Workspace {\n  slug\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineCard_pipeline on Pipeline {\n      id\n      code\n      name\n      schedule\n      description\n      type\n      sourceTemplate {\n        id\n        name\n      }\n      ...PipelineMetadataDisplay_pipeline\n      currentVersion {\n        user {\n          ...User_user\n        }\n        versionName\n        createdAt\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n          executionDate\n          user {\n            ...User_user\n          }\n        }\n      }\n    }\n    \n    \n    \n  "): (typeof documents)["\n    fragment PipelineCard_pipeline on Pipeline {\n      id\n      code\n      name\n      schedule\n      description\n      type\n      sourceTemplate {\n        id\n        name\n      }\n      ...PipelineMetadataDisplay_pipeline\n      currentVersion {\n        user {\n          ...User_user\n        }\n        versionName\n        createdAt\n      }\n      lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n        items {\n          ...PipelineRunStatusBadge_run\n          executionDate\n          user {\n            ...User_user\n          }\n        }\n      }\n    }\n    \n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineCard_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment PipelineCard_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineCard_pipeline on Pipeline {\n  id\n  code\n  name\n  schedule\n  description\n  type\n  sourceTemplate {\n    id\n    name\n  }\n  ...PipelineMetadataDisplay_pipeline\n  currentVersion {\n    user {\n      ...User_user\n    }\n    versionName\n    createdAt\n  }\n  lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n    items {\n      ...PipelineRunStatusBadge_run\n      executionDate\n      user {\n        ...User_user\n      }\n    }\n  }\n}\n"): (typeof documents)["\nfragment PipelineCard_pipeline on Pipeline {\n  id\n  code\n  name\n  schedule\n  description\n  type\n  sourceTemplate {\n    id\n    name\n  }\n  ...PipelineMetadataDisplay_pipeline\n  currentVersion {\n    user {\n      ...User_user\n    }\n    versionName\n    createdAt\n  }\n  lastRuns: runs(orderBy: EXECUTION_DATE_DESC, page: 1, perPage: 1) {\n    items {\n      ...PipelineRunStatusBadge_run\n      executionDate\n      user {\n        ...User_user\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineCard_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment PipelineCard_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n      id\n      user {\n        displayName\n      }\n    }\n  "): (typeof documents)["\n    fragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n      id\n      user {\n        displayName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n      permissions {\n        update\n      }\n    }\n  "): (typeof documents)["\n    fragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n      permissions {\n        update\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n  id\n  user {\n    displayName\n  }\n}\n"): (typeof documents)["\nfragment DeletePipelineRecipientTrigger_recipient on PipelineRecipient {\n  id\n  user {\n    displayName\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n  permissions {\n    update\n  }\n}\n"): (typeof documents)["\nfragment DeletePipelineRecipientTrigger_pipeline on Pipeline {\n  permissions {\n    update\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PipelineRecipients($id: UUID!) {\n        pipeline(id: $id) {\n          recipients {\n            id\n            user {\n              id\n              displayName\n            }\n            notificationLevel\n            ...DeletePipelineRecipientTrigger_recipient\n          }\n          workspace {\n            slug\n            members {\n              totalItems\n            }\n          }\n          ...DeletePipelineRecipientTrigger_pipeline\n        }\n      }\n      \n      \n    "): (typeof documents)["\n      query PipelineRecipients($id: UUID!) {\n        pipeline(id: $id) {\n          recipients {\n            id\n            user {\n              id\n              displayName\n            }\n            notificationLevel\n            ...DeletePipelineRecipientTrigger_recipient\n          }\n          workspace {\n            slug\n            members {\n              totalItems\n            }\n          }\n          ...DeletePipelineRecipientTrigger_pipeline\n        }\n      }\n      \n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineRecipients_pipeline on Pipeline {\n      id\n      code\n      permissions {\n        update\n      }\n    }\n  "): (typeof documents)["\n    fragment PipelineRecipients_pipeline on Pipeline {\n      id\n      code\n      permissions {\n        update\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineRecipients_pipeline on Pipeline {\n  id\n  code\n  permissions {\n    update\n  }\n}\n"): (typeof documents)["\nfragment PipelineRecipients_pipeline on Pipeline {\n  id\n  code\n  permissions {\n    update\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdatePipelineVersionConfig($input: UpdatePipelineVersionInput!) {\n      updatePipelineVersion(input: $input) {\n        success\n        errors\n        pipelineVersion {\n          id\n          config\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdatePipelineVersionConfig($input: UpdatePipelineVersionInput!) {\n      updatePipelineVersion(input: $input) {\n        success\n        errors\n        pipelineVersion {\n          id\n          config\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineVersionConfigDialog_version on PipelineVersion {\n      id\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      config\n      pipeline {\n        id\n        schedule\n        workspace {\n          slug\n        }\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineVersionConfigDialog_version on PipelineVersion {\n      id\n      name\n      description\n      externalLink\n      isLatestVersion\n      createdAt\n      config\n      pipeline {\n        id\n        schedule\n        workspace {\n          slug\n        }\n      }\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineVersionConfigDialog_version on PipelineVersion {\n  id\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  config\n  pipeline {\n    id\n    schedule\n    workspace {\n      slug\n    }\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n"): (typeof documents)["\nfragment PipelineVersionConfigDialog_version on PipelineVersion {\n  id\n  name\n  description\n  externalLink\n  isLatestVersion\n  createdAt\n  config\n  pipeline {\n    id\n    schedule\n    workspace {\n      slug\n    }\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineVersionPicker_pipeline on Pipeline {\n      id\n    }\n  "): (typeof documents)["\n    fragment PipelineVersionPicker_pipeline on Pipeline {\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineVersionPicker_version on PipelineVersion {\n      id\n      versionName\n      createdAt\n      config\n      parameters {\n        ...ParameterField_parameter\n      }\n      user {\n        displayName\n      }\n    }\n  "): (typeof documents)["\n    fragment PipelineVersionPicker_version on PipelineVersion {\n      id\n      versionName\n      createdAt\n      config\n      parameters {\n        ...ParameterField_parameter\n      }\n      user {\n        displayName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineVersionPicker_pipeline on Pipeline {\n  id\n}\n"): (typeof documents)["\nfragment PipelineVersionPicker_pipeline on Pipeline {\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineVersionPicker_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  parameters {\n    ...ParameterField_parameter\n  }\n  user {\n    displayName\n  }\n}\n"): (typeof documents)["\nfragment PipelineVersionPicker_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  parameters {\n    ...ParameterField_parameter\n  }\n  user {\n    displayName\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunOutputsTable_workspace on Workspace {\n      ...DownloadBucketObject_workspace\n      slug\n      bucket {\n        name\n      }\n    }\n  "): (typeof documents)["\n    fragment RunOutputsTable_workspace on Workspace {\n      ...DownloadBucketObject_workspace\n      slug\n      bucket {\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunOutputsTable_run on PipelineRun {\n      id\n      outputs {\n        __typename\n        ... on GenericOutput {\n          genericName: name\n          genericType: type\n          genericUri: uri\n        }\n        ... on BucketObject {\n          name\n          key\n          path\n          type\n        }\n\n        ... on DatabaseTable {\n          tableName: name\n        }\n      }\n      datasetVersions {\n        name\n        dataset {\n          slug\n          name\n          workspace {\n            slug\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment RunOutputsTable_run on PipelineRun {\n      id\n      outputs {\n        __typename\n        ... on GenericOutput {\n          genericName: name\n          genericType: type\n          genericUri: uri\n        }\n        ... on BucketObject {\n          name\n          key\n          path\n          type\n        }\n\n        ... on DatabaseTable {\n          tableName: name\n        }\n      }\n      datasetVersions {\n        name\n        dataset {\n          slug\n          name\n          workspace {\n            slug\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunOutputsTable_workspace on Workspace {\n  ...DownloadBucketObject_workspace\n  slug\n  bucket {\n    name\n  }\n}\n"): (typeof documents)["\nfragment RunOutputsTable_workspace on Workspace {\n  ...DownloadBucketObject_workspace\n  slug\n  bucket {\n    name\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunOutputsTable_run on PipelineRun {\n  id\n  outputs {\n    __typename\n    ... on GenericOutput {\n      genericName: name\n      genericType: type\n      genericUri: uri\n    }\n    ... on BucketObject {\n      name\n      key\n      path\n      type\n    }\n    ... on DatabaseTable {\n      tableName: name\n    }\n  }\n  datasetVersions {\n    name\n    dataset {\n      slug\n      name\n      workspace {\n        slug\n      }\n    }\n  }\n}\n"): (typeof documents)["\nfragment RunOutputsTable_run on PipelineRun {\n  id\n  outputs {\n    __typename\n    ... on GenericOutput {\n      genericName: name\n      genericType: type\n      genericUri: uri\n    }\n    ... on BucketObject {\n      name\n      key\n      path\n      type\n    }\n    ... on DatabaseTable {\n      tableName: name\n    }\n  }\n  datasetVersions {\n    name\n    dataset {\n      slug\n      name\n      workspace {\n        slug\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}"): (typeof documents)["query getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getConnectionBySlugDhis2($workspaceSlug: String!, $connectionSlug: String!, $type: DHIS2MetadataType!, $filters: [String!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on DHIS2Connection {\n      queryMetadata(type: $type, filters: $filters, perPage: $perPage, page: $page) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}"): (typeof documents)["query getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getConnectionBySlugIaso($workspaceSlug: String!, $connectionSlug: String!, $type: IASOMetadataType!, $search: String, $filters: [IASOQueryFilterInput!], $perPage: Int, $page: Int) {\n  connectionBySlug(workspaceSlug: $workspaceSlug, connectionSlug: $connectionSlug) {\n    ... on IASOConnection {\n      queryMetadata(\n        type: $type\n        search: $search\n        filters: $filters\n        perPage: $perPage\n        page: $page\n      ) {\n        items {\n          id\n          label\n        }\n        pageNumber\n        totalItems\n        error\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ParameterField_parameter on PipelineParameter {\n      code\n      name\n      help\n      type\n      default\n      required\n      choices\n      connection\n      widget\n      multiple\n      directory\n    }\n  "): (typeof documents)["\n    fragment ParameterField_parameter on PipelineParameter {\n      code\n      name\n      help\n      type\n      default\n      required\n      choices\n      connection\n      widget\n      multiple\n      directory\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ParameterField_parameter on PipelineParameter {\n  code\n  name\n  help\n  type\n  default\n  required\n  choices\n  connection\n  widget\n  multiple\n  directory\n}\n"): (typeof documents)["\nfragment ParameterField_parameter on PipelineParameter {\n  code\n  name\n  help\n  type\n  default\n  required\n  choices\n  connection\n  widget\n  multiple\n  directory\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RunPipelineDialog_version on PipelineVersion {\n    id\n    versionName\n    createdAt\n    config\n    user {\n      displayName\n    }\n    parameters {\n      ...ParameterField_parameter\n    }\n  }\n  \n"): (typeof documents)["\n  fragment RunPipelineDialog_version on PipelineVersion {\n    id\n    versionName\n    createdAt\n    config\n    user {\n      displayName\n    }\n    parameters {\n      ...ParameterField_parameter\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PipelineCurrentVersion(\n        $workspaceSlug: String!\n        $pipelineCode: String!\n      ) {\n        pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n          currentVersion {\n            id\n            versionName\n            createdAt\n            user {\n              displayName\n            }\n            config\n            parameters {\n              ...ParameterField_parameter\n            }\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query PipelineCurrentVersion(\n        $workspaceSlug: String!\n        $pipelineCode: String!\n      ) {\n        pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n          currentVersion {\n            id\n            versionName\n            createdAt\n            user {\n              displayName\n            }\n            config\n            parameters {\n              ...ParameterField_parameter\n            }\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunPipelineDialog_pipeline on Pipeline {\n      id\n      workspace {\n        slug\n      }\n      permissions {\n        run\n      }\n      code\n      type\n      currentVersion {\n        id\n      }\n      ...PipelineVersionPicker_pipeline\n    }\n    \n    \n  "): (typeof documents)["\n    fragment RunPipelineDialog_pipeline on Pipeline {\n      id\n      workspace {\n        slug\n      }\n      permissions {\n        run\n      }\n      code\n      type\n      currentVersion {\n        id\n      }\n      ...PipelineVersionPicker_pipeline\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RunPipelineDialog_run on PipelineRun {\n      id\n      config\n      version {\n        id\n        versionName\n        createdAt\n        parameters {\n          ...ParameterField_parameter\n        }\n        user {\n          displayName\n        }\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment RunPipelineDialog_run on PipelineRun {\n      id\n      config\n      version {\n        id\n        versionName\n        createdAt\n        parameters {\n          ...ParameterField_parameter\n        }\n        user {\n          displayName\n        }\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunPipelineDialog_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  user {\n    displayName\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n"): (typeof documents)["\nfragment RunPipelineDialog_version on PipelineVersion {\n  id\n  versionName\n  createdAt\n  config\n  user {\n    displayName\n  }\n  parameters {\n    ...ParameterField_parameter\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunPipelineDialog_pipeline on Pipeline {\n  id\n  workspace {\n    slug\n  }\n  permissions {\n    run\n  }\n  code\n  type\n  currentVersion {\n    id\n  }\n  ...PipelineVersionPicker_pipeline\n}\n"): (typeof documents)["\nfragment RunPipelineDialog_pipeline on Pipeline {\n  id\n  workspace {\n    slug\n  }\n  permissions {\n    run\n  }\n  code\n  type\n  currentVersion {\n    id\n  }\n  ...PipelineVersionPicker_pipeline\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment RunPipelineDialog_run on PipelineRun {\n  id\n  config\n  version {\n    id\n    versionName\n    createdAt\n    parameters {\n      ...ParameterField_parameter\n    }\n    user {\n      displayName\n    }\n  }\n}\n"): (typeof documents)["\nfragment RunPipelineDialog_run on PipelineRun {\n  id\n  config\n  version {\n    id\n    versionName\n    createdAt\n    parameters {\n      ...ParameterField_parameter\n    }\n    user {\n      displayName\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query SidebarMenu($page: Int, $perPage: Int) {\n        pendingWorkspaceInvitations(page: 1, perPage: 1) {\n          totalItems\n        }\n        workspaces(page: $page, perPage: $perPage) {\n          totalItems\n          items {\n            slug\n            name\n            countries {\n              code\n              flag\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query SidebarMenu($page: Int, $perPage: Int) {\n        pendingWorkspaceInvitations(page: 1, perPage: 1) {\n          totalItems\n        }\n        workspaces(page: $page, perPage: $perPage) {\n          totalItems\n          items {\n            slug\n            name\n            countries {\n              code\n              flag\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SidebarMenu_workspace on Workspace {\n      slug\n      name\n      countries {\n        flag\n        code\n      }\n      organization {\n        id\n        name\n        shortName\n        permissions {\n          createWorkspace\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment SidebarMenu_workspace on Workspace {\n      slug\n      name\n      countries {\n        flag\n        code\n      }\n      organization {\n        id\n        name\n        shortName\n        permissions {\n          createWorkspace\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment SidebarMenu_workspace on Workspace {\n  slug\n  name\n  countries {\n    flag\n    code\n  }\n  organization {\n    id\n    name\n    shortName\n    permissions {\n      createWorkspace\n    }\n  }\n}\n"): (typeof documents)["\nfragment SidebarMenu_workspace on Workspace {\n  slug\n  name\n  countries {\n    flag\n    code\n  }\n  organization {\n    id\n    name\n    shortName\n    permissions {\n      createWorkspace\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StopPipelineDialog_run on PipelineRun {\n      id\n    }\n  "): (typeof documents)["\n    fragment StopPipelineDialog_run on PipelineRun {\n      id\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StopPipelineDialog_pipeline on Pipeline {\n      code\n    }\n  "): (typeof documents)["\n    fragment StopPipelineDialog_pipeline on Pipeline {\n      code\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment StopPipelineDialog_run on PipelineRun {\n  id\n}\n"): (typeof documents)["\nfragment StopPipelineDialog_run on PipelineRun {\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment StopPipelineDialog_pipeline on Pipeline {\n  code\n}\n"): (typeof documents)["\nfragment StopPipelineDialog_pipeline on Pipeline {\n  code\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TemplateCard_template on PipelineTemplate {\n      id\n      code\n      name\n      description\n      ...PipelineMetadataDisplay_template\n      currentVersion {\n        id\n        createdAt\n        user {\n          ...User_user\n        }\n      }\n    }\n    \n    \n  "): (typeof documents)["\n    fragment TemplateCard_template on PipelineTemplate {\n      id\n      code\n      name\n      description\n      ...PipelineMetadataDisplay_template\n      currentVersion {\n        id\n        createdAt\n        user {\n          ...User_user\n        }\n      }\n    }\n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TemplateCard_workspace on Workspace {\n      slug\n    }\n  "): (typeof documents)["\n    fragment TemplateCard_workspace on Workspace {\n      slug\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TemplateCard_template on PipelineTemplate {\n  id\n  code\n  name\n  description\n  ...PipelineMetadataDisplay_template\n  currentVersion {\n    id\n    createdAt\n    user {\n      ...User_user\n    }\n  }\n}\n"): (typeof documents)["\nfragment TemplateCard_template on PipelineTemplate {\n  id\n  code\n  name\n  description\n  ...PipelineMetadataDisplay_template\n  currentVersion {\n    id\n    createdAt\n    user {\n      ...User_user\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TemplateCard_workspace on Workspace {\n  slug\n}\n"): (typeof documents)["\nfragment TemplateCard_workspace on Workspace {\n  slug\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateConnectionFieldsDialog_connection on Connection {\n      id\n      name\n      type\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  "): (typeof documents)["\n    fragment UpdateConnectionFieldsDialog_connection on Connection {\n      id\n      name\n      type\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UpdateConnectionFieldsDialog_connection on Connection {\n  id\n  name\n  type\n  fields {\n    code\n    value\n    secret\n  }\n}\n"): (typeof documents)["\nfragment UpdateConnectionFieldsDialog_connection on Connection {\n  id\n  name\n  type\n  fields {\n    code\n    value\n    secret\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UploadObjectDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n    }\n  "): (typeof documents)["\n    fragment UploadObjectDialog_workspace on Workspace {\n      slug\n      permissions {\n        createObject\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UploadObjectDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n}\n"): (typeof documents)["\nfragment UploadObjectDialog_workspace on Workspace {\n  slug\n  permissions {\n    createObject\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}"): (typeof documents)["query GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}\n"): (typeof documents)["\nquery GetUsers($query: String!, $workspaceSlug: String, $organizationId: UUID) {\n  users(\n    query: $query\n    workspaceSlug: $workspaceSlug\n    organizationId: $organizationId\n  ) {\n    ...User_user\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserPicker_user on User {\n      ...User_user\n    }\n    \n  "): (typeof documents)["\n    fragment UserPicker_user on User {\n      ...User_user\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UserPicker_user on User {\n  ...User_user\n}\n"): (typeof documents)["\nfragment UserPicker_user on User {\n  ...User_user\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspaceConnectionPicker_workspace on Workspace {\n      slug\n      connections {\n        id\n        name\n        slug\n        type\n      }\n    }\n  "): (typeof documents)["\n    fragment WorkspaceConnectionPicker_workspace on Workspace {\n      slug\n      connections {\n        id\n        name\n        slug\n        type\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspaceConnectionPicker_workspace on Workspace {\n  slug\n  connections {\n    id\n    name\n    slug\n    type\n  }\n}\n"): (typeof documents)["\nfragment WorkspaceConnectionPicker_workspace on Workspace {\n  slug\n  connections {\n    id\n    name\n    slug\n    type\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  "): (typeof documents)["\n    fragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n"): (typeof documents)["\nfragment DeleteWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  "): (typeof documents)["\n    fragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n      id\n      email\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n"): (typeof documents)["\nfragment ResendWorkspaceInvitation_workspaceInvitation on WorkspaceInvitation {\n  id\n  email\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query WorkspaceInvitations($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          invitations(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              email\n              status\n              invitedBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query WorkspaceInvitations($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          invitations(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              email\n              status\n              invitedBy {\n                displayName\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n"): (typeof documents)["\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspaceMemberPicker_workspace on Workspace {\n      slug\n      members {\n        items {\n          id\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment WorkspaceMemberPicker_workspace on Workspace {\n      slug\n      members {\n        items {\n          id\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspaceMemberPicker_workspace on Workspace {\n  slug\n  members {\n    items {\n      id\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n"): (typeof documents)["\nfragment WorkspaceMemberPicker_workspace on Workspace {\n  slug\n  members {\n    items {\n      id\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n"): (typeof documents)["\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      user {\n        id\n        displayName\n      }\n      organizationMembership {\n        role\n      }\n    }\n  "): (typeof documents)["\n    fragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      user {\n        id\n        displayName\n      }\n      organizationMembership {\n        role\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  user {\n    id\n    displayName\n  }\n  organizationMembership {\n    role\n  }\n}\n"): (typeof documents)["\nfragment DeleteWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  user {\n    id\n    displayName\n  }\n  organizationMembership {\n    role\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n"): (typeof documents)["\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      role\n    }\n  "): (typeof documents)["\n    fragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n      id\n      role\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  role\n}\n"): (typeof documents)["\nfragment UpdateWorkspaceMember_workspaceMember on WorkspaceMembership {\n  id\n  role\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query WorskspaceMembers($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          members(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              user {\n                id\n                displayName\n                email\n              }\n              organizationMembership {\n                role\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query WorskspaceMembers($slug: String!, $page: Int, $perPage: Int) {\n        workspace(slug: $slug) {\n          slug\n          permissions {\n            manageMembers\n          }\n          members(page: $page, perPage: $perPage) {\n            totalItems\n            items {\n              id\n              role\n              user {\n                id\n                displayName\n                email\n              }\n              organizationMembership {\n                role\n              }\n              createdAt\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n"): (typeof documents)["\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspacePicker_value on Workspace {\n      slug\n      name\n    }\n  "): (typeof documents)["\n    fragment WorkspacePicker_value on Workspace {\n      slug\n      name\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspacePicker_value on Workspace {\n  slug\n  name\n}\n"): (typeof documents)["\nfragment WorkspacePicker_value on Workspace {\n  slug\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation createPipeline($input: CreatePipelineInput!) {\n  createPipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      code\n    }\n  }\n}\n\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineVersion($input: DeletePipelineVersionInput!) {\n  deletePipelineVersion(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n  addPipelineRecipient(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}"): (typeof documents)["mutation createWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation updateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    success\n    workspace {\n      slug\n      name\n      description\n      configuration\n      countries {\n        code\n        alpha3\n        name\n      }\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation archiveWorkspace($input: ArchiveWorkspaceInput!) {\n  archiveWorkspace(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {\n  inviteWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n    }\n  }\n}\n\nmutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {\n  deleteWorkspaceMember(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {\n  updateWorkspaceMember(input: $input) {\n    success\n    errors\n    workspaceMembership {\n      id\n      role\n    }\n  }\n}\n\nmutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    success\n    connection {\n      id\n      name\n    }\n    errors\n  }\n}\n\nmutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    success\n    errors\n    connection {\n      id\n      name\n      slug\n      description\n      fields {\n        code\n        value\n        secret\n      }\n    }\n  }\n}\n\nmutation generateNewDatabasePassword($input: GenerateNewDatabasePasswordInput!) {\n  generateNewDatabasePassword(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation createPipeline($input: CreatePipelineInput!) {\n  createPipeline(input: $input) {\n    success\n    errors\n    pipeline {\n      code\n    }\n  }\n}\n\nmutation deletePipeline($input: DeletePipelineInput!) {\n  deletePipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation stopPipeline($input: StopPipelineInput!) {\n  stopPipeline(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineVersion($input: DeletePipelineVersionInput!) {\n  deletePipelineVersion(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deletePipelineTemplate($input: DeletePipelineTemplateInput!) {\n  deletePipelineTemplate(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation joinWorkspace($input: JoinWorkspaceInput!) {\n  joinWorkspace(input: $input) {\n    success\n    errors\n    invitation {\n      id\n      status\n      invitedBy {\n        ...User_user\n      }\n      role\n      workspace {\n        slug\n        name\n      }\n      createdAt\n    }\n    workspace {\n      slug\n    }\n  }\n}\n\nmutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {\n  declineWorkspaceInvitation(input: $input) {\n    success\n    invitation {\n      id\n      status\n    }\n    errors\n  }\n}\n\nmutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {\n  deleteWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {\n  resendWorkspaceInvitation(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n  addPipelineRecipient(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation deleteWebapp($input: DeleteWebappInput!) {\n  deleteWebapp(input: $input) {\n    success\n    errors\n  }\n}\n\nmutation uploadPipeline($input: UploadPipelineInput!) {\n  uploadPipeline(input: $input) {\n    success\n    errors\n    details\n    pipelineVersion {\n      id\n      versionNumber\n      versionName\n      isLatestVersion\n      ...PipelineVersionPicker_version\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query WorkspacesPage {\n  workspaces(page: 1, perPage: 1) {\n    items {\n      slug\n    }\n  }\n}\n\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspacePipelineStartPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n\nquery WorkspaceTemplatesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipelineTemplates(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    items {\n      ...TemplateCard_template\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}"): (typeof documents)["query WorkspacesPage {\n  workspaces(page: 1, perPage: 1) {\n    items {\n      slug\n    }\n  }\n}\n\nquery WorkspacePage($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    name\n    description\n    dockerImage\n    configuration\n    countries {\n      code\n      flag\n      name\n    }\n    permissions {\n      delete\n      update\n      manageMembers\n    }\n    ...ArchiveWorkspace_workspace\n    ...InviteMemberWorkspace_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinesPage($workspaceSlug: String!, $search: String, $tags: [String!], $functionalType: PipelineFunctionalType, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    pipelineTags\n    ...WorkspaceLayout_workspace\n    ...CreatePipelineDialog_workspace\n  }\n  pipelines(\n    workspaceSlug: $workspaceSlug\n    search: $search\n    tags: $tags\n    functionalType: $functionalType\n    page: $page\n    perPage: $perPage\n  ) {\n    items {\n      ...PipelineCard_pipeline\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceNotebooksPage($workspaceSlug: String!) {\n  notebooksUrl\n  workspace(slug: $workspaceSlug) {\n    slug\n    permissions {\n      launchNotebookServer\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelinePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...RunPipelineDialog_pipeline\n    ...PipelineLayout_pipeline\n    permissions {\n      run\n      update\n      schedule\n      delete\n      createVersion\n      createTemplateVersion {\n        isAllowed\n      }\n    }\n    webhookUrl\n    webhookEnabled\n    id\n    createdAt\n    code\n    name\n    description\n    schedule\n    type\n    functionalType\n    notebookPath\n    tags {\n      ...Tag_tag\n    }\n    sourceTemplate {\n      id\n      code\n      name\n    }\n    autoUpdateFromTemplate\n    hasNewTemplateVersions\n    newTemplateVersions {\n      id\n      changelog\n      versionNumber\n      createdAt\n    }\n    currentVersion {\n      id\n      versionName\n      description\n      config\n      externalLink\n      ...PipelineVersionParametersTable_version\n      ...PipelineVersionConfigDialog_version\n    }\n    recipients {\n      user {\n        id\n        displayName\n      }\n    }\n  }\n}\n\nquery WorkspacePipelineCodePage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    code\n    name\n    type\n    currentVersion {\n      id\n      versionName\n      files {\n        ...FilesEditor_file\n      }\n    }\n  }\n}\n\nquery GetPipelineVersionFiles($versionId: UUID!) {\n  pipelineVersion(id: $versionId) {\n    id\n    versionName\n    files {\n      ...FilesEditor_file\n    }\n  }\n}\n\nquery WorkspacePipelineRunsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int = 1, $perPage: Int = 10) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    id\n    type\n    runs(page: $page, perPage: $perPage) {\n      items {\n        id\n        version {\n          versionName\n          createdAt\n          user {\n            ...User_user\n          }\n        }\n        executionDate\n        duration\n        triggerMode\n        user {\n          ...UserColumn_user\n        }\n        ...PipelineRunStatusBadge_run\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspacePipelineNotificationsPage($workspaceSlug: String!, $pipelineCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    ...PipelineLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    ...PipelineLayout_pipeline\n    ...PipelineRecipients_pipeline\n    id\n    code\n    type\n    schedule\n    permissions {\n      schedule\n      update\n    }\n  }\n}\n\nquery WorkspacePipelineVersionsPage($workspaceSlug: String!, $pipelineCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipeline: pipelineByCode(workspaceSlug: $workspaceSlug, code: $pipelineCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...PipelineVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspacePipelineStartPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspacePipelineRunPage($workspaceSlug: String!, $runId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...RunOutputsTable_workspace\n  }\n  pipelineRun(id: $runId) {\n    id\n    version {\n      versionName\n      parameters {\n        ...ParameterField_parameter\n      }\n    }\n    timeout\n    config\n    executionDate\n    duration\n    triggerMode\n    pipeline {\n      id\n      code\n      name\n      type\n      notebookPath\n      sourceTemplate {\n        id\n        name\n      }\n      permissions {\n        stopPipeline\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    user {\n      ...User_user\n    }\n    stoppedBy {\n      ...User_user\n    }\n    ...RunOutputsTable_run\n    ...RunPipelineDialog_run\n    ...RunMessages_run\n    ...RunLogs_run\n    ...PipelineRunStatusBadge_run\n  }\n}\n\nquery WorkspaceDatasetsPage($workspaceSlug: String!, $page: Int, $perPage: Int, $query: String) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n    ...CreateDatasetDialog_workspace\n    permissions {\n      createDataset\n    }\n    pinnedDatasets: datasets(pinned: true, page: 1, perPage: 6) {\n      items {\n        ...DatasetCard_link\n      }\n    }\n    datasets(query: $query, page: $page, perPage: $perPage) {\n      items {\n        ...PinDatasetButton_link\n        id\n        dataset {\n          id\n          name\n          slug\n          description\n          updatedAt\n          workspace {\n            slug\n            name\n          }\n          permissions {\n            update\n            delete\n          }\n          createdBy {\n            ...User_user\n          }\n        }\n      }\n      totalItems\n      totalPages\n      pageNumber\n    }\n  }\n}\n\nquery WorkspaceDatasetIndexPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      id\n      name\n      slug\n      permissions {\n        update\n      }\n      description\n      sharedWithOrganization\n      updatedAt\n      createdAt\n      workspace {\n        name\n        slug\n        organization {\n          name\n        }\n      }\n      createdBy {\n        ...User_user\n      }\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        id\n        createdAt\n        changelog\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        id\n        changelog\n        createdAt\n        createdBy {\n          ...User_user\n        }\n        permissions {\n          update\n        }\n        name\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetAccessPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    organization {\n      id\n      name\n    }\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      permissions {\n        update\n      }\n      sharedWithOrganization\n      workspace {\n        organization {\n          id\n          name\n        }\n      }\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n      }\n    }\n  }\n}\n\nquery WorkspaceDatasetFilesPage($workspaceSlug: String!, $sourceWorkspaceSlug: String!, $datasetSlug: String!, $versionId: ID!, $isSpecificVersion: Boolean!, $page: Int = 1, $perPage: Int = 20) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    ...DatasetLayout_workspace\n  }\n  datasetLink: datasetLinkBySlug(\n    workspaceSlug: $sourceWorkspaceSlug\n    datasetSlug: $datasetSlug\n  ) {\n    ...DatasetLayout_datasetLink\n    id\n    dataset {\n      name\n      ...DatasetLinksDataGrid_dataset\n      version(id: $versionId) @include(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n      latestVersion @skip(if: $isSpecificVersion) {\n        ...DatasetLayout_version\n        ...DatasetExplorer_version\n        files(page: $page, perPage: $perPage) {\n          items {\n            ...DatasetExplorer_file\n          }\n        }\n      }\n    }\n  }\n}\n\nquery WorkspaceFilesPage($workspaceSlug: String!, $page: Int!, $perPage: Int!, $prefix: String!, $query: String, $ignoreHiddenFiles: Boolean) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...BucketExplorer_workspace\n    ...WorkspaceLayout_workspace\n    ...UploadObjectDialog_workspace\n    ...CreateBucketFolderDialog_workspace\n    ...BucketExplorer_workspace\n    bucket {\n      objects(\n        page: $page\n        prefix: $prefix\n        perPage: $perPage\n        query: $query\n        ignoreHiddenFiles: $ignoreHiddenFiles\n      ) {\n        ...BucketExplorer_objects\n      }\n    }\n    permissions {\n      createObject\n    }\n  }\n}\n\nquery WorkspaceDatabasesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    database {\n      tables(page: $page, perPage: $perPage) {\n        totalPages\n        totalItems\n        items {\n          name\n          count\n        }\n      }\n    }\n    ...DatabaseVariablesSection_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery WorkspaceDatabaseTablePage($workspaceSlug: String!, $tableName: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      deleteDatabaseTable\n    }\n    database {\n      table(name: $tableName) {\n        name\n        count\n        columns {\n          name\n          type\n        }\n        ...DatabaseTableDataGrid_table\n      }\n    }\n    ...DatabaseTableDataGrid_workspace\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionsPage($workspaceSlug: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n      createConnection\n    }\n    ...CreateConnectionDialog_workspace\n    connections {\n      id\n      description\n      name\n      type\n      slug\n      updatedAt\n      permissions {\n        update\n        delete\n      }\n    }\n    ...WorkspaceLayout_workspace\n  }\n}\n\nquery ConnectionPage($workspaceSlug: String!, $connectionId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    permissions {\n      update\n    }\n    ...WorkspaceLayout_workspace\n  }\n  connection(id: $connectionId) {\n    id\n    name\n    slug\n    description\n    type\n    createdAt\n    permissions {\n      update\n      delete\n    }\n    ...ConnectionUsageSnippets_connection\n    ...ConnectionFieldsSection_connection\n  }\n}\n\nquery CheckWorkspaceAvailability($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n  }\n}\n\nquery WorkspaceTemplatesPage($workspaceSlug: String!, $page: Int, $perPage: Int) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  pipelineTemplates(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    items {\n      ...TemplateCard_template\n    }\n    totalItems\n    totalPages\n    pageNumber\n  }\n}\n\nquery WorkspaceTemplatePage($workspaceSlug: String!, $templateCode: String!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...PipelineLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    ...TemplateLayout_template\n    permissions {\n      update\n      delete\n    }\n    id\n    code\n    name\n    description\n    functionalType\n    tags {\n      ...Tag_tag\n    }\n    currentVersion {\n      id\n      versionNumber\n      sourcePipelineVersion {\n        files {\n          ...FilesEditor_file\n        }\n        zipfile\n      }\n    }\n  }\n}\n\nquery WorkspaceTemplateVersionsPage($workspaceSlug: String!, $templateCode: String!, $page: Int!, $perPage: Int!) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  template: templateByCode(code: $templateCode) {\n    id\n    code\n    name\n    currentVersion {\n      id\n    }\n    versions(page: $page, perPage: $perPage) {\n      items {\n        ...TemplateVersionCard_version\n        id\n      }\n      totalItems\n      totalPages\n    }\n  }\n}\n\nquery WorkspaceWebappsPage($workspaceSlug: String!, $page: Int, $perPage: Int = 15) {\n  workspace(slug: $workspaceSlug) {\n    slug\n    name\n    ...WorkspaceLayout_workspace\n  }\n  webapps(workspaceSlug: $workspaceSlug, page: $page, perPage: $perPage) {\n    totalPages\n    totalItems\n    items {\n      id\n      name\n      icon\n      description\n      url\n      isFavorite\n      createdBy {\n        firstName\n        lastName\n        ...User_user\n      }\n      workspace {\n        slug\n        name\n      }\n      permissions {\n        update\n        delete\n      }\n    }\n  }\n  favoriteWebapps: webapps(\n    workspaceSlug: $workspaceSlug\n    favorite: true\n    page: 1\n    perPage: 6\n  ) {\n    items {\n      ...WebappCard_webapp\n    }\n  }\n}\n\nquery WorkspaceWebappPage($workspaceSlug: String!, $webappId: UUID!) {\n  workspace(slug: $workspaceSlug) {\n    ...WebappForm_workspace\n  }\n  webapp: webapp(id: $webappId) {\n    ...WebappForm_webapp\n  }\n}\n\nquery PipelineVersionPicker($pipelineId: UUID!, $page: Int, $perPage: Int) {\n  pipeline(id: $pipelineId) {\n    versions(page: $page, perPage: $perPage) {\n      pageNumber\n      totalPages\n      totalItems\n      items {\n        ...PipelineVersionPicker_version\n      }\n    }\n  }\n}\n\nquery WorkspacePicker($query: String, $perPage: Int = 10) {\n  workspaces(query: $query, page: 1, perPage: $perPage) {\n    totalItems\n    items {\n      ...WorkspacePicker_value\n    }\n  }\n}\n\nquery WorkspaceMemberPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceMemberPicker_workspace\n  }\n}\n\nquery WorkspaceConnectionPicker($slug: String!) {\n  workspace(slug: $slug) {\n    slug\n    ...WorkspaceConnectionPicker_workspace\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetTemplateVersionForDownload($versionId: UUID!) {\n  pipelineTemplateVersion(id: $versionId) {\n    id\n    versionNumber\n    template {\n      code\n    }\n    sourcePipelineVersion {\n      zipfile\n    }\n  }\n}"): (typeof documents)["query GetTemplateVersionForDownload($versionId: UUID!) {\n  pipelineTemplateVersion(id: $versionId) {\n    id\n    versionNumber\n    template {\n      code\n    }\n    sourcePipelineVersion {\n      zipfile\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation GetFileDownloadUrl($input: PrepareObjectDownloadInput!) {\n        prepareObjectDownload(input: $input) {\n          success\n          downloadUrl\n        }\n      }\n    "): (typeof documents)["\n      mutation GetFileDownloadUrl($input: PrepareObjectDownloadInput!) {\n        prepareObjectDownload(input: $input) {\n          success\n          downloadUrl\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation deleteBucketObject($input: DeleteBucketObjectInput!) {\n        deleteBucketObject(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation deleteBucketObject($input: DeleteBucketObjectInput!) {\n        deleteBucketObject(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation GetBucketUploadUrl($input: PrepareObjectUploadInput!) {\n        prepareObjectUpload(input: $input) {\n          success\n          uploadUrl\n        }\n      }\n    "): (typeof documents)["\n      mutation GetBucketUploadUrl($input: PrepareObjectUploadInput!) {\n        prepareObjectUpload(input: $input) {\n          success\n          uploadUrl\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation CreateBucketFolder($input: CreateBucketFolderInput!) {\n        createBucketFolder(input: $input) {\n          success\n          errors\n          folder {\n            key\n            name\n            type\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation CreateBucketFolder($input: CreateBucketFolderInput!) {\n        createBucketFolder(input: $input) {\n          success\n          errors\n          folder {\n            key\n            name\n            type\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeleteConnection($input: DeleteConnectionInput!) {\n        deleteConnection(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteConnection($input: DeleteConnectionInput!) {\n        deleteConnection(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation deleteWorkspaceDatabaseTable(\n        $input: DeleteWorkspaceDatabaseTableInput!\n      ) {\n        deleteWorkspaceDatabaseTable(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation deleteWorkspaceDatabaseTable(\n        $input: DeleteWorkspaceDatabaseTableInput!\n      ) {\n        deleteWorkspaceDatabaseTable(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation launchNotebookServer($input: LaunchNotebookServerInput!) {\n        launchNotebookServer(input: $input) {\n          success\n          server {\n            name\n            ready\n            url\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation launchNotebookServer($input: LaunchNotebookServerInput!) {\n        launchNotebookServer(input: $input) {\n          success\n          server {\n            name\n            ready\n            url\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UpdateWorkspacePipeline($input: UpdatePipelineInput!) {\n        updatePipeline(input: $input) {\n          success\n          errors\n          pipeline {\n            id\n            name\n            description\n            schedule\n            config\n            functionalType\n            updatedAt\n            webhookEnabled\n            webhookUrl\n            autoUpdateFromTemplate\n            tags {\n              ...Tag_tag\n            }\n            recipients {\n              user {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      mutation UpdateWorkspacePipeline($input: UpdatePipelineInput!) {\n        updatePipeline(input: $input) {\n          success\n          errors\n          pipeline {\n            id\n            name\n            description\n            schedule\n            config\n            functionalType\n            updatedAt\n            webhookEnabled\n            webhookUrl\n            autoUpdateFromTemplate\n            tags {\n              ...Tag_tag\n            }\n            recipients {\n              user {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation RunWorkspacePipeline($input: RunPipelineInput!) {\n        runPipeline(input: $input) {\n          success\n          errors\n\n          run {\n            id\n            pipeline {\n              __typename\n              id\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation RunWorkspacePipeline($input: RunPipelineInput!) {\n        runPipeline(input: $input) {\n          success\n          errors\n\n          run {\n            id\n            pipeline {\n              __typename\n              id\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                fragment NewRun on PipelineRun {\n                  id\n                }\n              "): (typeof documents)["\n                fragment NewRun on PipelineRun {\n                  id\n                }\n              "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeletePipelineVersion($input: DeletePipelineVersionInput!) {\n        deletePipelineVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeletePipelineVersion($input: DeletePipelineVersionInput!) {\n        deletePipelineVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n        addPipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {\n        addPipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation updatePipelineRecipient($input: UpdatePipelineRecipientInput!) {\n        updatePipelineRecipient(input: $input) {\n          success\n          errors\n          recipient {\n            id\n            notificationLevel\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation updatePipelineRecipient($input: UpdatePipelineRecipientInput!) {\n        updatePipelineRecipient(input: $input) {\n          success\n          errors\n          recipient {\n            id\n            notificationLevel\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation deletePipelineRecipient($input: DeletePipelineRecipientInput!) {\n        deletePipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation deletePipelineRecipient($input: DeletePipelineRecipientInput!) {\n        deletePipelineRecipient(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment NewRun on PipelineRun {\n  id\n}\n"): (typeof documents)["\nfragment NewRun on PipelineRun {\n  id\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UpdateWorkspaceTemplate($input: UpdateTemplateInput!) {\n        updatePipelineTemplate(input: $input) {\n          success\n          errors\n          template {\n            id\n            name\n            description\n            config\n            functionalType\n            tags {\n              ...Tag_tag\n            }\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      mutation UpdateWorkspaceTemplate($input: UpdateTemplateInput!) {\n        updatePipelineTemplate(input: $input) {\n          success\n          errors\n          template {\n            id\n            name\n            description\n            config\n            functionalType\n            tags {\n              ...Tag_tag\n            }\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeleteTemplateVersion($input: DeleteTemplateVersionInput!) {\n        deleteTemplateVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteTemplateVersion($input: DeleteTemplateVersionInput!) {\n        deleteTemplateVersion(input: $input) {\n          success\n          errors\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  "): (typeof documents)["\n    fragment PipelineLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PipelineLayout_pipeline on Pipeline {\n      id\n      code\n      name\n      permissions {\n        run\n        delete\n        update\n        createTemplateVersion {\n          isAllowed\n          reasons\n        }\n      }\n      template {\n        id\n        name\n        code\n      }\n      currentVersion {\n        id\n        name\n        description\n        config\n        externalLink\n        templateVersion {\n          id\n        }\n        ...PipelineVersionPicker_version\n        ...DownloadPipelineVersion_version\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    \n    \n    \n  "): (typeof documents)["\n    fragment PipelineLayout_pipeline on Pipeline {\n      id\n      code\n      name\n      permissions {\n        run\n        delete\n        update\n        createTemplateVersion {\n          isAllowed\n          reasons\n        }\n      }\n      template {\n        id\n        name\n        code\n      }\n      currentVersion {\n        id\n        name\n        description\n        config\n        externalLink\n        templateVersion {\n          id\n        }\n        ...PipelineVersionPicker_version\n        ...DownloadPipelineVersion_version\n      }\n      ...RunPipelineDialog_pipeline\n    }\n    \n    \n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n"): (typeof documents)["\nfragment PipelineLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment PipelineLayout_pipeline on Pipeline {\n  id\n  code\n  name\n  permissions {\n    run\n    delete\n    update\n    createTemplateVersion {\n      isAllowed\n      reasons\n    }\n  }\n  template {\n    id\n    name\n    code\n  }\n  currentVersion {\n    id\n    name\n    description\n    config\n    externalLink\n    templateVersion {\n      id\n    }\n    ...PipelineVersionPicker_version\n    ...DownloadPipelineVersion_version\n  }\n  ...RunPipelineDialog_pipeline\n}\n"): (typeof documents)["\nfragment PipelineLayout_pipeline on Pipeline {\n  id\n  code\n  name\n  permissions {\n    run\n    delete\n    update\n    createTemplateVersion {\n      isAllowed\n      reasons\n    }\n  }\n  template {\n    id\n    name\n    code\n  }\n  currentVersion {\n    id\n    name\n    description\n    config\n    externalLink\n    templateVersion {\n      id\n    }\n    ...PipelineVersionPicker_version\n    ...DownloadPipelineVersion_version\n  }\n  ...RunPipelineDialog_pipeline\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TabLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n    }\n    \n  "): (typeof documents)["\n    fragment TabLayout_workspace on Workspace {\n      ...WorkspaceLayout_workspace\n      name\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TabLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n}\n"): (typeof documents)["\nfragment TabLayout_workspace on Workspace {\n  ...WorkspaceLayout_workspace\n  name\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TemplateLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  "): (typeof documents)["\n    fragment TemplateLayout_workspace on Workspace {\n      ...TabLayout_workspace\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment TemplateLayout_template on PipelineTemplate {\n      id\n      code\n      name\n      permissions {\n        delete\n        update\n      }\n      currentVersion {\n        id\n        ...DownloadTemplateVersion_version\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment TemplateLayout_template on PipelineTemplate {\n      id\n      code\n      name\n      permissions {\n        delete\n        update\n      }\n      currentVersion {\n        id\n        ...DownloadTemplateVersion_version\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TemplateLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n"): (typeof documents)["\nfragment TemplateLayout_workspace on Workspace {\n  ...TabLayout_workspace\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment TemplateLayout_template on PipelineTemplate {\n  id\n  code\n  name\n  permissions {\n    delete\n    update\n  }\n  currentVersion {\n    id\n    ...DownloadTemplateVersion_version\n  }\n}\n"): (typeof documents)["\nfragment TemplateLayout_template on PipelineTemplate {\n  id\n  code\n  name\n  permissions {\n    delete\n    update\n  }\n  currentVersion {\n    id\n    ...DownloadTemplateVersion_version\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Sidebar_workspace on Workspace {\n      slug\n      ...SidebarMenu_workspace\n      permissions {\n        manageMembers\n        update\n        launchNotebookServer\n      }\n    }\n    \n  "): (typeof documents)["\n    fragment Sidebar_workspace on Workspace {\n      slug\n      ...SidebarMenu_workspace\n      permissions {\n        manageMembers\n        update\n        launchNotebookServer\n      }\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment Sidebar_workspace on Workspace {\n  slug\n  ...SidebarMenu_workspace\n  permissions {\n    manageMembers\n    update\n    launchNotebookServer\n  }\n}\n"): (typeof documents)["\nfragment Sidebar_workspace on Workspace {\n  slug\n  ...SidebarMenu_workspace\n  permissions {\n    manageMembers\n    update\n    launchNotebookServer\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorkspaceLayout_workspace on Workspace {\n      slug\n      ...Sidebar_workspace\n    }\n    \n  "): (typeof documents)["\n    fragment WorkspaceLayout_workspace on Workspace {\n      slug\n      ...Sidebar_workspace\n    }\n    \n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nfragment WorkspaceLayout_workspace on Workspace {\n  slug\n  ...Sidebar_workspace\n}\n"): (typeof documents)["\nfragment WorkspaceLayout_workspace on Workspace {\n  slug\n  ...Sidebar_workspace\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;